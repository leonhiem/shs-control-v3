
shs-master-as.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000ab6  00800100  00006562  00006636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006562  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004b4  00800bb6  00800bb6  000070ec  2**0
                  ALLOC
  3 .eeprom       000000fd  00810000  00810000  000070ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fuse         00000003  00820000  00820000  000071e9  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .comment      0000005c  00000000  00000000  000071ec  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007248  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000470  00000000  00000000  00007288  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000089e7  00000000  00000000  000076f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001567  00000000  00000000  000100df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003c0b  00000000  00000000  00011646  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000f14  00000000  00000000  00015254  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000012a8  00000000  00000000  00016168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005e58  00000000  00000000  00017410  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000003d8  00000000  00000000  0001d268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fc c0       	rjmp	.+504    	; 0x1fa <__ctors_end>
       2:	00 00       	nop
       4:	25 c1       	rjmp	.+586    	; 0x250 <__bad_interrupt>
       6:	00 00       	nop
       8:	23 c1       	rjmp	.+582    	; 0x250 <__bad_interrupt>
       a:	00 00       	nop
       c:	21 c1       	rjmp	.+578    	; 0x250 <__bad_interrupt>
       e:	00 00       	nop
      10:	1f c1       	rjmp	.+574    	; 0x250 <__bad_interrupt>
      12:	00 00       	nop
      14:	1d c1       	rjmp	.+570    	; 0x250 <__bad_interrupt>
      16:	00 00       	nop
      18:	1b c1       	rjmp	.+566    	; 0x250 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 1a 17 	jmp	0x2e34	; 0x2e34 <__vector_7>
      20:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <__vector_8>
      24:	15 c1       	rjmp	.+554    	; 0x250 <__bad_interrupt>
      26:	00 00       	nop
      28:	13 c1       	rjmp	.+550    	; 0x250 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	11 c1       	rjmp	.+546    	; 0x250 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0f c1       	rjmp	.+542    	; 0x250 <__bad_interrupt>
      32:	00 00       	nop
      34:	0d c1       	rjmp	.+538    	; 0x250 <__bad_interrupt>
      36:	00 00       	nop
      38:	0b c1       	rjmp	.+534    	; 0x250 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	09 c1       	rjmp	.+530    	; 0x250 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__vector_16>
      44:	05 c1       	rjmp	.+522    	; 0x250 <__bad_interrupt>
      46:	00 00       	nop
      48:	03 c1       	rjmp	.+518    	; 0x250 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	01 c1       	rjmp	.+514    	; 0x250 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__vector_20>
      54:	fd c0       	rjmp	.+506    	; 0x250 <__bad_interrupt>
      56:	00 00       	nop
      58:	fb c0       	rjmp	.+502    	; 0x250 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f9 c0       	rjmp	.+498    	; 0x250 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f7 c0       	rjmp	.+494    	; 0x250 <__bad_interrupt>
      62:	00 00       	nop
      64:	f5 c0       	rjmp	.+490    	; 0x250 <__bad_interrupt>
      66:	00 00       	nop
      68:	f3 c0       	rjmp	.+486    	; 0x250 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f1 c0       	rjmp	.+482    	; 0x250 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__vector_28>
      74:	ed c0       	rjmp	.+474    	; 0x250 <__bad_interrupt>
      76:	00 00       	nop
      78:	eb c0       	rjmp	.+470    	; 0x250 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e9 c0       	rjmp	.+466    	; 0x250 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e7 c0       	rjmp	.+462    	; 0x250 <__bad_interrupt>
      82:	00 00       	nop
      84:	e5 c0       	rjmp	.+458    	; 0x250 <__bad_interrupt>
      86:	00 00       	nop
      88:	e3 c0       	rjmp	.+454    	; 0x250 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	63 64       	ori	r22, 0x43	; 67
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	6f 70       	andi	r22, 0x0F	; 15
      92:	73 75       	andi	r23, 0x53	; 83
      94:	78 58       	subi	r23, 0x88	; 136
      96:	5b 00       	.word	0x005b	; ????

00000098 <__c.2495>:
      98:	0d 0a 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2b 2d 2d 2d     ..----------+---
      a8:	2d 2d 2d 2b 2d 2d 2d 2d 2d 2d 2b 2d 2d 2d 2d 2b     ---+------+----+
	...

000000b9 <__c.2493>:
      b9:	0d 0a 53 43 43 3a 20 20 64 61 79 73 20 20 79 64     ..SCC:  days  yd
      c9:	61 79 6c 20 20 20 41 68 20 20 20 53 6f 43 43 20     ayl   Ah   SoCC 
	...

000000da <__c.2488>:
      da:	0d 0a 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ..--------------
      ea:	2b 2d 2d 2d 2d 2d 2d 2b 2d 2d 2d 2d 2d 2b 2d 2d     +------+-----+--
      fa:	2d 2b 2d 2d 2d 2d 2d 2d 2b 2d 2d 2d 2d 2d 2d 2d     -+------+-------
     10a:	2d 2b 2d 2d 2d 2d 2d 2b 2d 2d 2d 2d 2d 2d 2b 2d     -+-----+------+-
     11a:	2d 2d 2d 2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           ---+---------.

00000128 <__c.2486>:
     128:	0d 0a 53 43 43 3a 20 20 20 20 73 79 73 74 65 6d     ..SCC:    system
     138:	20 62 61 74 74 73 74 20 73 6f 6c 73 74 20 53 6f      battst solst So
     148:	43 20 20 20 56 70 76 20 20 49 63 68 61 72 67 65     C   Vpv  Icharge
     158:	20 20 56 62 61 74 74 20 20 49 6c 6f 61 64 20 74       Vbatt  Iload t
     168:	65 6d 70 20 6c 6f 61 64 73 74 61 74 65 00           emp loadstate.

00000176 <__c.2813>:
     176:	3e 3e 20 53 48 53 2d 43 6f 6e 74 72 6f 6c 20 36     >> SHS-Control 6
     186:	2e 34 20 72 75 6e 6e 69 6e 67 20 3e 3e 0a 0d 00     .4 running >>...

00000196 <PM_SOCstr2>:
     196:	25 64 3b 25 64 3b 25 64 3b 25 64 3b 25 64 3b 25     %d;%d;%d;%d;%d;%
     1a6:	64 3b 25 64 3b 00                                   d;%d;.

000001ac <PM_SOCstr1>:
     1ac:	3b 33 2e 31 3b 36 2e 34 3b 25 63 25 63 25 63 25     ;3.1;6.4;%c%c%c%
     1bc:	63 3b 25 63 25 63 25 63 25 63 3b 25 6c 75 3b 25     c;%c%c%c%c;%lu;%
     1cc:	63 25 63 25 63 25 63 3b 00                          c%c%c%c;.

000001d5 <PM_GETcmdDATA>:
     1d5:	3f 64 61 74 61 3d 00                                ?data=.

000001dc <PM_URLfilepath_data>:
     1dc:	2f 61 6e 61 6c 79 74 69 63 73 2f 64 61 74 61 70     /analytics/datap
     1ec:	6f 69 6e 74 5f 62 61 63 6b 65 6e 64 2f 00           oint_backend/.

000001fa <__ctors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	d0 e4       	ldi	r29, 0x40	; 64
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <wdt_first>:
}

unsigned char Poll_TERM(void)
{
        if(UART_TERM_RxHead == UART_TERM_RxTail) return 0; else return 1;
}
     206:	14 be       	out	0x34, r1	; 52
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	a8 95       	wdr
     20e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     212:	88 61       	ori	r24, 0x18	; 24
     214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     218:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21c:	0f be       	out	0x3f, r0	; 63

0000021e <__do_copy_data>:
     21e:	1b e0       	ldi	r17, 0x0B	; 11
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	e2 e6       	ldi	r30, 0x62	; 98
     226:	f5 e6       	ldi	r31, 0x65	; 101
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0b bf       	out	0x3b, r16	; 59
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__do_copy_data+0x14>
     22e:	07 90       	elpm	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	a6 3b       	cpi	r26, 0xB6	; 182
     234:	b1 07       	cpc	r27, r17
     236:	d9 f7       	brne	.-10     	; 0x22e <__do_copy_data+0x10>

00000238 <__do_clear_bss>:
     238:	20 e1       	ldi	r18, 0x10	; 16
     23a:	a6 eb       	ldi	r26, 0xB6	; 182
     23c:	bb e0       	ldi	r27, 0x0B	; 11
     23e:	01 c0       	rjmp	.+2      	; 0x242 <.do_clear_bss_start>

00000240 <.do_clear_bss_loop>:
     240:	1d 92       	st	X+, r1

00000242 <.do_clear_bss_start>:
     242:	aa 36       	cpi	r26, 0x6A	; 106
     244:	b2 07       	cpc	r27, r18
     246:	e1 f7       	brne	.-8      	; 0x240 <.do_clear_bss_loop>
     248:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <main>
     24c:	0c 94 af 32 	jmp	0x655e	; 0x655e <_exit>

00000250 <__bad_interrupt>:
     250:	d7 ce       	rjmp	.-594    	; 0x0 <__vectors>

00000252 <delayloop32>:

#include "delay.h"

void delayloop32(uint32_t loops) 
{
  __asm__ volatile ( "cp  %A0,__zero_reg__ \n\t"  \
     252:	dc 01       	movw	r26, r24
     254:	cb 01       	movw	r24, r22
     256:	81 15       	cp	r24, r1
     258:	91 05       	cpc	r25, r1
     25a:	a1 05       	cpc	r26, r1
     25c:	b1 05       	cpc	r27, r1
     25e:	29 f0       	breq	.+10     	; 0x26a <L_Exit_7>

00000260 <L_LOOP_7>:
     260:	81 50       	subi	r24, 0x01	; 1
     262:	90 40       	sbci	r25, 0x00	; 0
     264:	a0 40       	sbci	r26, 0x00	; 0
     266:	b0 40       	sbci	r27, 0x00	; 0
     268:	d9 f7       	brne	.-10     	; 0x260 <L_LOOP_7>

0000026a <L_Exit_7>:
     26a:	08 95       	ret

0000026c <quota_to_percent>:
#include <avr/sleep.h>

#include "shsctrl.h"

uint8_t quota_to_percent(uint16_t quota, uint16_t max_quota)
{
     26c:	9b 01       	movw	r18, r22
    uint32_t percent;
    percent=quota*100;
     26e:	44 e6       	ldi	r20, 0x64	; 100
     270:	bc 01       	movw	r22, r24
     272:	46 9f       	mul	r20, r22
     274:	c0 01       	movw	r24, r0
     276:	47 9f       	mul	r20, r23
     278:	90 0d       	add	r25, r0
     27a:	11 24       	eor	r1, r1
     27c:	bc 01       	movw	r22, r24
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
    percent=percent/max_quota;
    return (uint8_t)percent;
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
     28a:	82 2f       	mov	r24, r18
}
     28c:	08 95       	ret

0000028e <battstate_to_str>:
{
    uint32_t v=(uint32_t)vbatt;
    v *= 1650;
    v /= 1023;
    return (short)v;
}
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	31 f0       	breq	.+12     	; 0x29e <battstate_to_str+0x10>
     292:	88 f0       	brcs	.+34     	; 0x2b6 <battstate_to_str+0x28>
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	31 f0       	breq	.+12     	; 0x2a4 <battstate_to_str+0x16>
     298:	83 30       	cpi	r24, 0x03	; 3
     29a:	39 f0       	breq	.+14     	; 0x2aa <battstate_to_str+0x1c>
     29c:	09 c0       	rjmp	.+18     	; 0x2b0 <battstate_to_str+0x22>
     29e:	8c e1       	ldi	r24, 0x1C	; 28
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	08 95       	ret
     2a4:	84 e2       	ldi	r24, 0x24	; 36
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	08 95       	ret
     2aa:	8c e2       	ldi	r24, 0x2C	; 44
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	08 95       	ret
     2b0:	84 e3       	ldi	r24, 0x34	; 52
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	08 95       	ret
     2b6:	84 e1       	ldi	r24, 0x14	; 20
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	08 95       	ret

000002bc <sysstate_to_str>:
     2bc:	8f 70       	andi	r24, 0x0F	; 15
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	31 f0       	breq	.+12     	; 0x2ce <sysstate_to_str+0x12>
     2c2:	88 f0       	brcs	.+34     	; 0x2e6 <sysstate_to_str+0x2a>
     2c4:	82 30       	cpi	r24, 0x02	; 2
     2c6:	31 f0       	breq	.+12     	; 0x2d4 <sysstate_to_str+0x18>
     2c8:	83 30       	cpi	r24, 0x03	; 3
     2ca:	39 f0       	breq	.+14     	; 0x2da <sysstate_to_str+0x1e>
     2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <sysstate_to_str+0x24>
     2ce:	8b e4       	ldi	r24, 0x4B	; 75
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	08 95       	ret
     2d4:	82 e5       	ldi	r24, 0x52	; 82
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	08 95       	ret
     2da:	89 e5       	ldi	r24, 0x59	; 89
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	08 95       	ret
     2e0:	85 e3       	ldi	r24, 0x35	; 53
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	08 95       	ret
     2e6:	84 e4       	ldi	r24, 0x44	; 68
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	08 95       	ret

000002ec <solarstate_to_str>:
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	21 f0       	breq	.+8      	; 0x2f8 <solarstate_to_str+0xc>
     2f0:	60 f0       	brcs	.+24     	; 0x30a <solarstate_to_str+0x1e>
     2f2:	82 30       	cpi	r24, 0x02	; 2
     2f4:	21 f0       	breq	.+8      	; 0x2fe <solarstate_to_str+0x12>
     2f6:	06 c0       	rjmp	.+12     	; 0x304 <solarstate_to_str+0x18>
     2f8:	87 e6       	ldi	r24, 0x67	; 103
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	08 95       	ret
     2fe:	8e e6       	ldi	r24, 0x6E	; 110
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	08 95       	ret
     304:	85 e7       	ldi	r24, 0x75	; 117
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	08 95       	ret
     30a:	80 e6       	ldi	r24, 0x60	; 96
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	08 95       	ret

00000310 <loadstate_to_str>:
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	31 f0       	breq	.+12     	; 0x320 <loadstate_to_str+0x10>
     314:	88 f0       	brcs	.+34     	; 0x338 <loadstate_to_str+0x28>
     316:	82 30       	cpi	r24, 0x02	; 2
     318:	31 f0       	breq	.+12     	; 0x326 <loadstate_to_str+0x16>
     31a:	83 30       	cpi	r24, 0x03	; 3
     31c:	39 f0       	breq	.+14     	; 0x32c <loadstate_to_str+0x1c>
     31e:	09 c0       	rjmp	.+18     	; 0x332 <loadstate_to_str+0x22>
     320:	84 e8       	ldi	r24, 0x84	; 132
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	08 95       	ret
     326:	8c e8       	ldi	r24, 0x8C	; 140
     328:	91 e0       	ldi	r25, 0x01	; 1
     32a:	08 95       	ret
     32c:	84 e9       	ldi	r24, 0x94	; 148
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	08 95       	ret
     332:	84 e3       	ldi	r24, 0x34	; 52
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	08 95       	ret
     338:	8c e7       	ldi	r24, 0x7C	; 124
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	08 95       	ret

0000033e <scc_monitor>:


void scc_monitor(void)
{
     33e:	2f 92       	push	r2
     340:	3f 92       	push	r3
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
     366:	62 97       	sbiw	r28, 0x12	; 18
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
    uint8_t twi_data[16];
    unsigned char s,checksum,checksum_chk,step;
    unsigned short tmp_adc;	
	unsigned short day_meter,minute_meter;

    wdt_reset();
     372:	a8 95       	wdr
	sysval.watchdog=0;
     374:	10 92 cd 0f 	sts	0x0FCD, r1	; 0x800fcd <sysval+0xe>
     378:	0f 2e       	mov	r0, r31
     37a:	ff eb       	ldi	r31, 0xBF	; 191
     37c:	cf 2e       	mov	r12, r31
     37e:	ff e0       	ldi	r31, 0x0F	; 15
     380:	df 2e       	mov	r13, r31
     382:	f0 2d       	mov	r31, r0
     384:	0f 2e       	mov	r0, r31
     386:	f3 ef       	ldi	r31, 0xF3	; 243
     388:	6f 2e       	mov	r6, r31
     38a:	ff e0       	ldi	r31, 0x0F	; 15
     38c:	7f 2e       	mov	r7, r31
     38e:	f0 2d       	mov	r31, r0
     390:	0f 2e       	mov	r0, r31
     392:	fc e2       	ldi	r31, 0x2C	; 44
     394:	5f 2e       	mov	r5, r31
     396:	f0 2d       	mov	r31, r0
     398:	a1 2c       	mov	r10, r1
     39a:	b1 2c       	mov	r11, r1

    for(s=0;s<MAX_NOF_SCC;s++) {
        twi_sla=I2C_SCC_BASE_ADDR+s;
        delay_ms(50);
        memset(twi_data,0,16);
     39c:	68 94       	set
     39e:	44 24       	eor	r4, r4
     3a0:	44 f8       	bld	r4, 4
     3a2:	ce 01       	movw	r24, r28
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	1c 01       	movw	r2, r24
     3a8:	8e 01       	movw	r16, r28
     3aa:	0f 5e       	subi	r16, 0xEF	; 239
     3ac:	1f 4f       	sbci	r17, 0xFF	; 255
    wdt_reset();
	sysval.watchdog=0;

    for(s=0;s<MAX_NOF_SCC;s++) {
        twi_sla=I2C_SCC_BASE_ADDR+s;
        delay_ms(50);
     3ae:	68 ed       	ldi	r22, 0xD8	; 216
     3b0:	7f ee       	ldi	r23, 0xEF	; 239
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	4d df       	rcall	.-358    	; 0x252 <delayloop32>
        memset(twi_data,0,16);
     3b8:	f1 01       	movw	r30, r2
     3ba:	24 2d       	mov	r18, r4
     3bc:	11 92       	st	Z+, r1
     3be:	2a 95       	dec	r18
     3c0:	e9 f7       	brne	.-6      	; 0x3bc <scc_monitor+0x7e>
        sysval.scc_sysstate[s]=0;
     3c2:	a9 8a       	std	Y+17, r10	; 0x11
     3c4:	ba 8a       	std	Y+18, r11	; 0x12
     3c6:	46 01       	movw	r8, r12
     3c8:	f6 01       	movw	r30, r12
     3ca:	14 8a       	std	Z+20, r1	; 0x14
        if(twi_write_one(twi_sla,I2C_CMD_READSTAT_WDT) >= 0) {
     3cc:	67 ea       	ldi	r22, 0xA7	; 167
     3ce:	85 2d       	mov	r24, r5
     3d0:	0e 94 20 29 	call	0x5240	; 0x5240 <twi_write_one>
     3d4:	99 23       	and	r25, r25
     3d6:	0c f4       	brge	.+2      	; 0x3da <scc_monitor+0x9c>
     3d8:	fe c0       	rjmp	.+508    	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
            delay_ms(5);
     3da:	6c ef       	ldi	r22, 0xFC	; 252
     3dc:	77 e1       	ldi	r23, 0x17	; 23
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	37 df       	rcall	.-402    	; 0x252 <delayloop32>
            if(twi_read_small(16,twi_data,twi_sla) >= 0) {
     3e4:	45 2d       	mov	r20, r5
     3e6:	b1 01       	movw	r22, r2
     3e8:	80 e1       	ldi	r24, 0x10	; 16
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 93 29 	call	0x5326	; 0x5326 <twi_read_small>
     3f0:	99 23       	and	r25, r25
     3f2:	0c f4       	brge	.+2      	; 0x3f6 <scc_monitor+0xb8>
     3f4:	eb c0       	rjmp	.+470    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
                int i;
                checksum=twi_data[15];
     3f6:	28 89       	ldd	r18, Y+16	; 0x10
                twi_data[15]=0;
     3f8:	18 8a       	std	Y+16, r1	; 0x10
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	7c 01       	movw	r14, r24
     400:	fc 01       	movw	r30, r24
                checksum_chk=0;
     402:	80 e0       	ldi	r24, 0x00	; 0
                for(i=0;i<16;i++) {
                    checksum_chk+=twi_data[i];
     404:	91 91       	ld	r25, Z+
     406:	89 0f       	add	r24, r25
            if(twi_read_small(16,twi_data,twi_sla) >= 0) {
                int i;
                checksum=twi_data[15];
                twi_data[15]=0;
                checksum_chk=0;
                for(i=0;i<16;i++) {
     408:	e0 17       	cp	r30, r16
     40a:	f1 07       	cpc	r31, r17
     40c:	d9 f7       	brne	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
                    checksum_chk+=twi_data[i];
                }
                if(checksum_chk==checksum) {
     40e:	28 13       	cpse	r18, r24
     410:	39 c0       	rjmp	.+114    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
					i=1;
					day_meter =((unsigned short)twi_data[i++])<<8;
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	98 2f       	mov	r25, r24
     418:	88 27       	eor	r24, r24
					day_meter|=((unsigned short)twi_data[i++])&0xff;
					sysval.scc_days[s]       = day_meter;
     41a:	2b 81       	ldd	r18, Y+3	; 0x03
     41c:	82 2b       	or	r24, r18
     41e:	f3 01       	movw	r30, r6
     420:	91 af       	std	Z+57, r25	; 0x39
     422:	80 af       	std	Z+56, r24	; 0x38
					minute_meter =((unsigned short)twi_data[i++])<<8;
					minute_meter|=((unsigned short)twi_data[i++])&0xff;
					//printf("[%d] dayl=%d min=%d\n",s,day_meter,minute_meter);					
					
                    i=5;
                    sysval.scc_sysstate[s]   = twi_data[i++];
     424:	8e 81       	ldd	r24, Y+6	; 0x06
     426:	f4 01       	movw	r30, r8
     428:	84 8b       	std	Z+20, r24	; 0x14
                    sysval.scc_battstate[s]  = twi_data[i++];
     42a:	8f 81       	ldd	r24, Y+7	; 0x07
     42c:	80 8f       	std	Z+24, r24	; 0x18
                    sysval.scc_solarstate[s] = twi_data[i++];
     42e:	88 85       	ldd	r24, Y+8	; 0x08
     430:	84 8f       	std	Z+28, r24	; 0x1c
                    sysval.scc_loadstate[s]  = twi_data[i++];
     432:	89 85       	ldd	r24, Y+9	; 0x09
     434:	80 a3       	std	Z+32, r24	; 0x20
                    sysval.scc_soc[s]        = twi_data[i++];
     436:	8a 85       	ldd	r24, Y+10	; 0x0a
     438:	80 a7       	std	Z+40, r24	; 0x28
					
					step                     = twi_data[i++]; //i++; // mppt_stepsize
					printf("[%d] mppt_stepsize=%d\n",s,step);
     43a:	8b 85       	ldd	r24, Y+11	; 0x0b
     43c:	1f 92       	push	r1
     43e:	8f 93       	push	r24
     440:	fa 89       	ldd	r31, Y+18	; 0x12
     442:	ff 93       	push	r31
     444:	29 89       	ldd	r18, Y+17	; 0x11
     446:	2f 93       	push	r18
     448:	8c e9       	ldi	r24, 0x9C	; 156
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	9f 93       	push	r25
     44e:	8f 93       	push	r24
     450:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
					
                    sysval.scc_door[s]       = twi_data[i++];
     454:	8c 85       	ldd	r24, Y+12	; 0x0c
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	f3 01       	movw	r30, r6
     45a:	91 a3       	std	Z+33, r25	; 0x21
     45c:	80 a3       	std	Z+32, r24	; 0x20
					sysval.scc_daystate[s]   = twi_data[i++];
     45e:	8d 85       	ldd	r24, Y+13	; 0x0d
     460:	f4 01       	movw	r30, r8
     462:	84 a3       	std	Z+36, r24	; 0x24
					
					day_meter =((unsigned short)twi_data[i++])<<8;
     464:	8e 85       	ldd	r24, Y+14	; 0x0e
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	98 2f       	mov	r25, r24
     46a:	88 27       	eor	r24, r24
					day_meter|=((unsigned short)twi_data[i++])&0xff;
					sysval.scc_ydayl[s]      = day_meter;
     46c:	2f 85       	ldd	r18, Y+15	; 0x0f
     46e:	82 2b       	or	r24, r18
     470:	f3 01       	movw	r30, r6
     472:	91 ab       	std	Z+49, r25	; 0x31
     474:	80 ab       	std	Z+48, r24	; 0x30
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	04 c0       	rjmp	.+8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
					
                } else sysval.scc_sysstate[s] |= 0x40; //communication was ERROR
     484:	f4 01       	movw	r30, r8
     486:	84 89       	ldd	r24, Z+20	; 0x14
     488:	80 64       	ori	r24, 0x40	; 64
     48a:	84 8b       	std	Z+20, r24	; 0x14

                delay_ms(10);
     48c:	68 ef       	ldi	r22, 0xF8	; 248
     48e:	7f e2       	ldi	r23, 0x2F	; 47
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	de de       	rcall	.-580    	; 0x252 <delayloop32>
                memset(twi_data,0,16);
     496:	f1 01       	movw	r30, r2
     498:	24 2d       	mov	r18, r4
     49a:	11 92       	st	Z+, r1
     49c:	2a 95       	dec	r18
     49e:	e9 f7       	brne	.-6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
                if(twi_write_one(twi_sla,I2C_CMD_READADC) >= 0) {
     4a0:	65 ea       	ldi	r22, 0xA5	; 165
     4a2:	85 2d       	mov	r24, r5
     4a4:	0e 94 20 29 	call	0x5240	; 0x5240 <twi_write_one>
     4a8:	99 23       	and	r25, r25
     4aa:	0c f4       	brge	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	8a c0       	rjmp	.+276    	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
                    delay_ms(5);
     4ae:	6c ef       	ldi	r22, 0xFC	; 252
     4b0:	77 e1       	ldi	r23, 0x17	; 23
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	cd de       	rcall	.-614    	; 0x252 <delayloop32>
                    if(twi_read_small(16,twi_data,twi_sla) >= 0) {
     4b8:	45 2d       	mov	r20, r5
     4ba:	b1 01       	movw	r22, r2
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 93 29 	call	0x5326	; 0x5326 <twi_read_small>
     4c4:	99 23       	and	r25, r25
     4c6:	0c f4       	brge	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4c8:	77 c0       	rjmp	.+238    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
                        int i;
                        checksum=twi_data[15];
     4ca:	28 89       	ldd	r18, Y+16	; 0x10
                        twi_data[15]=0;
     4cc:	18 8a       	std	Y+16, r1	; 0x10
                        checksum_chk=0;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
                        for(i=0;i<16;i++) {
                            checksum_chk+=twi_data[i];
     4d0:	f7 01       	movw	r30, r14
     4d2:	91 91       	ld	r25, Z+
     4d4:	7f 01       	movw	r14, r30
     4d6:	89 0f       	add	r24, r25
                    if(twi_read_small(16,twi_data,twi_sla) >= 0) {
                        int i;
                        checksum=twi_data[15];
                        twi_data[15]=0;
                        checksum_chk=0;
                        for(i=0;i<16;i++) {
     4d8:	e0 17       	cp	r30, r16
     4da:	f1 07       	cpc	r31, r17
     4dc:	c9 f7       	brne	.-14     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
                            checksum_chk+=twi_data[i];
                        }
                        if(checksum_chk==checksum) {
     4de:	28 13       	cpse	r18, r24
     4e0:	66 c0       	rjmp	.+204    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
							i=1;
							tmp_adc =((unsigned short)twi_data[i++])<<8;
     4e2:	2a 81       	ldd	r18, Y+2	; 0x02
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	32 2f       	mov	r19, r18
     4e8:	22 27       	eor	r18, r18
        return(" ??????");
    }
}
short vsolar_to_volt(unsigned short vsolar)
{
    uint32_t v=(uint32_t)vsolar;
     4ea:	8b 81       	ldd	r24, Y+3	; 0x03
     4ec:	28 2b       	or	r18, r24
    v *= 13255;
     4ee:	a7 ec       	ldi	r26, 0xC7	; 199
     4f0:	b3 e3       	ldi	r27, 0x33	; 51
     4f2:	0e 94 b6 2a 	call	0x556c	; 0x556c <__umulhisi3>
                        }
                        if(checksum_chk==checksum) {
							i=1;
							tmp_adc =((unsigned short)twi_data[i++])<<8;
							tmp_adc|=((unsigned short)twi_data[i++])&0xff;
							printf("[%d] vpv_oc=%d\n",s,vsolar_to_volt(tmp_adc));
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	33 e0       	ldi	r19, 0x03	; 3
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
     502:	3f 93       	push	r19
     504:	2f 93       	push	r18
     506:	fa 89       	ldd	r31, Y+18	; 0x12
     508:	ff 93       	push	r31
     50a:	29 89       	ldd	r18, Y+17	; 0x11
     50c:	2f 93       	push	r18
     50e:	83 eb       	ldi	r24, 0xB3	; 179
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
							
                            i=3;
                            tmp_adc =((unsigned short)twi_data[i++])<<8;
     51a:	8c 81       	ldd	r24, Y+4	; 0x04
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	98 2f       	mov	r25, r24
     520:	88 27       	eor	r24, r24
                            tmp_adc|=((unsigned short)twi_data[i++])&0xff;
                            sysval.scc_vpv[s]=tmp_adc;
     522:	2d 81       	ldd	r18, Y+5	; 0x05
     524:	82 2b       	or	r24, r18
     526:	f3 01       	movw	r30, r6
     528:	91 87       	std	Z+9, r25	; 0x09
     52a:	80 87       	std	Z+8, r24	; 0x08
        
                            tmp_adc =((unsigned short)twi_data[i++])<<8;
     52c:	8e 81       	ldd	r24, Y+6	; 0x06
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	98 2f       	mov	r25, r24
     532:	88 27       	eor	r24, r24
                            tmp_adc|=((unsigned short)twi_data[i++])&0xff;
                            sysval.scc_icharge[s]=tmp_adc;
     534:	2f 81       	ldd	r18, Y+7	; 0x07
     536:	82 2b       	or	r24, r18
     538:	91 8b       	std	Z+17, r25	; 0x11
     53a:	80 8b       	std	Z+16, r24	; 0x10
        
                            tmp_adc =((unsigned short)twi_data[i++])<<8;
     53c:	88 85       	ldd	r24, Y+8	; 0x08
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	98 2f       	mov	r25, r24
     542:	88 27       	eor	r24, r24
                            tmp_adc|=((unsigned short)twi_data[i++])&0xff;
                            sysval.scc_vbatt[s]=tmp_adc;
     544:	29 85       	ldd	r18, Y+9	; 0x09
     546:	82 2b       	or	r24, r18
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	80 83       	st	Z, r24
        
                            tmp_adc =((unsigned short)twi_data[i++])<<8;
     54c:	8a 85       	ldd	r24, Y+10	; 0x0a
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	98 2f       	mov	r25, r24
     552:	88 27       	eor	r24, r24
                            tmp_adc|=((unsigned short)twi_data[i++])&0xff;
                            sysval.scc_iload[s]=tmp_adc;							
     554:	2b 85       	ldd	r18, Y+11	; 0x0b
     556:	82 2b       	or	r24, r18
     558:	91 8f       	std	Z+25, r25	; 0x19
     55a:	80 8f       	std	Z+24, r24	; 0x18
        
                            sysval.scc_temp[s]=twi_data[i++];							
     55c:	8c 85       	ldd	r24, Y+12	; 0x0c
     55e:	f4 01       	movw	r30, r8
     560:	80 ab       	std	Z+48, r24	; 0x30
							
							tmp_adc =((unsigned short)twi_data[i++])<<8;
     562:	2d 85       	ldd	r18, Y+13	; 0x0d
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	32 2f       	mov	r19, r18
     568:	22 27       	eor	r18, r18
    i /= 1023;
    return (short)i;
}
short vbatt_to_volt(unsigned short vbatt)
{
    uint32_t v=(uint32_t)vbatt;
     56a:	8e 85       	ldd	r24, Y+14	; 0x0e
     56c:	28 2b       	or	r18, r24
    v *= 1650;
     56e:	a2 e7       	ldi	r26, 0x72	; 114
     570:	b6 e0       	ldi	r27, 0x06	; 6
     572:	0e 94 b6 2a 	call	0x556c	; 0x556c <__umulhisi3>
        
                            sysval.scc_temp[s]=twi_data[i++];							
							
							tmp_adc =((unsigned short)twi_data[i++])<<8;
							tmp_adc|=((unsigned short)twi_data[i++])&0xff;
							printf("[%d] Vfloat=%d\n",s,vbatt_to_volt(tmp_adc));
     576:	2f ef       	ldi	r18, 0xFF	; 255
     578:	33 e0       	ldi	r19, 0x03	; 3
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
     582:	3f 93       	push	r19
     584:	2f 93       	push	r18
     586:	fa 89       	ldd	r31, Y+18	; 0x12
     588:	ff 93       	push	r31
     58a:	29 89       	ldd	r18, Y+17	; 0x11
     58c:	2f 93       	push	r18
     58e:	83 ec       	ldi	r24, 0xC3	; 195
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
							
                            sysval.scc_sysstate[s] |= 0x80; //communication was OK 
     59a:	f4 01       	movw	r30, r8
     59c:	84 89       	ldd	r24, Z+20	; 0x14
     59e:	80 68       	ori	r24, 0x80	; 128
     5a0:	84 8b       	std	Z+20, r24	; 0x14
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	18 c0       	rjmp	.+48     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
                        } else sysval.scc_sysstate[s] |= 0x40; //communication was ERROR
     5ae:	f4 01       	movw	r30, r8
     5b0:	84 89       	ldd	r24, Z+20	; 0x14
     5b2:	80 64       	ori	r24, 0x40	; 64
     5b4:	84 8b       	std	Z+20, r24	; 0x14
     5b6:	13 c0       	rjmp	.+38     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
                    } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
     5b8:	f4 01       	movw	r30, r8
     5ba:	84 89       	ldd	r24, Z+20	; 0x14
     5bc:	80 62       	ori	r24, 0x20	; 32
     5be:	84 8b       	std	Z+20, r24	; 0x14
     5c0:	0e c0       	rjmp	.+28     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
                } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
     5c2:	f4 01       	movw	r30, r8
     5c4:	84 89       	ldd	r24, Z+20	; 0x14
     5c6:	80 62       	ori	r24, 0x20	; 32
     5c8:	84 8b       	std	Z+20, r24	; 0x14
     5ca:	09 c0       	rjmp	.+18     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
            } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
     5cc:	f6 01       	movw	r30, r12
     5ce:	84 89       	ldd	r24, Z+20	; 0x14
     5d0:	80 62       	ori	r24, 0x20	; 32
     5d2:	84 8b       	std	Z+20, r24	; 0x14
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
        } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
     5d6:	f6 01       	movw	r30, r12
     5d8:	84 89       	ldd	r24, Z+20	; 0x14
     5da:	80 62       	ori	r24, 0x20	; 32
     5dc:	84 8b       	std	Z+20, r24	; 0x14
     5de:	ff ef       	ldi	r31, 0xFF	; 255
     5e0:	af 1a       	sub	r10, r31
     5e2:	bf 0a       	sbc	r11, r31
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	c2 1a       	sub	r12, r18
     5e8:	d2 0a       	sbc	r13, r18
     5ea:	53 94       	inc	r5
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	68 0e       	add	r6, r24
     5f0:	71 1c       	adc	r7, r1
	unsigned short day_meter,minute_meter;

    wdt_reset();
	sysval.watchdog=0;

    for(s=0;s<MAX_NOF_SCC;s++) {
     5f2:	90 e3       	ldi	r25, 0x30	; 48
     5f4:	59 12       	cpse	r5, r25
     5f6:	db ce       	rjmp	.-586    	; 0x3ae <scc_monitor+0x70>
                    } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
                } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
            } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
        } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
    }
}
     5f8:	62 96       	adiw	r28, 0x12	; 18
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	bf 90       	pop	r11
     616:	af 90       	pop	r10
     618:	9f 90       	pop	r9
     61a:	8f 90       	pop	r8
     61c:	7f 90       	pop	r7
     61e:	6f 90       	pop	r6
     620:	5f 90       	pop	r5
     622:	4f 90       	pop	r4
     624:	3f 90       	pop	r3
     626:	2f 90       	pop	r2
     628:	08 95       	ret

0000062a <scc_monitor_dump>:

uint16_t scc_monitor_dump(char *output_buf, int part)
{
     62a:	2f 92       	push	r2
     62c:	3f 92       	push	r3
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <scc_monitor_dump+0x26>
     650:	00 d0       	rcall	.+0      	; 0x652 <scc_monitor_dump+0x28>
     652:	1f 92       	push	r1
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	5c 01       	movw	r10, r24
	uint16_t len=0;
	uint8_t twi_sla,s;
	
	if(output_buf==NULL) {
     65a:	89 2b       	or	r24, r25
     65c:	09 f0       	breq	.+2      	; 0x660 <scc_monitor_dump+0x36>
     65e:	58 c1       	rjmp	.+688    	; 0x910 <scc_monitor_dump+0x2e6>
		printf_P(PSTR("\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstate"));
     660:	88 e2       	ldi	r24, 0x28	; 40
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	0e 94 b4 2b 	call	0x5768	; 0x5768 <printf_P>
		printf_P(PSTR("\r\n--------------+------+-----+---+------+--------+-----+------+----+---------"));
     66c:	8a ed       	ldi	r24, 0xDA	; 218
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0e 94 b4 2b 	call	0x5768	; 0x5768 <printf_P>
     678:	0f 2e       	mov	r0, r31
     67a:	ff eb       	ldi	r31, 0xBF	; 191
     67c:	ef 2e       	mov	r14, r31
     67e:	ff e0       	ldi	r31, 0x0F	; 15
     680:	ff 2e       	mov	r15, r31
     682:	f0 2d       	mov	r31, r0
     684:	0f 2e       	mov	r0, r31
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	af 2e       	mov	r10, r31
     68a:	f0 e1       	ldi	r31, 0x10	; 16
     68c:	bf 2e       	mov	r11, r31
     68e:	f0 2d       	mov	r31, r0
     690:	0f 2e       	mov	r0, r31
     692:	fb e0       	ldi	r31, 0x0B	; 11
     694:	cf 2e       	mov	r12, r31
     696:	f0 e1       	ldi	r31, 0x10	; 16
     698:	df 2e       	mov	r13, r31
     69a:	f0 2d       	mov	r31, r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	47 01       	movw	r8, r14
     6a6:	0f 2e       	mov	r0, r31
     6a8:	fc e2       	ldi	r31, 0x2C	; 44
     6aa:	6f 2e       	mov	r6, r31
     6ac:	71 2c       	mov	r7, r1
     6ae:	f0 2d       	mov	r31, r0
     6b0:	68 94       	set
     6b2:	33 24       	eor	r3, r3
     6b4:	32 f8       	bld	r3, 2
			printf("%s",sysstate_to_str(sysval.scc_sysstate[s]));
			printf("%s",battstate_to_str(sysval.scc_battstate[s]));
			printf("%s",solarstate_to_str(sysval.scc_solarstate[s]));
			printf(" %3d ",sysval.scc_soc[s]);

			printf(" %4d ",sysval.scc_vpv[s]);
     6b6:	0f 2e       	mov	r0, r31
     6b8:	f8 ee       	ldi	r31, 0xE8	; 232
     6ba:	4f 2e       	mov	r4, r31
     6bc:	f1 e0       	ldi	r31, 0x01	; 1
     6be:	5f 2e       	mov	r5, r31
     6c0:	f0 2d       	mov	r31, r0
	if(output_buf==NULL) {
		printf_P(PSTR("\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstate"));
		printf_P(PSTR("\r\n--------------+------+-----+---+------+--------+-----+------+----+---------"));
		for(s=0;s<MAX_NOF_SCC;s++) {
			twi_sla=I2C_SCC_BASE_ADDR+s;
			printf("\r\n[%2x]:",twi_sla);
     6c2:	7f 92       	push	r7
     6c4:	6f 92       	push	r6
     6c6:	23 ed       	ldi	r18, 0xD3	; 211
     6c8:	31 e0       	ldi	r19, 0x01	; 1
     6ca:	3f 93       	push	r19
     6cc:	2f 93       	push	r18
     6ce:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
     6d2:	84 01       	movw	r16, r8
        return(" ??????");
    }
}
char * sysstate_status_to_str(unsigned char sysstate)
{
	if(sysstate&0x80) return("OK "); else return("XX ");
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	f4 01       	movw	r30, r8
     6de:	84 89       	ldd	r24, Z+20	; 0x14
     6e0:	88 23       	and	r24, r24
     6e2:	2c f0       	brlt	.+10     	; 0x6ee <scc_monitor_dump+0xc4>
     6e4:	20 e4       	ldi	r18, 0x40	; 64
     6e6:	31 e0       	ldi	r19, 0x01	; 1
     6e8:	82 2f       	mov	r24, r18
     6ea:	93 2f       	mov	r25, r19
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <scc_monitor_dump+0xcc>
     6ee:	ec e3       	ldi	r30, 0x3C	; 60
     6f0:	f1 e0       	ldi	r31, 0x01	; 1
     6f2:	8e 2f       	mov	r24, r30
     6f4:	9f 2f       	mov	r25, r31
		printf_P(PSTR("\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstate"));
		printf_P(PSTR("\r\n--------------+------+-----+---+------+--------+-----+------+----+---------"));
		for(s=0;s<MAX_NOF_SCC;s++) {
			twi_sla=I2C_SCC_BASE_ADDR+s;
			printf("\r\n[%2x]:",twi_sla);
			printf("%s",sysstate_status_to_str(sysval.scc_sysstate[s]));
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	2c ed       	ldi	r18, 0xDC	; 220
     6fc:	31 e0       	ldi	r19, 0x01	; 1
     6fe:	3f 93       	push	r19
     700:	2f 93       	push	r18
     702:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("%s",sysstate_to_str(sysval.scc_sysstate[s]));
     706:	f8 01       	movw	r30, r16
     708:	84 89       	ldd	r24, Z+20	; 0x14
     70a:	d8 dd       	rcall	.-1104   	; 0x2bc <sysstate_to_str>
     70c:	9f 93       	push	r25
     70e:	8f 93       	push	r24
     710:	2c ed       	ldi	r18, 0xDC	; 220
     712:	31 e0       	ldi	r19, 0x01	; 1
     714:	3f 93       	push	r19
     716:	2f 93       	push	r18
     718:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("%s",battstate_to_str(sysval.scc_battstate[s]));
     71c:	f8 01       	movw	r30, r16
     71e:	80 8d       	ldd	r24, Z+24	; 0x18
     720:	b6 dd       	rcall	.-1172   	; 0x28e <battstate_to_str>
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	2c ed       	ldi	r18, 0xDC	; 220
     728:	31 e0       	ldi	r19, 0x01	; 1
     72a:	3f 93       	push	r19
     72c:	2f 93       	push	r18
     72e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("%s",solarstate_to_str(sysval.scc_solarstate[s]));
     732:	f8 01       	movw	r30, r16
     734:	84 8d       	ldd	r24, Z+28	; 0x1c
     736:	da dd       	rcall	.-1100   	; 0x2ec <solarstate_to_str>
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	2c ed       	ldi	r18, 0xDC	; 220
     73e:	31 e0       	ldi	r19, 0x01	; 1
     740:	3f 93       	push	r19
     742:	2f 93       	push	r18
     744:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf(" %3d ",sysval.scc_soc[s]);
     748:	f8 01       	movw	r30, r16
     74a:	80 a5       	ldd	r24, Z+40	; 0x28
     74c:	1f 92       	push	r1
     74e:	8f 93       	push	r24
     750:	2f ed       	ldi	r18, 0xDF	; 223
     752:	31 e0       	ldi	r19, 0x01	; 1
     754:	3f 93       	push	r19
     756:	2f 93       	push	r18
     758:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>

			printf(" %4d ",sysval.scc_vpv[s]);
     75c:	f7 01       	movw	r30, r14
     75e:	85 ad       	ldd	r24, Z+61	; 0x3d
     760:	8f 93       	push	r24
     762:	84 ad       	ldd	r24, Z+60	; 0x3c
     764:	8f 93       	push	r24
     766:	5f 92       	push	r5
     768:	4f 92       	push	r4
     76a:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf(" %4d ",sysval.scc_icharge[s]);
     76e:	f5 01       	movw	r30, r10
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	f2 e0       	ldi	r31, 0x02	; 2
     776:	af 0e       	add	r10, r31
     778:	b1 1c       	adc	r11, r1
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	5f 92       	push	r5
     780:	4f 92       	push	r4
     782:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("    %4d ",sysval.scc_vbatt[s]);
     786:	f7 01       	movw	r30, r14
     788:	85 a9       	ldd	r24, Z+53	; 0x35
     78a:	8f 93       	push	r24
     78c:	84 a9       	ldd	r24, Z+52	; 0x34
     78e:	8f 93       	push	r24
     790:	25 ee       	ldi	r18, 0xE5	; 229
     792:	31 e0       	ldi	r19, 0x01	; 1
     794:	3f 93       	push	r19
     796:	2f 93       	push	r18
     798:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf(" %4d ",sysval.scc_iload[s]);
     79c:	f6 01       	movw	r30, r12
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	f2 e0       	ldi	r31, 0x02	; 2
     7a4:	cf 0e       	add	r12, r31
     7a6:	d1 1c       	adc	r13, r1
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	9f 93       	push	r25
     7b4:	8f 93       	push	r24
     7b6:	5f 92       	push	r5
     7b8:	4f 92       	push	r4
     7ba:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("    %2d ",sysval.scc_temp[s]);
     7be:	f8 01       	movw	r30, r16
     7c0:	80 a9       	ldd	r24, Z+48	; 0x30
     7c2:	1f 92       	push	r1
     7c4:	8f 93       	push	r24
     7c6:	2e ee       	ldi	r18, 0xEE	; 238
     7c8:	31 e0       	ldi	r19, 0x01	; 1
     7ca:	3f 93       	push	r19
     7cc:	2f 93       	push	r18
			printf("%s",loadstate_to_str(sysval.scc_loadstate[s]));
     7ce:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
     7d2:	f8 01       	movw	r30, r16
     7d4:	80 a1       	ldd	r24, Z+32	; 0x20
     7d6:	9c dd       	rcall	.-1224   	; 0x310 <loadstate_to_str>
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	2c ed       	ldi	r18, 0xDC	; 220
     7de:	31 e0       	ldi	r19, 0x01	; 1
     7e0:	3f 93       	push	r19
     7e2:	2f 93       	push	r18
     7e4:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
     7e8:	3a 94       	dec	r3
     7ea:	9f ef       	ldi	r25, 0xFF	; 255
     7ec:	69 1a       	sub	r6, r25
     7ee:	79 0a       	sbc	r7, r25
     7f0:	ef ef       	ldi	r30, 0xFF	; 255
     7f2:	8e 1a       	sub	r8, r30
     7f4:	9e 0a       	sbc	r9, r30
     7f6:	f2 e0       	ldi	r31, 0x02	; 2
     7f8:	ef 0e       	add	r14, r31
	uint8_t twi_sla,s;
	
	if(output_buf==NULL) {
		printf_P(PSTR("\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstate"));
		printf_P(PSTR("\r\n--------------+------+-----+---+------+--------+-----+------+----+---------"));
		for(s=0;s<MAX_NOF_SCC;s++) {
     7fa:	f1 1c       	adc	r15, r1
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	31 10       	cpse	r3, r1
			printf("    %4d ",sysval.scc_vbatt[s]);
			printf(" %4d ",sysval.scc_iload[s]);
			printf("    %2d ",sysval.scc_temp[s]);
			printf("%s",loadstate_to_str(sysval.scc_loadstate[s]));
		}
		printf("\r\n");	
     808:	5c cf       	rjmp	.-328    	; 0x6c2 <scc_monitor_dump+0x98>
     80a:	83 e5       	ldi	r24, 0x53	; 83
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
		printf_P(PSTR("\r\nSCC:  days  ydayl   Ah   SoCC "));
     812:	89 eb       	ldi	r24, 0xB9	; 185
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	0e 94 b4 2b 	call	0x5768	; 0x5768 <printf_P>
		printf_P(PSTR("\r\n----------+------+------+----+"));	
     81e:	88 e9       	ldi	r24, 0x98	; 152
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	0e 94 b4 2b 	call	0x5768	; 0x5768 <printf_P>
     82a:	8b e1       	ldi	r24, 0x1B	; 27
     82c:	90 e1       	ldi	r25, 0x10	; 16
     82e:	0f 2e       	mov	r0, r31
     830:	fb ee       	ldi	r31, 0xEB	; 235
     832:	af 2e       	mov	r10, r31
     834:	ff e0       	ldi	r31, 0x0F	; 15
     836:	bf 2e       	mov	r11, r31
     838:	f0 2d       	mov	r31, r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 2e       	mov	r0, r31
     844:	fc e2       	ldi	r31, 0x2C	; 44
     846:	2f 2e       	mov	r2, r31
     848:	31 2c       	mov	r3, r1
		for(s=0;s<MAX_NOF_SCC;s++) {
			twi_sla=I2C_SCC_BASE_ADDR+s;
			printf("\r\n[%2x]:",twi_sla);
     84a:	f0 2d       	mov	r31, r0
     84c:	0f 2e       	mov	r0, r31
     84e:	f3 ed       	ldi	r31, 0xD3	; 211
     850:	cf 2e       	mov	r12, r31
     852:	f1 e0       	ldi	r31, 0x01	; 1
     854:	df 2e       	mov	r13, r31
			printf(" %4d",sysval.scc_days[s]);
     856:	f0 2d       	mov	r31, r0
     858:	0f 2e       	mov	r0, r31
     85a:	f8 ef       	ldi	r31, 0xF8	; 248
     85c:	ef 2e       	mov	r14, r31
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	ff 2e       	mov	r15, r31
			printf("  %4d",sysval.scc_ydayl[s]);
     862:	f0 2d       	mov	r31, r0
     864:	07 ef       	ldi	r16, 0xF7	; 247
			printf("  %5d",sysval.scc_Ah[s]);
     866:	11 e0       	ldi	r17, 0x01	; 1
     868:	0f 2e       	mov	r0, r31
     86a:	fd ef       	ldi	r31, 0xFD	; 253
     86c:	8f 2e       	mov	r8, r31
     86e:	f1 e0       	ldi	r31, 0x01	; 1
     870:	9f 2e       	mov	r9, r31
			printf("  %3d",sysval.scc_socc[s]);		
     872:	f0 2d       	mov	r31, r0
     874:	0f 2e       	mov	r0, r31
     876:	f3 e0       	ldi	r31, 0x03	; 3
     878:	6f 2e       	mov	r6, r31
     87a:	f2 e0       	ldi	r31, 0x02	; 2
     87c:	7f 2e       	mov	r7, r31
     87e:	f0 2d       	mov	r31, r0
     880:	9a 83       	std	Y+2, r25	; 0x02
		printf("\r\n");	
		printf_P(PSTR("\r\nSCC:  days  ydayl   Ah   SoCC "));
		printf_P(PSTR("\r\n----------+------+------+----+"));	
		for(s=0;s<MAX_NOF_SCC;s++) {
			twi_sla=I2C_SCC_BASE_ADDR+s;
			printf("\r\n[%2x]:",twi_sla);
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	3f 92       	push	r3
     886:	2f 92       	push	r2
     888:	df 92       	push	r13
     88a:	cf 92       	push	r12
     88c:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
     890:	49 80       	ldd	r4, Y+1	; 0x01
			printf(" %4d",sysval.scc_days[s]);
     892:	5a 80       	ldd	r5, Y+2	; 0x02
     894:	f2 01       	movw	r30, r4
     896:	81 89       	ldd	r24, Z+17	; 0x11
     898:	8f 93       	push	r24
     89a:	80 89       	ldd	r24, Z+16	; 0x10
     89c:	8f 93       	push	r24
     89e:	ff 92       	push	r15
     8a0:	ef 92       	push	r14
     8a2:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("  %4d",sysval.scc_ydayl[s]);
     8a6:	e9 81       	ldd	r30, Y+1	; 0x01
     8a8:	fa 81       	ldd	r31, Y+2	; 0x02
     8aa:	81 85       	ldd	r24, Z+9	; 0x09
     8ac:	8f 93       	push	r24
     8ae:	80 85       	ldd	r24, Z+8	; 0x08
     8b0:	8f 93       	push	r24
     8b2:	1f 93       	push	r17
     8b4:	0f 93       	push	r16
     8b6:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("  %5d",sysval.scc_Ah[s]);
     8ba:	f2 01       	movw	r30, r4
     8bc:	81 81       	ldd	r24, Z+1	; 0x01
     8be:	29 81       	ldd	r18, Y+1	; 0x01
     8c0:	3a 81       	ldd	r19, Y+2	; 0x02
     8c2:	2e 5f       	subi	r18, 0xFE	; 254
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	3a 83       	std	Y+2, r19	; 0x02
     8c8:	29 83       	std	Y+1, r18	; 0x01
     8ca:	8f 93       	push	r24
     8cc:	80 81       	ld	r24, Z
     8ce:	8f 93       	push	r24
     8d0:	9f 92       	push	r9
     8d2:	8f 92       	push	r8
     8d4:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
			printf("  %3d",sysval.scc_socc[s]);		
     8d8:	f5 01       	movw	r30, r10
     8da:	81 91       	ld	r24, Z+
     8dc:	5f 01       	movw	r10, r30
     8de:	1f 92       	push	r1
     8e0:	8f 93       	push	r24
     8e2:	7f 92       	push	r7
     8e4:	6f 92       	push	r6
     8e6:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
     8ea:	ff ef       	ldi	r31, 0xFF	; 255
     8ec:	2f 1a       	sub	r2, r31
			printf("%s",loadstate_to_str(sysval.scc_loadstate[s]));
		}
		printf("\r\n");	
		printf_P(PSTR("\r\nSCC:  days  ydayl   Ah   SoCC "));
		printf_P(PSTR("\r\n----------+------+------+----+"));	
		for(s=0;s<MAX_NOF_SCC;s++) {
     8ee:	3f 0a       	sbc	r3, r31
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	30 e3       	ldi	r19, 0x30	; 48
     8fc:	23 16       	cp	r2, r19
     8fe:	31 04       	cpc	r3, r1
			printf(" %4d",sysval.scc_days[s]);
			printf("  %4d",sysval.scc_ydayl[s]);
			printf("  %5d",sysval.scc_Ah[s]);
			printf("  %3d",sysval.scc_socc[s]);		
		}
		printf("\r\n");
     900:	09 f6       	brne	.-126    	; 0x884 <scc_monitor_dump+0x25a>
     902:	83 e5       	ldi	r24, 0x53	; 83
     904:	93 e0       	ldi	r25, 0x03	; 3
     906:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
    }
}

uint16_t scc_monitor_dump(char *output_buf, int part)
{
	uint16_t len=0;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
			printf("  %5d",sysval.scc_Ah[s]);
			printf("  %3d",sysval.scc_socc[s]);		
		}
		printf("\r\n");
	} else {
		if(part==0) {
     90e:	2f c2       	rjmp	.+1118   	; 0xd6e <scc_monitor_dump+0x744>
     910:	61 15       	cp	r22, r1
     912:	71 05       	cpc	r23, r1
     914:	09 f0       	breq	.+2      	; 0x918 <scc_monitor_dump+0x2ee>
			len=sprintf(output_buf,       "\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstat\r\n");
     916:	6f c1       	rjmp	.+734    	; 0xbf6 <scc_monitor_dump+0x5cc>
     918:	8f e4       	ldi	r24, 0x4F	; 79
     91a:	e9 e0       	ldi	r30, 0x09	; 9
     91c:	f2 e0       	ldi	r31, 0x02	; 2
     91e:	d5 01       	movw	r26, r10
     920:	01 90       	ld	r0, Z+
     922:	0d 92       	st	X+, r0
     924:	8a 95       	dec	r24
     926:	e1 f7       	brne	.-8      	; 0x920 <scc_monitor_dump+0x2f6>
     928:	8f eb       	ldi	r24, 0xBF	; 191
     92a:	9f e0       	ldi	r25, 0x0F	; 15
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	0f 2e       	mov	r0, r31
     932:	f3 e0       	ldi	r31, 0x03	; 3
     934:	6f 2e       	mov	r6, r31
     936:	f0 e1       	ldi	r31, 0x10	; 16
     938:	7f 2e       	mov	r7, r31
     93a:	f0 2d       	mov	r31, r0
     93c:	0f 2e       	mov	r0, r31
     93e:	fb e0       	ldi	r31, 0x0B	; 11
     940:	cf 2e       	mov	r12, r31
     942:	f0 e1       	ldi	r31, 0x10	; 16
     944:	df 2e       	mov	r13, r31
     946:	f0 2d       	mov	r31, r0
     948:	7c 01       	movw	r14, r24
     94a:	0f 2e       	mov	r0, r31
     94c:	fc e2       	ldi	r31, 0x2C	; 44
     94e:	4f 2e       	mov	r4, r31
     950:	51 2c       	mov	r5, r1
     952:	f0 2d       	mov	r31, r0
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	9b 83       	std	Y+3, r25	; 0x03
     958:	ee e4       	ldi	r30, 0x4E	; 78
			for(s=0;s<MAX_NOF_SCC;s++) {
				twi_sla=I2C_SCC_BASE_ADDR+s;
				len+=sprintf(&output_buf[len],"[%2x]:",twi_sla);
				len+=sprintf(&output_buf[len],"%s",sysstate_status_to_str(sysval.scc_sysstate[s]));
				len+=sprintf(&output_buf[len],"%s",sysstate_to_str(sysval.scc_sysstate[s]));
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	0f 2e       	mov	r0, r31
     95e:	fc ed       	ldi	r31, 0xDC	; 220
     960:	2f 2e       	mov	r2, r31
     962:	f1 e0       	ldi	r31, 0x01	; 1
     964:	3f 2e       	mov	r3, r31
				len+=sprintf(&output_buf[len],"%s",battstate_to_str(sysval.scc_battstate[s]));
				len+=sprintf(&output_buf[len],"%s",solarstate_to_str(sysval.scc_solarstate[s]));
				len+=sprintf(&output_buf[len]," %3d ",sysval.scc_soc[s]);

				len+=sprintf(&output_buf[len]," %4d ",sysval.scc_vpv[s]);
     966:	f0 2d       	mov	r31, r0
     968:	0f 2e       	mov	r0, r31
     96a:	f8 ee       	ldi	r31, 0xE8	; 232
     96c:	8f 2e       	mov	r8, r31
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	9f 2e       	mov	r9, r31
				len+=sprintf(&output_buf[len]," %4d ",sysval.scc_icharge[s]);
				len+=sprintf(&output_buf[len],"    %4d ",sysval.scc_vbatt[s]);
				len+=sprintf(&output_buf[len]," %4d ",sysval.scc_iload[s]);
				len+=sprintf(&output_buf[len],"    %2d ",sysval.scc_temp[s]);
				len+=sprintf(&output_buf[len],"%s\r\n",loadstate_to_str(sysval.scc_loadstate[s]));
     972:	f0 2d       	mov	r31, r0
     974:	fd 83       	std	Y+5, r31	; 0x05
	} else {
		if(part==0) {
			len=sprintf(output_buf,       "\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstat\r\n");
			for(s=0;s<MAX_NOF_SCC;s++) {
				twi_sla=I2C_SCC_BASE_ADDR+s;
				len+=sprintf(&output_buf[len],"[%2x]:",twi_sla);
     976:	ec 83       	std	Y+4, r30	; 0x04
     978:	5f 92       	push	r5
     97a:	4f 92       	push	r4
     97c:	25 ed       	ldi	r18, 0xD5	; 213
     97e:	31 e0       	ldi	r19, 0x01	; 1
     980:	3f 93       	push	r19
     982:	2f 93       	push	r18
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	9d 81       	ldd	r25, Y+5	; 0x05
     988:	8a 0d       	add	r24, r10
     98a:	9b 1d       	adc	r25, r11
     98c:	9f 93       	push	r25
     98e:	8f 93       	push	r24
     990:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     994:	ec 81       	ldd	r30, Y+4	; 0x04
     996:	fd 81       	ldd	r31, Y+5	; 0x05
     998:	e8 0f       	add	r30, r24
     99a:	f9 1f       	adc	r31, r25
     99c:	fd 83       	std	Y+5, r31	; 0x05
     99e:	ec 83       	std	Y+4, r30	; 0x04
     9a0:	09 81       	ldd	r16, Y+1	; 0x01
        return(" ??????");
    }
}
char * sysstate_status_to_str(unsigned char sysstate)
{
	if(sysstate&0x80) return("OK "); else return("XX ");
     9a2:	1a 81       	ldd	r17, Y+2	; 0x02
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	f8 01       	movw	r30, r16
     9b2:	84 89       	ldd	r24, Z+20	; 0x14
     9b4:	88 23       	and	r24, r24
     9b6:	1c f0       	brlt	.+6      	; 0x9be <scc_monitor_dump+0x394>
     9b8:	a0 e4       	ldi	r26, 0x40	; 64
     9ba:	b1 e0       	ldi	r27, 0x01	; 1
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <scc_monitor_dump+0x398>
     9be:	ac e3       	ldi	r26, 0x3C	; 60
		if(part==0) {
			len=sprintf(output_buf,       "\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstat\r\n");
			for(s=0;s<MAX_NOF_SCC;s++) {
				twi_sla=I2C_SCC_BASE_ADDR+s;
				len+=sprintf(&output_buf[len],"[%2x]:",twi_sla);
				len+=sprintf(&output_buf[len],"%s",sysstate_status_to_str(sysval.scc_sysstate[s]));
     9c0:	b1 e0       	ldi	r27, 0x01	; 1
     9c2:	ec 81       	ldd	r30, Y+4	; 0x04
     9c4:	fd 81       	ldd	r31, Y+5	; 0x05
     9c6:	ea 0d       	add	r30, r10
     9c8:	fb 1d       	adc	r31, r11
     9ca:	8d 91       	ld	r24, X+
     9cc:	9c 91       	ld	r25, X
     9ce:	11 97       	sbiw	r26, 0x01	; 1
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	8d 91       	ld	r24, X+
     9d8:	9c 91       	ld	r25, X
     9da:	13 97       	sbiw	r26, 0x03	; 3
     9dc:	93 83       	std	Z+3, r25	; 0x03
     9de:	82 83       	std	Z+2, r24	; 0x02
     9e0:	2c 81       	ldd	r18, Y+4	; 0x04
     9e2:	3d 81       	ldd	r19, Y+5	; 0x05
     9e4:	2d 5f       	subi	r18, 0xFD	; 253
     9e6:	3f 4f       	sbci	r19, 0xFF	; 255
				len+=sprintf(&output_buf[len],"%s",sysstate_to_str(sysval.scc_sysstate[s]));
     9e8:	3d 83       	std	Y+5, r19	; 0x05
     9ea:	2c 83       	std	Y+4, r18	; 0x04
     9ec:	f8 01       	movw	r30, r16
     9ee:	84 89       	ldd	r24, Z+20	; 0x14
     9f0:	65 dc       	rcall	.-1846   	; 0x2bc <sysstate_to_str>
     9f2:	9f 93       	push	r25
     9f4:	8f 93       	push	r24
     9f6:	3f 92       	push	r3
     9f8:	2f 92       	push	r2
     9fa:	8c 81       	ldd	r24, Y+4	; 0x04
     9fc:	9d 81       	ldd	r25, Y+5	; 0x05
     9fe:	8a 0d       	add	r24, r10
     a00:	9b 1d       	adc	r25, r11
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
     a06:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     a0a:	2c 81       	ldd	r18, Y+4	; 0x04
     a0c:	3d 81       	ldd	r19, Y+5	; 0x05
     a0e:	28 0f       	add	r18, r24
     a10:	39 1f       	adc	r19, r25
				len+=sprintf(&output_buf[len],"%s",battstate_to_str(sysval.scc_battstate[s]));
     a12:	3d 83       	std	Y+5, r19	; 0x05
     a14:	2c 83       	std	Y+4, r18	; 0x04
     a16:	f8 01       	movw	r30, r16
     a18:	80 8d       	ldd	r24, Z+24	; 0x18
     a1a:	39 dc       	rcall	.-1934   	; 0x28e <battstate_to_str>
     a1c:	9f 93       	push	r25
     a1e:	8f 93       	push	r24
     a20:	3f 92       	push	r3
     a22:	2f 92       	push	r2
     a24:	8c 81       	ldd	r24, Y+4	; 0x04
     a26:	9d 81       	ldd	r25, Y+5	; 0x05
     a28:	8a 0d       	add	r24, r10
     a2a:	9b 1d       	adc	r25, r11
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     a34:	2c 81       	ldd	r18, Y+4	; 0x04
     a36:	3d 81       	ldd	r19, Y+5	; 0x05
     a38:	28 0f       	add	r18, r24
     a3a:	39 1f       	adc	r19, r25
				len+=sprintf(&output_buf[len],"%s",solarstate_to_str(sysval.scc_solarstate[s]));
     a3c:	3d 83       	std	Y+5, r19	; 0x05
     a3e:	2c 83       	std	Y+4, r18	; 0x04
     a40:	f8 01       	movw	r30, r16
     a42:	84 8d       	ldd	r24, Z+28	; 0x1c
     a44:	53 dc       	rcall	.-1882   	; 0x2ec <solarstate_to_str>
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	3f 92       	push	r3
     a4c:	2f 92       	push	r2
     a4e:	8c 81       	ldd	r24, Y+4	; 0x04
     a50:	9d 81       	ldd	r25, Y+5	; 0x05
     a52:	8a 0d       	add	r24, r10
     a54:	9b 1d       	adc	r25, r11
     a56:	9f 93       	push	r25
     a58:	8f 93       	push	r24
     a5a:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     a5e:	2c 81       	ldd	r18, Y+4	; 0x04
     a60:	3d 81       	ldd	r19, Y+5	; 0x05
     a62:	28 0f       	add	r18, r24
     a64:	39 1f       	adc	r19, r25
     a66:	3d 83       	std	Y+5, r19	; 0x05
				len+=sprintf(&output_buf[len]," %3d ",sysval.scc_soc[s]);
     a68:	2c 83       	std	Y+4, r18	; 0x04
     a6a:	f8 01       	movw	r30, r16
     a6c:	80 a5       	ldd	r24, Z+40	; 0x28
     a6e:	1f 92       	push	r1
     a70:	8f 93       	push	r24
     a72:	2f ed       	ldi	r18, 0xDF	; 223
     a74:	31 e0       	ldi	r19, 0x01	; 1
     a76:	3f 93       	push	r19
     a78:	2f 93       	push	r18
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	9d 81       	ldd	r25, Y+5	; 0x05
     a7e:	8a 0d       	add	r24, r10
     a80:	9b 1d       	adc	r25, r11
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     a8a:	ec 81       	ldd	r30, Y+4	; 0x04
     a8c:	fd 81       	ldd	r31, Y+5	; 0x05
     a8e:	e8 0f       	add	r30, r24
     a90:	f9 1f       	adc	r31, r25
     a92:	fd 83       	std	Y+5, r31	; 0x05

				len+=sprintf(&output_buf[len]," %4d ",sysval.scc_vpv[s]);
     a94:	ec 83       	std	Y+4, r30	; 0x04
     a96:	f7 01       	movw	r30, r14
     a98:	85 ad       	ldd	r24, Z+61	; 0x3d
     a9a:	8f 93       	push	r24
     a9c:	84 ad       	ldd	r24, Z+60	; 0x3c
     a9e:	8f 93       	push	r24
     aa0:	9f 92       	push	r9
     aa2:	8f 92       	push	r8
     aa4:	8c 81       	ldd	r24, Y+4	; 0x04
     aa6:	9d 81       	ldd	r25, Y+5	; 0x05
     aa8:	8a 0d       	add	r24, r10
     aaa:	9b 1d       	adc	r25, r11
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     ab4:	2c 81       	ldd	r18, Y+4	; 0x04
     ab6:	3d 81       	ldd	r19, Y+5	; 0x05
     ab8:	28 0f       	add	r18, r24
     aba:	39 1f       	adc	r19, r25
     abc:	3d 83       	std	Y+5, r19	; 0x05
				len+=sprintf(&output_buf[len]," %4d ",sysval.scc_icharge[s]);
     abe:	2c 83       	std	Y+4, r18	; 0x04
     ac0:	f3 01       	movw	r30, r6
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	f2 e0       	ldi	r31, 0x02	; 2
     ac8:	6f 0e       	add	r6, r31
     aca:	71 1c       	adc	r7, r1
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	9f 92       	push	r9
     ad2:	8f 92       	push	r8
     ad4:	c9 01       	movw	r24, r18
     ad6:	8a 0d       	add	r24, r10
     ad8:	9b 1d       	adc	r25, r11
     ada:	9f 93       	push	r25
     adc:	8f 93       	push	r24
     ade:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     ae2:	2c 81       	ldd	r18, Y+4	; 0x04
     ae4:	3d 81       	ldd	r19, Y+5	; 0x05
     ae6:	28 0f       	add	r18, r24
     ae8:	39 1f       	adc	r19, r25
     aea:	3d 83       	std	Y+5, r19	; 0x05
				len+=sprintf(&output_buf[len],"    %4d ",sysval.scc_vbatt[s]);
     aec:	2c 83       	std	Y+4, r18	; 0x04
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	f7 01       	movw	r30, r14
     afa:	85 a9       	ldd	r24, Z+53	; 0x35
     afc:	8f 93       	push	r24
     afe:	84 a9       	ldd	r24, Z+52	; 0x34
     b00:	8f 93       	push	r24
     b02:	25 ee       	ldi	r18, 0xE5	; 229
     b04:	31 e0       	ldi	r19, 0x01	; 1
     b06:	3f 93       	push	r19
     b08:	2f 93       	push	r18
     b0a:	8c 81       	ldd	r24, Y+4	; 0x04
     b0c:	9d 81       	ldd	r25, Y+5	; 0x05
     b0e:	8a 0d       	add	r24, r10
     b10:	9b 1d       	adc	r25, r11
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     b1a:	ec 81       	ldd	r30, Y+4	; 0x04
     b1c:	fd 81       	ldd	r31, Y+5	; 0x05
     b1e:	e8 0f       	add	r30, r24
     b20:	f9 1f       	adc	r31, r25
     b22:	fd 83       	std	Y+5, r31	; 0x05
				len+=sprintf(&output_buf[len]," %4d ",sysval.scc_iload[s]);
     b24:	ec 83       	std	Y+4, r30	; 0x04
     b26:	f6 01       	movw	r30, r12
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	f2 e0       	ldi	r31, 0x02	; 2
     b2e:	cf 0e       	add	r12, r31
     b30:	d1 1c       	adc	r13, r1
     b32:	9f 93       	push	r25
     b34:	8f 93       	push	r24
     b36:	9f 92       	push	r9
     b38:	8f 92       	push	r8
     b3a:	8c 81       	ldd	r24, Y+4	; 0x04
     b3c:	9d 81       	ldd	r25, Y+5	; 0x05
     b3e:	8a 0d       	add	r24, r10
     b40:	9b 1d       	adc	r25, r11
     b42:	9f 93       	push	r25
     b44:	8f 93       	push	r24
     b46:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     b4a:	2c 81       	ldd	r18, Y+4	; 0x04
     b4c:	3d 81       	ldd	r19, Y+5	; 0x05
     b4e:	28 0f       	add	r18, r24
     b50:	39 1f       	adc	r19, r25
     b52:	3d 83       	std	Y+5, r19	; 0x05
				len+=sprintf(&output_buf[len],"    %2d ",sysval.scc_temp[s]);
     b54:	2c 83       	std	Y+4, r18	; 0x04
     b56:	f8 01       	movw	r30, r16
     b58:	80 a9       	ldd	r24, Z+48	; 0x30
     b5a:	1f 92       	push	r1
     b5c:	8f 93       	push	r24
     b5e:	2e ee       	ldi	r18, 0xEE	; 238
     b60:	31 e0       	ldi	r19, 0x01	; 1
     b62:	3f 93       	push	r19
     b64:	2f 93       	push	r18
     b66:	8c 81       	ldd	r24, Y+4	; 0x04
     b68:	9d 81       	ldd	r25, Y+5	; 0x05
     b6a:	8a 0d       	add	r24, r10
     b6c:	9b 1d       	adc	r25, r11
     b6e:	9f 93       	push	r25
     b70:	8f 93       	push	r24
     b72:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     b76:	ec 81       	ldd	r30, Y+4	; 0x04
     b78:	fd 81       	ldd	r31, Y+5	; 0x05
     b7a:	e8 0f       	add	r30, r24
     b7c:	f9 1f       	adc	r31, r25
				len+=sprintf(&output_buf[len],"%s\r\n",loadstate_to_str(sysval.scc_loadstate[s]));
     b7e:	fd 83       	std	Y+5, r31	; 0x05
     b80:	ec 83       	std	Y+4, r30	; 0x04
     b82:	f8 01       	movw	r30, r16
     b84:	80 a1       	ldd	r24, Z+32	; 0x20
     b86:	c4 db       	rcall	.-2168   	; 0x310 <loadstate_to_str>
     b88:	9f 93       	push	r25
     b8a:	8f 93       	push	r24
     b8c:	28 e5       	ldi	r18, 0x58	; 88
     b8e:	32 e0       	ldi	r19, 0x02	; 2
     b90:	3f 93       	push	r19
     b92:	2f 93       	push	r18
     b94:	8c 81       	ldd	r24, Y+4	; 0x04
     b96:	9d 81       	ldd	r25, Y+5	; 0x05
     b98:	8a 0d       	add	r24, r10
     b9a:	9b 1d       	adc	r25, r11
     b9c:	9f 93       	push	r25
     b9e:	8f 93       	push	r24
     ba0:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     ba4:	ec 81       	ldd	r30, Y+4	; 0x04
     ba6:	fd 81       	ldd	r31, Y+5	; 0x05
     ba8:	e8 0f       	add	r30, r24
     baa:	f9 1f       	adc	r31, r25
     bac:	fd 83       	std	Y+5, r31	; 0x05
     bae:	ec 83       	std	Y+4, r30	; 0x04
     bb0:	fb 81       	ldd	r31, Y+3	; 0x03
     bb2:	f1 50       	subi	r31, 0x01	; 1
     bb4:	fb 83       	std	Y+3, r31	; 0x03
     bb6:	2f ef       	ldi	r18, 0xFF	; 255
     bb8:	42 1a       	sub	r4, r18
     bba:	52 0a       	sbc	r5, r18
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	e9 0e       	add	r14, r25
		}
		printf("\r\n");
	} else {
		if(part==0) {
			len=sprintf(output_buf,       "\r\nSCC:    system battst solst SoC   Vpv  Icharge  Vbatt  Iload temp loadstat\r\n");
			for(s=0;s<MAX_NOF_SCC;s++) {
     bca:	f1 1c       	adc	r15, r1
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	fb 81       	ldd	r31, Y+3	; 0x03
     bd8:	f1 11       	cpse	r31, r1
     bda:	ce ce       	rjmp	.-612    	; 0x978 <scc_monitor_dump+0x34e>
     bdc:	2c 81       	ldd	r18, Y+4	; 0x04
				len+=sprintf(&output_buf[len],"    %4d ",sysval.scc_vbatt[s]);
				len+=sprintf(&output_buf[len]," %4d ",sysval.scc_iload[s]);
				len+=sprintf(&output_buf[len],"    %2d ",sysval.scc_temp[s]);
				len+=sprintf(&output_buf[len],"%s\r\n",loadstate_to_str(sysval.scc_loadstate[s]));
			}
			len+=sprintf(&output_buf[len],"\r\n");
     bde:	3d 81       	ldd	r19, Y+5	; 0x05
     be0:	f9 01       	movw	r30, r18
     be2:	ea 0d       	add	r30, r10
     be4:	fb 1d       	adc	r31, r11
     be6:	8d e0       	ldi	r24, 0x0D	; 13
     be8:	9a e0       	ldi	r25, 0x0A	; 10
     bea:	91 83       	std	Z+1, r25	; 0x01
     bec:	80 83       	st	Z, r24
     bee:	12 82       	std	Z+2, r1	; 0x02
     bf0:	c9 01       	movw	r24, r18
     bf2:	02 96       	adiw	r24, 0x02	; 2
		} else if(part==1) {
     bf4:	bc c0       	rjmp	.+376    	; 0xd6e <scc_monitor_dump+0x744>
     bf6:	61 30       	cpi	r22, 0x01	; 1
     bf8:	71 05       	cpc	r23, r1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <scc_monitor_dump+0x5d4>
			len=sprintf(output_buf,       "\r\nSCC:  days  ydayl   Ah   SoCC\r\n");
     bfc:	b6 c0       	rjmp	.+364    	; 0xd6a <scc_monitor_dump+0x740>
     bfe:	82 e2       	ldi	r24, 0x22	; 34
     c00:	ed e5       	ldi	r30, 0x5D	; 93
     c02:	f2 e0       	ldi	r31, 0x02	; 2
     c04:	d5 01       	movw	r26, r10
     c06:	01 90       	ld	r0, Z+
     c08:	0d 92       	st	X+, r0
     c0a:	8a 95       	dec	r24
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <scc_monitor_dump+0x5dc>
     c0e:	0b e1       	ldi	r16, 0x1B	; 27
     c10:	10 e1       	ldi	r17, 0x10	; 16
     c12:	8b ee       	ldi	r24, 0xEB	; 235
     c14:	9f e0       	ldi	r25, 0x0F	; 15
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	0f 2e       	mov	r0, r31
     c1c:	fc e2       	ldi	r31, 0x2C	; 44
     c1e:	8f 2e       	mov	r8, r31
     c20:	91 2c       	mov	r9, r1
     c22:	f0 2d       	mov	r31, r0
     c24:	e1 e2       	ldi	r30, 0x21	; 33
			for(s=0;s<MAX_NOF_SCC;s++) {
				twi_sla=I2C_SCC_BASE_ADDR+s;
				len+=sprintf(&output_buf[len],"[%2x]:",twi_sla);
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	0f 2e       	mov	r0, r31
     c2a:	f5 ed       	ldi	r31, 0xD5	; 213
     c2c:	cf 2e       	mov	r12, r31
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
     c30:	df 2e       	mov	r13, r31
				len+=sprintf(&output_buf[len]," %4d",sysval.scc_days[s]);
     c32:	f0 2d       	mov	r31, r0
     c34:	0f 2e       	mov	r0, r31
     c36:	f8 ef       	ldi	r31, 0xF8	; 248
     c38:	ef 2e       	mov	r14, r31
     c3a:	f1 e0       	ldi	r31, 0x01	; 1
     c3c:	ff 2e       	mov	r15, r31
				len+=sprintf(&output_buf[len],"  %4d",sysval.scc_ydayl[s]);
     c3e:	f0 2d       	mov	r31, r0
     c40:	0f 2e       	mov	r0, r31
     c42:	f7 ef       	ldi	r31, 0xF7	; 247
     c44:	6f 2e       	mov	r6, r31
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	7f 2e       	mov	r7, r31
				len+=sprintf(&output_buf[len],"  %5d",sysval.scc_Ah[s]);
     c4a:	f0 2d       	mov	r31, r0
     c4c:	0f 2e       	mov	r0, r31
     c4e:	fd ef       	ldi	r31, 0xFD	; 253
     c50:	4f 2e       	mov	r4, r31
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	5f 2e       	mov	r5, r31
				len+=sprintf(&output_buf[len],"  %3d\r\n",sysval.scc_socc[s]);				
     c56:	f0 2d       	mov	r31, r0
     c58:	0f 2e       	mov	r0, r31
     c5a:	ff e7       	ldi	r31, 0x7F	; 127
     c5c:	2f 2e       	mov	r2, r31
     c5e:	f2 e0       	ldi	r31, 0x02	; 2
     c60:	3f 2e       	mov	r3, r31
     c62:	f0 2d       	mov	r31, r0
     c64:	fd 83       	std	Y+5, r31	; 0x05
			len+=sprintf(&output_buf[len],"\r\n");
		} else if(part==1) {
			len=sprintf(output_buf,       "\r\nSCC:  days  ydayl   Ah   SoCC\r\n");
			for(s=0;s<MAX_NOF_SCC;s++) {
				twi_sla=I2C_SCC_BASE_ADDR+s;
				len+=sprintf(&output_buf[len],"[%2x]:",twi_sla);
     c66:	ec 83       	std	Y+4, r30	; 0x04
     c68:	9f 92       	push	r9
     c6a:	8f 92       	push	r8
     c6c:	df 92       	push	r13
     c6e:	cf 92       	push	r12
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	8a 0d       	add	r24, r10
     c76:	9b 1d       	adc	r25, r11
     c78:	9f 93       	push	r25
     c7a:	8f 93       	push	r24
     c7c:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     c80:	2c 81       	ldd	r18, Y+4	; 0x04
     c82:	3d 81       	ldd	r19, Y+5	; 0x05
     c84:	28 0f       	add	r18, r24
     c86:	39 1f       	adc	r19, r25
     c88:	3d 83       	std	Y+5, r19	; 0x05
				len+=sprintf(&output_buf[len]," %4d",sysval.scc_days[s]);
     c8a:	2c 83       	std	Y+4, r18	; 0x04
     c8c:	f8 01       	movw	r30, r16
     c8e:	81 89       	ldd	r24, Z+17	; 0x11
     c90:	8f 93       	push	r24
     c92:	80 89       	ldd	r24, Z+16	; 0x10
     c94:	8f 93       	push	r24
     c96:	ff 92       	push	r15
     c98:	ef 92       	push	r14
     c9a:	c9 01       	movw	r24, r18
     c9c:	8a 0d       	add	r24, r10
     c9e:	9b 1d       	adc	r25, r11
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     ca8:	2c 81       	ldd	r18, Y+4	; 0x04
     caa:	3d 81       	ldd	r19, Y+5	; 0x05
     cac:	28 0f       	add	r18, r24
     cae:	39 1f       	adc	r19, r25
     cb0:	3d 83       	std	Y+5, r19	; 0x05
				len+=sprintf(&output_buf[len],"  %4d",sysval.scc_ydayl[s]);
     cb2:	2c 83       	std	Y+4, r18	; 0x04
     cb4:	f8 01       	movw	r30, r16
     cb6:	81 85       	ldd	r24, Z+9	; 0x09
     cb8:	8f 93       	push	r24
     cba:	80 85       	ldd	r24, Z+8	; 0x08
     cbc:	8f 93       	push	r24
     cbe:	7f 92       	push	r7
     cc0:	6f 92       	push	r6
     cc2:	c9 01       	movw	r24, r18
     cc4:	8a 0d       	add	r24, r10
     cc6:	9b 1d       	adc	r25, r11
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     cd0:	2c 81       	ldd	r18, Y+4	; 0x04
     cd2:	3d 81       	ldd	r19, Y+5	; 0x05
     cd4:	28 0f       	add	r18, r24
     cd6:	39 1f       	adc	r19, r25
     cd8:	3d 83       	std	Y+5, r19	; 0x05
				len+=sprintf(&output_buf[len],"  %5d",sysval.scc_Ah[s]);
     cda:	2c 83       	std	Y+4, r18	; 0x04
     cdc:	f8 01       	movw	r30, r16
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	0e 5f       	subi	r16, 0xFE	; 254
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	8f 93       	push	r24
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 93       	push	r24
     cea:	5f 92       	push	r5
     cec:	4f 92       	push	r4
     cee:	c9 01       	movw	r24, r18
     cf0:	8a 0d       	add	r24, r10
     cf2:	9b 1d       	adc	r25, r11
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     cfc:	ec 81       	ldd	r30, Y+4	; 0x04
     cfe:	fd 81       	ldd	r31, Y+5	; 0x05
     d00:	e8 0f       	add	r30, r24
     d02:	f9 1f       	adc	r31, r25
     d04:	fd 83       	std	Y+5, r31	; 0x05
				len+=sprintf(&output_buf[len],"  %3d\r\n",sysval.scc_socc[s]);				
     d06:	ec 83       	std	Y+4, r30	; 0x04
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	81 91       	ld	r24, Z+
     d0e:	fa 83       	std	Y+2, r31	; 0x02
     d10:	e9 83       	std	Y+1, r30	; 0x01
     d12:	1f 92       	push	r1
     d14:	8f 93       	push	r24
     d16:	3f 92       	push	r3
     d18:	2f 92       	push	r2
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	8a 0d       	add	r24, r10
     d20:	9b 1d       	adc	r25, r11
     d22:	9f 93       	push	r25
     d24:	8f 93       	push	r24
     d26:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
     d2a:	2c 81       	ldd	r18, Y+4	; 0x04
     d2c:	3d 81       	ldd	r19, Y+5	; 0x05
     d2e:	28 0f       	add	r18, r24
     d30:	39 1f       	adc	r19, r25
     d32:	3d 83       	std	Y+5, r19	; 0x05
     d34:	2c 83       	std	Y+4, r18	; 0x04
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	83 1a       	sub	r8, r19
				len+=sprintf(&output_buf[len],"%s\r\n",loadstate_to_str(sysval.scc_loadstate[s]));
			}
			len+=sprintf(&output_buf[len],"\r\n");
		} else if(part==1) {
			len=sprintf(output_buf,       "\r\nSCC:  days  ydayl   Ah   SoCC\r\n");
			for(s=0;s<MAX_NOF_SCC;s++) {
     d3a:	93 0a       	sbc	r9, r19
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	90 e3       	ldi	r25, 0x30	; 48
     d48:	89 16       	cp	r8, r25
     d4a:	91 04       	cpc	r9, r1
     d4c:	09 f0       	breq	.+2      	; 0xd50 <scc_monitor_dump+0x726>
     d4e:	8c cf       	rjmp	.-232    	; 0xc68 <scc_monitor_dump+0x63e>
     d50:	ec 81       	ldd	r30, Y+4	; 0x04
				len+=sprintf(&output_buf[len]," %4d",sysval.scc_days[s]);
				len+=sprintf(&output_buf[len],"  %4d",sysval.scc_ydayl[s]);
				len+=sprintf(&output_buf[len],"  %5d",sysval.scc_Ah[s]);
				len+=sprintf(&output_buf[len],"  %3d\r\n",sysval.scc_socc[s]);				
			}
			len+=sprintf(&output_buf[len],"\r\n");
     d52:	fd 81       	ldd	r31, Y+5	; 0x05
     d54:	ea 0d       	add	r30, r10
     d56:	fb 1d       	adc	r31, r11
     d58:	8d e0       	ldi	r24, 0x0D	; 13
     d5a:	9a e0       	ldi	r25, 0x0A	; 10
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
     d60:	12 82       	std	Z+2, r1	; 0x02
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	02 96       	adiw	r24, 0x02	; 2
    }
}

uint16_t scc_monitor_dump(char *output_buf, int part)
{
	uint16_t len=0;
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <scc_monitor_dump+0x744>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
			}
			len+=sprintf(&output_buf[len],"\r\n");
		}
	}
	return len;
}
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	9f 90       	pop	r9
     d8e:	8f 90       	pop	r8
     d90:	7f 90       	pop	r7
     d92:	6f 90       	pop	r6
     d94:	5f 90       	pop	r5
     d96:	4f 90       	pop	r4
     d98:	3f 90       	pop	r3
     d9a:	2f 90       	pop	r2
     d9c:	08 95       	ret

00000d9e <scc_send_cmd>:

void scc_send_cmd(uint8_t cmd, uint8_t val, uint8_t write_val)
{
     d9e:	5f 92       	push	r5
     da0:	6f 92       	push	r6
     da2:	7f 92       	push	r7
     da4:	8f 92       	push	r8
     da6:	9f 92       	push	r9
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	60 97       	sbiw	r28, 0x10	; 16
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	78 2e       	mov	r7, r24
     dce:	56 2e       	mov	r5, r22
     dd0:	64 2e       	mov	r6, r20
     dd2:	0f eb       	ldi	r16, 0xBF	; 191
     dd4:	1f e0       	ldi	r17, 0x0F	; 15
     dd6:	0f 2e       	mov	r0, r31
     dd8:	fc e2       	ldi	r31, 0x2C	; 44
     dda:	9f 2e       	mov	r9, r31
     ddc:	f0 2d       	mov	r31, r0

    // send command to all SCC boards
    for(s=0;s<MAX_NOF_SCC;s++) {
        twi_sla=I2C_SCC_BASE_ADDR+s;
        delay_ms(50);
        memset(twi_data,0,16);
     dde:	68 94       	set
     de0:	88 24       	eor	r8, r8
     de2:	84 f8       	bld	r8, 4
     de4:	ce 01       	movw	r24, r28
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	6c 01       	movw	r12, r24
     dea:	5e 01       	movw	r10, r28
     dec:	91 e1       	ldi	r25, 0x11	; 17
     dee:	a9 0e       	add	r10, r25
     df0:	b1 1c       	adc	r11, r1
    twi_cmd=cmd;

    // send command to all SCC boards
    for(s=0;s<MAX_NOF_SCC;s++) {
        twi_sla=I2C_SCC_BASE_ADDR+s;
        delay_ms(50);
     df2:	68 ed       	ldi	r22, 0xD8	; 216
     df4:	7f ee       	ldi	r23, 0xEF	; 239
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	2b da       	rcall	.-2986   	; 0x252 <delayloop32>
        memset(twi_data,0,16);
     dfc:	f6 01       	movw	r30, r12
     dfe:	88 2d       	mov	r24, r8
     e00:	11 92       	st	Z+, r1
     e02:	8a 95       	dec	r24
     e04:	e9 f7       	brne	.-6      	; 0xe00 <scc_send_cmd+0x62>
     e06:	78 01       	movw	r14, r16
        sysval.scc_sysstate[s] &= 0x0f; // reset bit 7..4
     e08:	f8 01       	movw	r30, r16
     e0a:	84 89       	ldd	r24, Z+20	; 0x14
     e0c:	8f 70       	andi	r24, 0x0F	; 15
     e0e:	84 8b       	std	Z+20, r24	; 0x14
        if(twi_write_one(twi_sla,twi_cmd) >= 0) {
     e10:	67 2d       	mov	r22, r7
     e12:	89 2d       	mov	r24, r9
     e14:	0e 94 20 29 	call	0x5240	; 0x5240 <twi_write_one>
     e18:	99 23       	and	r25, r25
     e1a:	74 f1       	brlt	.+92     	; 0xe78 <scc_send_cmd+0xda>
			if(write_val) { twi_write_one(twi_sla,val); }
     e1c:	66 20       	and	r6, r6
     e1e:	21 f0       	breq	.+8      	; 0xe28 <scc_send_cmd+0x8a>
     e20:	65 2d       	mov	r22, r5
     e22:	89 2d       	mov	r24, r9
     e24:	0e 94 20 29 	call	0x5240	; 0x5240 <twi_write_one>
            delay_ms(5);
     e28:	6c ef       	ldi	r22, 0xFC	; 252
     e2a:	77 e1       	ldi	r23, 0x17	; 23
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	10 da       	rcall	.-3040   	; 0x252 <delayloop32>
            if(twi_read_small(16,twi_data,twi_sla) >= 0) {
     e32:	49 2d       	mov	r20, r9
     e34:	b6 01       	movw	r22, r12
     e36:	80 e1       	ldi	r24, 0x10	; 16
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 93 29 	call	0x5326	; 0x5326 <twi_read_small>
     e3e:	99 23       	and	r25, r25
     e40:	b4 f0       	brlt	.+44     	; 0xe6e <scc_send_cmd+0xd0>
                int i;
                checksum=twi_data[15];
     e42:	28 89       	ldd	r18, Y+16	; 0x10
                twi_data[15]=0;
     e44:	18 8a       	std	Y+16, r1	; 0x10
     e46:	fe 01       	movw	r30, r28
     e48:	31 96       	adiw	r30, 0x01	; 1
                checksum_chk=0;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
                for(i=0;i<16;i++) {
                    checksum_chk+=twi_data[i];
     e4c:	91 91       	ld	r25, Z+
     e4e:	89 0f       	add	r24, r25
            if(twi_read_small(16,twi_data,twi_sla) >= 0) {
                int i;
                checksum=twi_data[15];
                twi_data[15]=0;
                checksum_chk=0;
                for(i=0;i<16;i++) {
     e50:	ea 15       	cp	r30, r10
     e52:	fb 05       	cpc	r31, r11
     e54:	d9 f7       	brne	.-10     	; 0xe4c <scc_send_cmd+0xae>
                    checksum_chk+=twi_data[i];
                }
                if(checksum_chk==checksum) {
     e56:	28 13       	cpse	r18, r24
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <scc_send_cmd+0xc6>
                    sysval.scc_sysstate[s] |= 0x80; //communication was OK
     e5a:	f7 01       	movw	r30, r14
     e5c:	84 89       	ldd	r24, Z+20	; 0x14
     e5e:	80 68       	ori	r24, 0x80	; 128
     e60:	84 8b       	std	Z+20, r24	; 0x14
     e62:	0e c0       	rjmp	.+28     	; 0xe80 <scc_send_cmd+0xe2>
                } else sysval.scc_sysstate[s] |= 0x40; //communication was ERROR
     e64:	f7 01       	movw	r30, r14
     e66:	84 89       	ldd	r24, Z+20	; 0x14
     e68:	80 64       	ori	r24, 0x40	; 64
     e6a:	84 8b       	std	Z+20, r24	; 0x14
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <scc_send_cmd+0xe2>
            } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
     e6e:	f7 01       	movw	r30, r14
     e70:	84 89       	ldd	r24, Z+20	; 0x14
     e72:	80 62       	ori	r24, 0x20	; 32
     e74:	84 8b       	std	Z+20, r24	; 0x14
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <scc_send_cmd+0xe2>
        } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
     e78:	f8 01       	movw	r30, r16
     e7a:	84 89       	ldd	r24, Z+20	; 0x14
     e7c:	80 62       	ori	r24, 0x20	; 32
     e7e:	84 8b       	std	Z+20, r24	; 0x14
     e80:	0f 5f       	subi	r16, 0xFF	; 255
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	93 94       	inc	r9
    unsigned char s,checksum,checksum_chk;

    twi_cmd=cmd;

    // send command to all SCC boards
    for(s=0;s<MAX_NOF_SCC;s++) {
     e86:	f0 e3       	ldi	r31, 0x30	; 48
     e88:	9f 12       	cpse	r9, r31
     e8a:	b3 cf       	rjmp	.-154    	; 0xdf2 <scc_send_cmd+0x54>
                    sysval.scc_sysstate[s] |= 0x80; //communication was OK
                } else sysval.scc_sysstate[s] |= 0x40; //communication was ERROR
            } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
        } else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
    }
}
     e8c:	60 96       	adiw	r28, 0x10	; 16
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	08 95       	ret

00000eb8 <scc_set_load>:

void scc_set_load(uint8_t onoff)
{
     eb8:	cf 93       	push	r28
     eba:	c8 2f       	mov	r28, r24
	printf("scc_set_load(%d)\n",onoff);
     ebc:	1f 92       	push	r1
     ebe:	8f 93       	push	r24
     ec0:	87 e8       	ldi	r24, 0x87	; 135
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
	if(onoff==0) {
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	c1 11       	cpse	r28, r1
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <scc_set_load+0x2a>
		scc_send_cmd(I2C_CMD_LOAD_OFF,0,0);
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	89 ea       	ldi	r24, 0xA9	; 169
     ede:	5f df       	rcall	.-322    	; 0xd9e <scc_send_cmd>
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <scc_set_load+0x32>
	} else {
		scc_send_cmd(I2C_CMD_LOAD_ON,0,0);
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	88 ea       	ldi	r24, 0xA8	; 168
     ee8:	5a df       	rcall	.-332    	; 0xd9e <scc_send_cmd>
	}
}
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <scc_cal_temp>:


void scc_cal_temp(uint8_t temp)
{
     eee:	cf 93       	push	r28
     ef0:	c8 2f       	mov	r28, r24
	printf("scc_cal_temp(%d)\n",temp);
     ef2:	1f 92       	push	r1
     ef4:	8f 93       	push	r24
     ef6:	89 e9       	ldi	r24, 0x99	; 153
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	9f 93       	push	r25
     efc:	8f 93       	push	r24
     efe:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
	scc_send_cmd(I2C_CMD_CALTEMP,temp,1);
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	6c 2f       	mov	r22, r28
     f06:	8b ea       	ldi	r24, 0xAB	; 171
     f08:	4a df       	rcall	.-364    	; 0xd9e <scc_send_cmd>
}
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <scc_cal_batt>:

void scc_cal_batt(int8_t offset)
{
     f16:	cf 93       	push	r28
     f18:	c8 2f       	mov	r28, r24
	printf("scc_cal_batt(%d)\n",offset);
     f1a:	8c 2f       	mov	r24, r28
     f1c:	0c 2e       	mov	r0, r28
     f1e:	00 0c       	add	r0, r0
     f20:	99 0b       	sbc	r25, r25
     f22:	9f 93       	push	r25
     f24:	cf 93       	push	r28
     f26:	8b ea       	ldi	r24, 0xAB	; 171
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
	scc_send_cmd(I2C_CMD_CALBATT,offset,1);
     f32:	41 e0       	ldi	r20, 0x01	; 1
     f34:	6c 2f       	mov	r22, r28
     f36:	8e ea       	ldi	r24, 0xAE	; 174
     f38:	32 df       	rcall	.-412    	; 0xd9e <scc_send_cmd>
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <scc_set_ah_batt>:

void scc_set_ah_batt(int8_t ah)
{
     f46:	cf 93       	push	r28
     f48:	c8 2f       	mov	r28, r24
	printf("scc_set_ah_batt(%d)\n",ah);
     f4a:	8c 2f       	mov	r24, r28
     f4c:	0c 2e       	mov	r0, r28
     f4e:	00 0c       	add	r0, r0
     f50:	99 0b       	sbc	r25, r25
     f52:	9f 93       	push	r25
     f54:	cf 93       	push	r28
     f56:	8d eb       	ldi	r24, 0xBD	; 189
     f58:	92 e0       	ldi	r25, 0x02	; 2
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
	scc_send_cmd(I2C_CMD_SETAHBATT,ah,1);
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	6c 2f       	mov	r22, r28
     f66:	8f ea       	ldi	r24, 0xAF	; 175
     f68:	1a df       	rcall	.-460    	; 0xd9e <scc_send_cmd>
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <scc_start_equalize>:

void scc_start_equalize(void)
{
	printf("scc_start_equalize()\n");
     f76:	82 ed       	ldi	r24, 0xD2	; 210
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
	scc_send_cmd(I2C_CMD_EQUALIZE,0,0);
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	8d ea       	ldi	r24, 0xAD	; 173
     f84:	0c cf       	rjmp	.-488    	; 0xd9e <scc_send_cmd>
     f86:	08 95       	ret

00000f88 <scc_read_battery>:
}


void scc_read_battery(void)
{
     f88:	2f 92       	push	r2
     f8a:	3f 92       	push	r3
     f8c:	4f 92       	push	r4
     f8e:	5f 92       	push	r5
     f90:	6f 92       	push	r6
     f92:	7f 92       	push	r7
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	68 97       	sbiw	r28, 0x18	; 24
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
	unsigned char s,checksum,checksum_chk;
	uint32_t As, As_max;
	uint16_t Ah;
	uint8_t equalizing;
		
	wdt_reset();
     fbc:	a8 95       	wdr
	
	printf("scc_read_battery:\n");
     fbe:	87 ee       	ldi	r24, 0xE7	; 231
     fc0:	92 e0       	ldi	r25, 0x02	; 2
     fc2:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
     fc6:	0f 2e       	mov	r0, r31
     fc8:	ff eb       	ldi	r31, 0xBF	; 191
     fca:	8f 2e       	mov	r8, r31
     fcc:	ff e0       	ldi	r31, 0x0F	; 15
     fce:	9f 2e       	mov	r9, r31
     fd0:	f0 2d       	mov	r31, r0
     fd2:	0f 2e       	mov	r0, r31
     fd4:	fb e1       	ldi	r31, 0x1B	; 27
     fd6:	cf 2e       	mov	r12, r31
     fd8:	f0 e1       	ldi	r31, 0x10	; 16
     fda:	df 2e       	mov	r13, r31
     fdc:	f0 2d       	mov	r31, r0
     fde:	0f 2e       	mov	r0, r31
     fe0:	fc e2       	ldi	r31, 0x2C	; 44
     fe2:	ff 2e       	mov	r15, r31
     fe4:	f0 2d       	mov	r31, r0
     fe6:	21 2c       	mov	r2, r1
     fe8:	31 2c       	mov	r3, r1
	
	for(s=0;s<MAX_NOF_SCC;s++) {
		twi_sla=I2C_SCC_BASE_ADDR+s;
		delay_ms(50);
		memset(twi_data,0,16);
     fea:	68 94       	set
     fec:	aa 24       	eor	r10, r10
     fee:	a4 f8       	bld	r10, 4
     ff0:	9e 01       	movw	r18, r28
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	29 01       	movw	r4, r18
     ff8:	8e 01       	movw	r16, r28
     ffa:	0f 5e       	subi	r16, 0xEF	; 239
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
	
	printf("scc_read_battery:\n");
	
	for(s=0;s<MAX_NOF_SCC;s++) {
		twi_sla=I2C_SCC_BASE_ADDR+s;
		delay_ms(50);
     ffe:	68 ed       	ldi	r22, 0xD8	; 216
    1000:	7f ee       	ldi	r23, 0xEF	; 239
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	25 d9       	rcall	.-3510   	; 0x252 <delayloop32>
		memset(twi_data,0,16);
    1008:	d2 01       	movw	r26, r4
    100a:	ea 2d       	mov	r30, r10
    100c:	1d 92       	st	X+, r1
    100e:	ea 95       	dec	r30
    1010:	e9 f7       	brne	.-6      	; 0x100c <scc_read_battery+0x84>
		sysval.scc_sysstate[s]=0;
    1012:	e2 2c       	mov	r14, r2
    1014:	b3 2c       	mov	r11, r3
    1016:	34 01       	movw	r6, r8
    1018:	d4 01       	movw	r26, r8
    101a:	54 96       	adiw	r26, 0x14	; 20
    101c:	1c 92       	st	X, r1
		if(twi_write_one(twi_sla,I2C_CMD_READBATT) >= 0) {
    101e:	6c ea       	ldi	r22, 0xAC	; 172
    1020:	8f 2d       	mov	r24, r15
    1022:	0e 94 20 29 	call	0x5240	; 0x5240 <twi_write_one>
    1026:	99 23       	and	r25, r25
    1028:	0c f4       	brge	.+2      	; 0x102c <scc_read_battery+0xa4>
    102a:	9a c0       	rjmp	.+308    	; 0x1160 <scc_read_battery+0x1d8>
			delay_ms(5);
    102c:	6c ef       	ldi	r22, 0xFC	; 252
    102e:	77 e1       	ldi	r23, 0x17	; 23
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e d9       	rcall	.-3556   	; 0x252 <delayloop32>
			if(twi_read_small(16,twi_data,twi_sla) >= 0) {
    1036:	4f 2d       	mov	r20, r15
    1038:	b2 01       	movw	r22, r4
    103a:	80 e1       	ldi	r24, 0x10	; 16
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 93 29 	call	0x5326	; 0x5326 <twi_read_small>
    1042:	99 23       	and	r25, r25
    1044:	0c f4       	brge	.+2      	; 0x1048 <scc_read_battery+0xc0>
    1046:	87 c0       	rjmp	.+270    	; 0x1156 <scc_read_battery+0x1ce>
				int i;
				checksum=twi_data[15];
    1048:	28 89       	ldd	r18, Y+16	; 0x10
				twi_data[15]=0;
    104a:	18 8a       	std	Y+16, r1	; 0x10
    104c:	fe 01       	movw	r30, r28
    104e:	31 96       	adiw	r30, 0x01	; 1
				checksum_chk=0;
    1050:	80 e0       	ldi	r24, 0x00	; 0
				for(i=0;i<16;i++) {
					checksum_chk+=twi_data[i];
    1052:	91 91       	ld	r25, Z+
    1054:	89 0f       	add	r24, r25
			if(twi_read_small(16,twi_data,twi_sla) >= 0) {
				int i;
				checksum=twi_data[15];
				twi_data[15]=0;
				checksum_chk=0;
				for(i=0;i<16;i++) {
    1056:	e0 17       	cp	r30, r16
    1058:	f1 07       	cpc	r31, r17
    105a:	d9 f7       	brne	.-10     	; 0x1052 <scc_read_battery+0xca>
					checksum_chk+=twi_data[i];
				}
				if(checksum_chk==checksum) {
    105c:	28 13       	cpse	r18, r24
    105e:	73 c0       	rjmp	.+230    	; 0x1146 <scc_read_battery+0x1be>
					i=1;
					As =((uint32_t)twi_data[i++])<<24;
    1060:	2a 81       	ldd	r18, Y+2	; 0x02
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 e0       	ldi	r26, 0x00	; 0
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	dc 01       	movw	r26, r24
    106c:	99 27       	eor	r25, r25
    106e:	88 27       	eor	r24, r24
    1070:	b2 2b       	or	r27, r18
    1072:	2d 81       	ldd	r18, Y+5	; 0x05
    1074:	82 2b       	or	r24, r18
					As|=((uint32_t)twi_data[i++])<<16;
					As|=((uint32_t)twi_data[i++])<<8;
					As|=((uint32_t)twi_data[i++])&0xff;
    1076:	2c 81       	ldd	r18, Y+4	; 0x04
    1078:	ac 01       	movw	r20, r24
    107a:	bd 01       	movw	r22, r26
    107c:	52 2b       	or	r21, r18
    107e:	49 8b       	std	Y+17, r20	; 0x11
    1080:	5a 8b       	std	Y+18, r21	; 0x12
    1082:	6b 8b       	std	Y+19, r22	; 0x13
    1084:	7c 8b       	std	Y+20, r23	; 0x14
					
					As_max =((uint32_t)twi_data[i++])<<24;
    1086:	2e 81       	ldd	r18, Y+6	; 0x06
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	dc 01       	movw	r26, r24
    1092:	99 27       	eor	r25, r25
    1094:	88 27       	eor	r24, r24
    1096:	b2 2b       	or	r27, r18
    1098:	29 85       	ldd	r18, Y+9	; 0x09
    109a:	82 2b       	or	r24, r18
					As_max|=((uint32_t)twi_data[i++])<<16;
					As_max|=((uint32_t)twi_data[i++])<<8;
					As_max|=((uint32_t)twi_data[i++])&0xff;
    109c:	28 85       	ldd	r18, Y+8	; 0x08
    109e:	ac 01       	movw	r20, r24
    10a0:	bd 01       	movw	r22, r26
    10a2:	52 2b       	or	r21, r18
    10a4:	4d 8b       	std	Y+21, r20	; 0x15
    10a6:	5e 8b       	std	Y+22, r21	; 0x16
    10a8:	6f 8b       	std	Y+23, r22	; 0x17
    10aa:	78 8f       	std	Y+24, r23	; 0x18
					
					equalizing = twi_data[i++];
								
					printf("[%d] As=%ld As_max=%ld equalize=%d\n",s,As,As_max,equalizing);
    10ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ae:	1f 92       	push	r1
    10b0:	8f 93       	push	r24
    10b2:	7f 93       	push	r23
    10b4:	6f 93       	push	r22
    10b6:	5f 93       	push	r21
    10b8:	4f 93       	push	r20
    10ba:	5c 89       	ldd	r21, Y+20	; 0x14
    10bc:	5f 93       	push	r21
    10be:	6b 89       	ldd	r22, Y+19	; 0x13
    10c0:	6f 93       	push	r22
    10c2:	7a 89       	ldd	r23, Y+18	; 0x12
    10c4:	7f 93       	push	r23
    10c6:	89 89       	ldd	r24, Y+17	; 0x11
    10c8:	8f 93       	push	r24
    10ca:	bf 92       	push	r11
    10cc:	ef 92       	push	r14
    10ce:	a9 ef       	ldi	r26, 0xF9	; 249
    10d0:	b2 e0       	ldi	r27, 0x02	; 2
    10d2:	bf 93       	push	r27
    10d4:	af 93       	push	r26
    10d6:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
					Ah=(uint16_t)(As/3600L);
					sysval.scc_Ah[s] = Ah;
    10da:	69 89       	ldd	r22, Y+17	; 0x11
    10dc:	7a 89       	ldd	r23, Y+18	; 0x12
    10de:	8b 89       	ldd	r24, Y+19	; 0x13
    10e0:	9c 89       	ldd	r25, Y+20	; 0x14
    10e2:	20 e1       	ldi	r18, 0x10	; 16
    10e4:	3e e0       	ldi	r19, 0x0E	; 14
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    10ee:	d6 01       	movw	r26, r12
    10f0:	2d 93       	st	X+, r18
    10f2:	3c 93       	st	X, r19
					//printf("[%d] Ah=%d\n",s,sysval.scc_Ah[s]);
					
					if((As_max >= As) && (As > 0)) {
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	29 89       	ldd	r18, Y+17	; 0x11
    1100:	3a 89       	ldd	r19, Y+18	; 0x12
    1102:	4b 89       	ldd	r20, Y+19	; 0x13
    1104:	5c 89       	ldd	r21, Y+20	; 0x14
    1106:	6d 89       	ldd	r22, Y+21	; 0x15
    1108:	7e 89       	ldd	r23, Y+22	; 0x16
    110a:	8f 89       	ldd	r24, Y+23	; 0x17
    110c:	98 8d       	ldd	r25, Y+24	; 0x18
    110e:	62 17       	cp	r22, r18
    1110:	73 07       	cpc	r23, r19
    1112:	84 07       	cpc	r24, r20
    1114:	95 07       	cpc	r25, r21
    1116:	90 f0       	brcs	.+36     	; 0x113c <scc_read_battery+0x1b4>
    1118:	21 15       	cp	r18, r1
    111a:	31 05       	cpc	r19, r1
    111c:	41 05       	cpc	r20, r1
    111e:	51 05       	cpc	r21, r1
    1120:	69 f0       	breq	.+26     	; 0x113c <scc_read_battery+0x1b4>
						As *= 100UL;
    1122:	a4 e6       	ldi	r26, 0x64	; 100
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	0e 94 c5 2a 	call	0x558a	; 0x558a <__muluhisi3>
						As = As / As_max;						
						sysval.scc_socc[s] = (uint8_t)As;
    112a:	2d 89       	ldd	r18, Y+21	; 0x15
    112c:	3e 89       	ldd	r19, Y+22	; 0x16
    112e:	4f 89       	ldd	r20, Y+23	; 0x17
    1130:	58 8d       	ldd	r21, Y+24	; 0x18
    1132:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    1136:	d3 01       	movw	r26, r6
    1138:	9c 96       	adiw	r26, 0x2c	; 44
    113a:	2c 93       	st	X, r18
						//printf("[%d] SoCC=%d\n",s,sysval.scc_socc[s]);
					}
					sysval.scc_sysstate[s] |= 0x80; //communication was OK
    113c:	f3 01       	movw	r30, r6
    113e:	84 89       	ldd	r24, Z+20	; 0x14
    1140:	80 68       	ori	r24, 0x80	; 128
    1142:	84 8b       	std	Z+20, r24	; 0x14
    1144:	14 c0       	rjmp	.+40     	; 0x116e <scc_read_battery+0x1e6>
				} else sysval.scc_sysstate[s] |= 0x40; //communication was ERROR			
    1146:	d3 01       	movw	r26, r6
    1148:	54 96       	adiw	r26, 0x14	; 20
    114a:	8c 91       	ld	r24, X
    114c:	54 97       	sbiw	r26, 0x14	; 20
    114e:	80 64       	ori	r24, 0x40	; 64
    1150:	54 96       	adiw	r26, 0x14	; 20
    1152:	8c 93       	st	X, r24
    1154:	0c c0       	rjmp	.+24     	; 0x116e <scc_read_battery+0x1e6>
			} else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
    1156:	f4 01       	movw	r30, r8
    1158:	84 89       	ldd	r24, Z+20	; 0x14
    115a:	80 62       	ori	r24, 0x20	; 32
    115c:	84 8b       	std	Z+20, r24	; 0x14
    115e:	07 c0       	rjmp	.+14     	; 0x116e <scc_read_battery+0x1e6>
		} else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
    1160:	d4 01       	movw	r26, r8
    1162:	54 96       	adiw	r26, 0x14	; 20
    1164:	8c 91       	ld	r24, X
    1166:	54 97       	sbiw	r26, 0x14	; 20
    1168:	80 62       	ori	r24, 0x20	; 32
    116a:	54 96       	adiw	r26, 0x14	; 20
    116c:	8c 93       	st	X, r24
    116e:	bf ef       	ldi	r27, 0xFF	; 255
    1170:	2b 1a       	sub	r2, r27
    1172:	3b 0a       	sbc	r3, r27
    1174:	ef ef       	ldi	r30, 0xFF	; 255
    1176:	8e 1a       	sub	r8, r30
    1178:	9e 0a       	sbc	r9, r30
    117a:	f3 94       	inc	r15
    117c:	f2 e0       	ldi	r31, 0x02	; 2
    117e:	cf 0e       	add	r12, r31
    1180:	d1 1c       	adc	r13, r1
		
	wdt_reset();
	
	printf("scc_read_battery:\n");
	
	for(s=0;s<MAX_NOF_SCC;s++) {
    1182:	20 e3       	ldi	r18, 0x30	; 48
    1184:	f2 12       	cpse	r15, r18
    1186:	3b cf       	rjmp	.-394    	; 0xffe <scc_read_battery+0x76>
					sysval.scc_sysstate[s] |= 0x80; //communication was OK
				} else sysval.scc_sysstate[s] |= 0x40; //communication was ERROR			
			} else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
		} else sysval.scc_sysstate[s] |= 0x20; //communication was ERROR
	}	
    1188:	68 96       	adiw	r28, 0x18	; 24
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	bf 90       	pop	r11
    11a6:	af 90       	pop	r10
    11a8:	9f 90       	pop	r9
    11aa:	8f 90       	pop	r8
    11ac:	7f 90       	pop	r7
    11ae:	6f 90       	pop	r6
    11b0:	5f 90       	pop	r5
    11b2:	4f 90       	pop	r4
    11b4:	3f 90       	pop	r3
    11b6:	2f 90       	pop	r2
    11b8:	08 95       	ret

000011ba <Receive_SIM_Byte>:
    11ba:	90 91 bb 0e 	lds	r25, 0x0EBB	; 0x800ebb <UART_SIM_RxHead>
    11be:	80 91 ba 0e 	lds	r24, 0x0EBA	; 0x800eba <UART_SIM_RxTail>
    11c2:	98 17       	cp	r25, r24
    11c4:	d1 f3       	breq	.-12     	; 0x11ba <Receive_SIM_Byte>
    11c6:	e0 91 ba 0e 	lds	r30, 0x0EBA	; 0x800eba <UART_SIM_RxTail>
    11ca:	ef 5f       	subi	r30, 0xFF	; 255
    11cc:	e0 93 ba 0e 	sts	0x0EBA, r30	; 0x800eba <UART_SIM_RxTail>
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	e4 54       	subi	r30, 0x44	; 68
    11d4:	f1 4f       	sbci	r31, 0xF1	; 241
    11d6:	80 81       	ld	r24, Z
    11d8:	08 95       	ret

000011da <Poll_SIM>:
unsigned char Poll_SIM(void)
{
        if(UART_SIM_RxHead == UART_SIM_RxTail) return 0; else return 1;
    11da:	20 91 bb 0e 	lds	r18, 0x0EBB	; 0x800ebb <UART_SIM_RxHead>
    11de:	90 91 ba 0e 	lds	r25, 0x0EBA	; 0x800eba <UART_SIM_RxTail>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	29 13       	cpse	r18, r25
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <Poll_SIM+0x10>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
}
    11ea:	08 95       	ret

000011ec <prepare_data_message>:
const char PM_SOCstr1[] PROGMEM=";" DATAPACKET_VERSION ";" FIRMWARE_VERSION ";%c%c%c%c;%c%c%c%c;%lu;%c%c%c%c;";
//const char PM_SOCstr1[] PROGMEM=";" DATAPACKET_VERSION ";" FIRMWARE_VERSION ";%.20s;%c%c%c%c;%lu;%c%c%c%c;";
const char PM_SOCstr2[] PROGMEM="%d;%d;%d;%d;%d;%d;%d;";

uint8_t prepare_data_message(const char *userstr, uint8_t *sms_start_offset)
{
    11ec:	2f 92       	push	r2
    11ee:	3f 92       	push	r3
    11f0:	4f 92       	push	r4
    11f2:	5f 92       	push	r5
    11f4:	6f 92       	push	r6
    11f6:	7f 92       	push	r7
    11f8:	8f 92       	push	r8
    11fa:	9f 92       	push	r9
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	c1 54       	subi	r28, 0x41	; 65
    1216:	d1 09       	sbc	r29, r1
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	6b 01       	movw	r12, r22
    char sim_rxbuf[64];
    uint8_t sreg;
    uint8_t len=0;
    uint8_t tmp_ledstate;

    sreg=SREG; cli();
    1224:	1f b7       	in	r17, 0x3f	; 63
    1226:	f8 94       	cli
    eeprom_read_block(&UART_SIM_TxBuf[len],&EEPROM_ADDR_hostname,HOSTNAME_LEN);
    1228:	48 e2       	ldi	r20, 0x28	; 40
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	61 e3       	ldi	r22, 0x31	; 49
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	8a eb       	ldi	r24, 0xBA	; 186
    1232:	9c e0       	ldi	r25, 0x0C	; 12
    1234:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
    SREG=sreg;
    1238:	1f bf       	out	0x3f, r17	; 63

    len=strlen(UART_SIM_TxBuf);
    123a:	0f 2e       	mov	r0, r31
    123c:	fa eb       	ldi	r31, 0xBA	; 186
    123e:	ef 2e       	mov	r14, r31
    1240:	fc e0       	ldi	r31, 0x0C	; 12
    1242:	ff 2e       	mov	r15, r31
    1244:	f0 2d       	mov	r31, r0
    1246:	f7 01       	movw	r30, r14
    1248:	01 90       	ld	r0, Z+
    124a:	00 20       	and	r0, r0
    124c:	e9 f7       	brne	.-6      	; 0x1248 <prepare_data_message+0x5c>
    124e:	31 97       	sbiw	r30, 0x01	; 1
    1250:	8f 01       	movw	r16, r30
    1252:	0a 5b       	subi	r16, 0xBA	; 186
    1254:	1c 40       	sbci	r17, 0x0C	; 12

    len+=sprintf_P(&UART_SIM_TxBuf[len],PM_URLfilepath_data);
    1256:	8c ed       	ldi	r24, 0xDC	; 220
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	c8 01       	movw	r24, r16
    1260:	99 27       	eor	r25, r25
    1262:	86 54       	subi	r24, 0x46	; 70
    1264:	93 4f       	sbci	r25, 0xF3	; 243
    1266:	9f 93       	push	r25
    1268:	8f 93       	push	r24
    126a:	0e 94 39 2c 	call	0x5872	; 0x5872 <sprintf_P>
    126e:	08 0f       	add	r16, r24
    len+=sprintf_P(&UART_SIM_TxBuf[len],PM_GETcmdDATA);
    1270:	85 ed       	ldi	r24, 0xD5	; 213
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	9f 93       	push	r25
    1276:	8f 93       	push	r24
    1278:	80 2f       	mov	r24, r16
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	86 54       	subi	r24, 0x46	; 70
    127e:	93 4f       	sbci	r25, 0xF3	; 243
    1280:	9f 93       	push	r25
    1282:	8f 93       	push	r24
    1284:	0e 94 39 2c 	call	0x5872	; 0x5872 <sprintf_P>
    1288:	08 0f       	add	r16, r24

    *sms_start_offset=len;
    128a:	f6 01       	movw	r30, r12
    128c:	00 83       	st	Z, r16
    sprintf(&UART_SIM_TxBuf[len],"%s",sim_read_IMEI(sim_rxbuf,sizeof(sim_rxbuf)));
    128e:	60 e4       	ldi	r22, 0x40	; 64
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <sim_read_IMEI>
    129a:	e0 2f       	mov	r30, r16
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	bc 01       	movw	r22, r24
    12a0:	cf 01       	movw	r24, r30
    12a2:	86 54       	subi	r24, 0x46	; 70
    12a4:	93 4f       	sbci	r25, 0xF3	; 243
    12a6:	0e 94 3d 2b 	call	0x567a	; 0x567a <strcpy>
    len=strlen(UART_SIM_TxBuf);
    12aa:	f7 01       	movw	r30, r14
    12ac:	01 90       	ld	r0, Z+
    12ae:	00 20       	and	r0, r0
    12b0:	e9 f7       	brne	.-6      	; 0x12ac <prepare_data_message+0xc0>
    12b2:	31 97       	sbiw	r30, 0x01	; 1
    12b4:	9f 01       	movw	r18, r30
    12b6:	2a 5b       	subi	r18, 0xBA	; 186
    12b8:	3c 40       	sbci	r19, 0x0C	; 12
    12ba:	19 01       	movw	r2, r18

    len+=sprintf_P(&UART_SIM_TxBuf[len],PM_SOCstr1,
                  daystate2str(3),daystate2str(2),daystate2str(1),daystate2str(0),
				  sysstate2str(3),sysstate2str(2),sysstate2str(1),sysstate2str(0), sysval.seconds, 
				  loadstate2str(3),loadstate2str(2),loadstate2str(1),loadstate2str(0));
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <loadstate2str>
    12c2:	22 96       	adiw	r28, 0x02	; 2
    12c4:	8f af       	std	Y+63, r24	; 0x3f
    12c6:	22 97       	sbiw	r28, 0x02	; 2
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <loadstate2str>
    12ce:	48 2e       	mov	r4, r24
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <loadstate2str>
    12d6:	58 2e       	mov	r5, r24
    12d8:	83 e0       	ldi	r24, 0x03	; 3
    12da:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <loadstate2str>
    12de:	68 2e       	mov	r6, r24

    *sms_start_offset=len;
    sprintf(&UART_SIM_TxBuf[len],"%s",sim_read_IMEI(sim_rxbuf,sizeof(sim_rxbuf)));
    len=strlen(UART_SIM_TxBuf);

    len+=sprintf_P(&UART_SIM_TxBuf[len],PM_SOCstr1,
    12e0:	c0 90 bf 0f 	lds	r12, 0x0FBF	; 0x800fbf <sysval>
    12e4:	d0 90 c0 0f 	lds	r13, 0x0FC0	; 0x800fc0 <sysval+0x1>
    12e8:	e0 90 c1 0f 	lds	r14, 0x0FC1	; 0x800fc1 <sysval+0x2>
    12ec:	f0 90 c2 0f 	lds	r15, 0x0FC2	; 0x800fc2 <sysval+0x3>
                  daystate2str(3),daystate2str(2),daystate2str(1),daystate2str(0),
				  sysstate2str(3),sysstate2str(2),sysstate2str(1),sysstate2str(0), sysval.seconds, 
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <sysstate2str>
    12f6:	78 2e       	mov	r7, r24
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <sysstate2str>
    12fe:	88 2e       	mov	r8, r24
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <sysstate2str>
    1306:	98 2e       	mov	r9, r24
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <sysstate2str>
    130e:	a8 2e       	mov	r10, r24
    *sms_start_offset=len;
    sprintf(&UART_SIM_TxBuf[len],"%s",sim_read_IMEI(sim_rxbuf,sizeof(sim_rxbuf)));
    len=strlen(UART_SIM_TxBuf);

    len+=sprintf_P(&UART_SIM_TxBuf[len],PM_SOCstr1,
                  daystate2str(3),daystate2str(2),daystate2str(1),daystate2str(0),
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <daystate2str>
    1316:	b8 2e       	mov	r11, r24
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <daystate2str>
    131e:	08 2f       	mov	r16, r24
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <daystate2str>
    1326:	18 2f       	mov	r17, r24
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <daystate2str>

    *sms_start_offset=len;
    sprintf(&UART_SIM_TxBuf[len],"%s",sim_read_IMEI(sim_rxbuf,sizeof(sim_rxbuf)));
    len=strlen(UART_SIM_TxBuf);

    len+=sprintf_P(&UART_SIM_TxBuf[len],PM_SOCstr1,
    132e:	1f 92       	push	r1
    1330:	22 96       	adiw	r28, 0x02	; 2
    1332:	3f ad       	ldd	r19, Y+63	; 0x3f
    1334:	22 97       	sbiw	r28, 0x02	; 2
    1336:	3f 93       	push	r19
    1338:	1f 92       	push	r1
    133a:	4f 92       	push	r4
    133c:	1f 92       	push	r1
    133e:	5f 92       	push	r5
    1340:	1f 92       	push	r1
    1342:	6f 92       	push	r6
    1344:	ff 92       	push	r15
    1346:	ef 92       	push	r14
    1348:	df 92       	push	r13
    134a:	cf 92       	push	r12
    134c:	1f 92       	push	r1
    134e:	7f 92       	push	r7
    1350:	1f 92       	push	r1
    1352:	8f 92       	push	r8
    1354:	1f 92       	push	r1
    1356:	9f 92       	push	r9
    1358:	1f 92       	push	r1
    135a:	af 92       	push	r10
    135c:	1f 92       	push	r1
    135e:	bf 92       	push	r11
    1360:	1f 92       	push	r1
    1362:	0f 93       	push	r16
    1364:	1f 92       	push	r1
    1366:	1f 93       	push	r17
    1368:	1f 92       	push	r1
    136a:	8f 93       	push	r24
    136c:	8c ea       	ldi	r24, 0xAC	; 172
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	9f 93       	push	r25
    1372:	8f 93       	push	r24
    1374:	c1 01       	movw	r24, r2
    1376:	99 27       	eor	r25, r25
    1378:	86 54       	subi	r24, 0x46	; 70
    137a:	93 4f       	sbci	r25, 0xF3	; 243
    137c:	9f 93       	push	r25
    137e:	8f 93       	push	r24
    1380:	0e 94 39 2c 	call	0x5872	; 0x5872 <sprintf_P>
    1384:	18 2f       	mov	r17, r24
    1386:	12 0d       	add	r17, r2
    // userstr len is maximal 20 chars (truncated by sprintf_P(".... %.20s ....")

    len+=sprintf(&UART_SIM_TxBuf[len],"%d;%d;%d;%lu;%lu;%lu;%c%c%c%c;",
                  sysval.Door_open,sysval.SoC,sysval.SoCC,
                  sysval.Ah, sysval.Ws_in/3600, sysval.Ws_out/3600,
				  solarstate2str(3),solarstate2str(2),solarstate2str(1),solarstate2str(0));
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0e 94 34 27 	call	0x4e68	; 0x4e68 <solarstate2str>
    1398:	98 2e       	mov	r9, r24
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 34 27 	call	0x4e68	; 0x4e68 <solarstate2str>
    13a0:	a8 2e       	mov	r10, r24
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	0e 94 34 27 	call	0x4e68	; 0x4e68 <solarstate2str>
    13a8:	b8 2e       	mov	r11, r24
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	0e 94 34 27 	call	0x4e68	; 0x4e68 <solarstate2str>
				  loadstate2str(3),loadstate2str(2),loadstate2str(1),loadstate2str(0));
    // userstr len is maximal 20 chars (truncated by sprintf_P(".... %.20s ....")

    len+=sprintf(&UART_SIM_TxBuf[len],"%d;%d;%d;%lu;%lu;%lu;%c%c%c%c;",
                  sysval.Door_open,sysval.SoC,sysval.SoCC,
                  sysval.Ah, sysval.Ws_in/3600, sysval.Ws_out/3600,
    13b0:	40 91 43 10 	lds	r20, 0x1043	; 0x801043 <sysval+0x84>
    13b4:	50 91 44 10 	lds	r21, 0x1044	; 0x801044 <sysval+0x85>
    13b8:	60 91 45 10 	lds	r22, 0x1045	; 0x801045 <sysval+0x86>
    13bc:	70 91 46 10 	lds	r23, 0x1046	; 0x801046 <sysval+0x87>
    13c0:	20 90 3f 10 	lds	r2, 0x103F	; 0x80103f <sysval+0x80>
    13c4:	30 90 40 10 	lds	r3, 0x1040	; 0x801040 <sysval+0x81>
    13c8:	40 90 41 10 	lds	r4, 0x1041	; 0x801041 <sysval+0x82>
    13cc:	50 90 42 10 	lds	r5, 0x1042	; 0x801042 <sysval+0x83>
                  daystate2str(3),daystate2str(2),daystate2str(1),daystate2str(0),
				  sysstate2str(3),sysstate2str(2),sysstate2str(1),sysstate2str(0), sysval.seconds, 
				  loadstate2str(3),loadstate2str(2),loadstate2str(1),loadstate2str(0));
    // userstr len is maximal 20 chars (truncated by sprintf_P(".... %.20s ....")

    len+=sprintf(&UART_SIM_TxBuf[len],"%d;%d;%d;%lu;%lu;%lu;%c%c%c%c;",
    13d0:	c0 90 4e 10 	lds	r12, 0x104E	; 0x80104e <sysval+0x8f>
    13d4:	d0 90 4f 10 	lds	r13, 0x104F	; 0x80104f <sysval+0x90>
    13d8:	e0 90 50 10 	lds	r14, 0x1050	; 0x801050 <sysval+0x91>
    13dc:	f0 90 51 10 	lds	r15, 0x1051	; 0x801051 <sysval+0x92>
                  sysval.Door_open,sysval.SoC,sysval.SoCC,
    13e0:	60 90 4d 10 	lds	r6, 0x104D	; 0x80104d <sysval+0x8e>
    13e4:	70 90 4c 10 	lds	r7, 0x104C	; 0x80104c <sysval+0x8d>
    13e8:	00 91 58 10 	lds	r16, 0x1058	; 0x801058 <sysval+0x99>
                  daystate2str(3),daystate2str(2),daystate2str(1),daystate2str(0),
				  sysstate2str(3),sysstate2str(2),sysstate2str(1),sysstate2str(0), sysval.seconds, 
				  loadstate2str(3),loadstate2str(2),loadstate2str(1),loadstate2str(0));
    // userstr len is maximal 20 chars (truncated by sprintf_P(".... %.20s ....")

    len+=sprintf(&UART_SIM_TxBuf[len],"%d;%d;%d;%lu;%lu;%lu;%c%c%c%c;",
    13ec:	1f 92       	push	r1
    13ee:	9f 92       	push	r9
    13f0:	1f 92       	push	r1
    13f2:	af 92       	push	r10
    13f4:	1f 92       	push	r1
    13f6:	bf 92       	push	r11
    13f8:	1f 92       	push	r1
    13fa:	8f 93       	push	r24
    13fc:	0f 2e       	mov	r0, r31
    13fe:	f0 e1       	ldi	r31, 0x10	; 16
    1400:	8f 2e       	mov	r8, r31
    1402:	fe e0       	ldi	r31, 0x0E	; 14
    1404:	9f 2e       	mov	r9, r31
    1406:	a1 2c       	mov	r10, r1
    1408:	b1 2c       	mov	r11, r1
    140a:	f0 2d       	mov	r31, r0
    140c:	cb 01       	movw	r24, r22
    140e:	ba 01       	movw	r22, r20
    1410:	a5 01       	movw	r20, r10
    1412:	94 01       	movw	r18, r8
    1414:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    1418:	5f 93       	push	r21
    141a:	4f 93       	push	r20
    141c:	3f 93       	push	r19
    141e:	2f 93       	push	r18
    1420:	c2 01       	movw	r24, r4
    1422:	b1 01       	movw	r22, r2
    1424:	a5 01       	movw	r20, r10
    1426:	94 01       	movw	r18, r8
    1428:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    142c:	5f 93       	push	r21
    142e:	4f 93       	push	r20
    1430:	3f 93       	push	r19
    1432:	2f 93       	push	r18
    1434:	ff 92       	push	r15
    1436:	ef 92       	push	r14
    1438:	df 92       	push	r13
    143a:	cf 92       	push	r12
    143c:	1f 92       	push	r1
    143e:	6f 92       	push	r6
    1440:	1f 92       	push	r1
    1442:	7f 92       	push	r7
    1444:	1f 92       	push	r1
    1446:	0f 93       	push	r16
    1448:	8d e1       	ldi	r24, 0x1D	; 29
    144a:	93 e0       	ldi	r25, 0x03	; 3
    144c:	9f 93       	push	r25
    144e:	8f 93       	push	r24
    1450:	81 2f       	mov	r24, r17
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	86 54       	subi	r24, 0x46	; 70
    1456:	93 4f       	sbci	r25, 0xF3	; 243
    1458:	9f 93       	push	r25
    145a:	8f 93       	push	r24
    145c:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    1460:	18 0f       	add	r17, r24
                  sysval.Door_open,sysval.SoC,sysval.SoCC,
                  sysval.Ah, sysval.Ws_in/3600, sysval.Ws_out/3600,
				  solarstate2str(3),solarstate2str(2),solarstate2str(1),solarstate2str(0));

    sreg=SREG; cli(); // atomic read to capture led state without race condition
    1462:	9f b7       	in	r25, 0x3f	; 63
    1464:	f8 94       	cli
    tmp_ledstate=0;
	if(bit_is_set(PORTC,LED_SHORTFAULT) == 0) tmp_ledstate|=0x08;
    1466:	88 b1       	in	r24, 0x08	; 8
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	80 95       	com	r24
    1474:	08 2f       	mov	r16, r24
    1476:	00 1f       	adc	r16, r16
    1478:	00 27       	eor	r16, r16
    147a:	00 1f       	adc	r16, r16
    147c:	00 0f       	add	r16, r16
    147e:	00 0f       	add	r16, r16
    1480:	00 0f       	add	r16, r16
    if(bit_is_set(PORTB,LED_CHARGING)   == 0) tmp_ledstate|=0x10;
    1482:	29 9b       	sbis	0x05, 1	; 5
    1484:	00 61       	ori	r16, 0x10	; 16
    if(bit_is_set(PORTB,LED_100PERCENT) == 0) tmp_ledstate|=0x20;
    1486:	28 9b       	sbis	0x05, 0	; 5
    1488:	00 62       	ori	r16, 0x20	; 32
    if(bit_is_set(PORTB,LED_60PERCENT)  == 0) tmp_ledstate|=0x40;
    148a:	2a 9b       	sbis	0x05, 2	; 5
    148c:	00 64       	ori	r16, 0x40	; 64
    if(bit_is_set(PORTB,LED_30PERCENT)  == 0) tmp_ledstate|=0x80;	
    148e:	2b 9b       	sbis	0x05, 3	; 5
    1490:	00 68       	ori	r16, 0x80	; 128
    SREG=sreg;
    1492:	9f bf       	out	0x3f, r25	; 63

    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.Vbatt);
    1494:	80 91 35 10 	lds	r24, 0x1035	; 0x801035 <sysval+0x76>
    1498:	90 91 36 10 	lds	r25, 0x1036	; 0x801036 <sysval+0x77>
    149c:	9f 93       	push	r25
    149e:	8f 93       	push	r24
    14a0:	0f 2e       	mov	r0, r31
    14a2:	f2 e4       	ldi	r31, 0x42	; 66
    14a4:	ef 2e       	mov	r14, r31
    14a6:	f3 e0       	ldi	r31, 0x03	; 3
    14a8:	ff 2e       	mov	r15, r31
    14aa:	f0 2d       	mov	r31, r0
    14ac:	ff 92       	push	r15
    14ae:	ef 92       	push	r14
    14b0:	81 2f       	mov	r24, r17
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	86 54       	subi	r24, 0x46	; 70
    14b6:	93 4f       	sbci	r25, 0xF3	; 243
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    14c0:	18 0f       	add	r17, r24
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.Vpv);
    14c2:	80 91 33 10 	lds	r24, 0x1033	; 0x801033 <sysval+0x74>
    14c6:	90 91 34 10 	lds	r25, 0x1034	; 0x801034 <sysval+0x75>
    14ca:	9f 93       	push	r25
    14cc:	8f 93       	push	r24
    14ce:	ff 92       	push	r15
    14d0:	ef 92       	push	r14
    14d2:	81 2f       	mov	r24, r17
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	86 54       	subi	r24, 0x46	; 70
    14d8:	93 4f       	sbci	r25, 0xF3	; 243
    14da:	9f 93       	push	r25
    14dc:	8f 93       	push	r24
    14de:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    14e2:	18 0f       	add	r17, r24
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.I_load);
    14e4:	80 91 39 10 	lds	r24, 0x1039	; 0x801039 <sysval+0x7a>
    14e8:	90 91 3a 10 	lds	r25, 0x103A	; 0x80103a <sysval+0x7b>
    14ec:	9f 93       	push	r25
    14ee:	8f 93       	push	r24
    14f0:	ff 92       	push	r15
    14f2:	ef 92       	push	r14
    14f4:	81 2f       	mov	r24, r17
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	86 54       	subi	r24, 0x46	; 70
    14fa:	93 4f       	sbci	r25, 0xF3	; 243
    14fc:	9f 93       	push	r25
    14fe:	8f 93       	push	r24
    1500:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    1504:	18 0f       	add	r17, r24
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.I_charge);
    1506:	80 91 37 10 	lds	r24, 0x1037	; 0x801037 <sysval+0x78>
    150a:	90 91 38 10 	lds	r25, 0x1038	; 0x801038 <sysval+0x79>
    150e:	9f 93       	push	r25
    1510:	8f 93       	push	r24
    1512:	ff 92       	push	r15
    1514:	ef 92       	push	r14
    1516:	81 2f       	mov	r24, r17
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	86 54       	subi	r24, 0x46	; 70
    151c:	93 4f       	sbci	r25, 0xF3	; 243
    151e:	9f 93       	push	r25
    1520:	8f 93       	push	r24
    1522:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    1526:	18 0f       	add	r17, r24

    len+=sprintf(&UART_SIM_TxBuf[len],"%d;%d;%d;", sysval.P_out,sysval.P_in, sysval.temp);
    1528:	40 91 52 10 	lds	r20, 0x1052	; 0x801052 <sysval+0x93>
    152c:	20 91 3b 10 	lds	r18, 0x103B	; 0x80103b <sysval+0x7c>
    1530:	30 91 3c 10 	lds	r19, 0x103C	; 0x80103c <sysval+0x7d>
    1534:	80 91 3d 10 	lds	r24, 0x103D	; 0x80103d <sysval+0x7e>
    1538:	90 91 3e 10 	lds	r25, 0x103E	; 0x80103e <sysval+0x7f>
    153c:	1f 92       	push	r1
    153e:	4f 93       	push	r20
    1540:	3f 93       	push	r19
    1542:	2f 93       	push	r18
    1544:	9f 93       	push	r25
    1546:	8f 93       	push	r24
    1548:	8c e3       	ldi	r24, 0x3C	; 60
    154a:	93 e0       	ldi	r25, 0x03	; 3
    154c:	9f 93       	push	r25
    154e:	8f 93       	push	r24
    1550:	81 2f       	mov	r24, r17
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	86 54       	subi	r24, 0x46	; 70
    1556:	93 4f       	sbci	r25, 0xF3	; 243
    1558:	9f 93       	push	r25
    155a:	8f 93       	push	r24
    155c:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    1560:	18 0f       	add	r17, r24
                  ((tmp_ledstate&0x10)==0x10), // LED_CHARGING
                  ((tmp_ledstate&0x20)==0x20), // LED_100PERCENT
                  ((tmp_ledstate&0x40)==0x40), // LED_60PERCENT
                  ((tmp_ledstate&0x80)==0x80), // LED_30PERCENT
                  ((tmp_ledstate&0x08)==0x08), // LED_SHORTFAULT (FIXME: what if it is blinking?)
                  sysval.payled_mode);
    1562:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <sysval+0x9c>
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.Vpv);
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.I_load);
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.I_charge);

    len+=sprintf(&UART_SIM_TxBuf[len],"%d;%d;%d;", sysval.P_out,sysval.P_in, sysval.temp);
    len+=sprintf_P(&UART_SIM_TxBuf[len],PM_SOCstr2,sysval.ydayl,
    1566:	20 91 c9 0f 	lds	r18, 0x0FC9	; 0x800fc9 <sysval+0xa>
    156a:	30 91 ca 0f 	lds	r19, 0x0FCA	; 0x800fca <sysval+0xb>
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	1f 92       	push	r1
    157a:	8f 93       	push	r24
    157c:	03 fb       	bst	r16, 3
    157e:	88 27       	eor	r24, r24
    1580:	80 f9       	bld	r24, 0
    1582:	1f 92       	push	r1
    1584:	8f 93       	push	r24
    1586:	80 2f       	mov	r24, r16
    1588:	00 2e       	mov	r0, r16
    158a:	00 0c       	add	r0, r0
    158c:	99 0b       	sbc	r25, r25
    158e:	89 2f       	mov	r24, r25
    1590:	88 1f       	adc	r24, r24
    1592:	88 27       	eor	r24, r24
    1594:	88 1f       	adc	r24, r24
    1596:	1f 92       	push	r1
    1598:	8f 93       	push	r24
    159a:	06 fb       	bst	r16, 6
    159c:	88 27       	eor	r24, r24
    159e:	80 f9       	bld	r24, 0
    15a0:	1f 92       	push	r1
    15a2:	8f 93       	push	r24
    15a4:	05 fb       	bst	r16, 5
    15a6:	88 27       	eor	r24, r24
    15a8:	80 f9       	bld	r24, 0
    15aa:	1f 92       	push	r1
    15ac:	8f 93       	push	r24
    15ae:	04 fb       	bst	r16, 4
    15b0:	88 27       	eor	r24, r24
    15b2:	80 f9       	bld	r24, 0
    15b4:	1f 92       	push	r1
    15b6:	8f 93       	push	r24
    15b8:	3f 93       	push	r19
    15ba:	2f 93       	push	r18
    15bc:	86 e9       	ldi	r24, 0x96	; 150
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	9f 93       	push	r25
    15c2:	8f 93       	push	r24
    15c4:	81 2f       	mov	r24, r17
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	86 54       	subi	r24, 0x46	; 70
    15ca:	93 4f       	sbci	r25, 0xF3	; 243
    15cc:	9f 93       	push	r25
    15ce:	8f 93       	push	r24
    15d0:	0e 94 39 2c 	call	0x5872	; 0x5872 <sprintf_P>
    15d4:	18 0f       	add	r17, r24
                  ((tmp_ledstate&0x20)==0x20), // LED_100PERCENT
                  ((tmp_ledstate&0x40)==0x40), // LED_60PERCENT
                  ((tmp_ledstate&0x80)==0x80), // LED_30PERCENT
                  ((tmp_ledstate&0x08)==0x08), // LED_SHORTFAULT (FIXME: what if it is blinking?)
                  sysval.payled_mode);
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;", sim_read_signalstrength());
    15d6:	0e 94 cb 1b 	call	0x3796	; 0x3796 <sim_read_signalstrength>
    15da:	9f 93       	push	r25
    15dc:	8f 93       	push	r24
    15de:	ff 92       	push	r15
    15e0:	ef 92       	push	r14
    15e2:	81 2f       	mov	r24, r17
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	86 54       	subi	r24, 0x46	; 70
    15e8:	93 4f       	sbci	r25, 0xF3	; 243
    15ea:	9f 93       	push	r25
    15ec:	8f 93       	push	r24
    15ee:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    15f2:	18 0f       	add	r17, r24

    // I_load channels from each SCC:
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.scc_icharge[0]);//sysval.scc_iload[0]);
    15f4:	80 91 03 10 	lds	r24, 0x1003	; 0x801003 <sysval+0x44>
    15f8:	90 91 04 10 	lds	r25, 0x1004	; 0x801004 <sysval+0x45>
    15fc:	9f 93       	push	r25
    15fe:	8f 93       	push	r24
    1600:	ff 92       	push	r15
    1602:	ef 92       	push	r14
    1604:	81 2f       	mov	r24, r17
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	86 54       	subi	r24, 0x46	; 70
    160a:	93 4f       	sbci	r25, 0xF3	; 243
    160c:	9f 93       	push	r25
    160e:	8f 93       	push	r24
    1610:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    1614:	18 0f       	add	r17, r24
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.scc_icharge[1]);//sysval.scc_iload[1]);
    1616:	80 91 05 10 	lds	r24, 0x1005	; 0x801005 <sysval+0x46>
    161a:	90 91 06 10 	lds	r25, 0x1006	; 0x801006 <sysval+0x47>
    161e:	9f 93       	push	r25
    1620:	8f 93       	push	r24
    1622:	ff 92       	push	r15
    1624:	ef 92       	push	r14
    1626:	81 2f       	mov	r24, r17
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	86 54       	subi	r24, 0x46	; 70
    162c:	93 4f       	sbci	r25, 0xF3	; 243
    162e:	9f 93       	push	r25
    1630:	8f 93       	push	r24
    1632:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    1636:	18 0f       	add	r17, r24
    len+=sprintf(&UART_SIM_TxBuf[len],"%d;",sysval.scc_icharge[2]);//sysval.scc_iload[2]);
    1638:	80 91 07 10 	lds	r24, 0x1007	; 0x801007 <sysval+0x48>
    163c:	90 91 08 10 	lds	r25, 0x1008	; 0x801008 <sysval+0x49>
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	9f 93       	push	r25
    164c:	8f 93       	push	r24
    164e:	ff 92       	push	r15
    1650:	ef 92       	push	r14
    1652:	81 2f       	mov	r24, r17
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	86 54       	subi	r24, 0x46	; 70
    1658:	93 4f       	sbci	r25, 0xF3	; 243
    165a:	9f 93       	push	r25
    165c:	8f 93       	push	r24
    165e:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    1662:	18 0f       	add	r17, r24

    // Quota:
    if(sysval.Ws_quota_enabled) {
    1664:	80 91 4b 10 	lds	r24, 0x104B	; 0x80104b <sysval+0x8c>
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	88 23       	and	r24, r24
    1676:	09 f4       	brne	.+2      	; 0x167a <prepare_data_message+0x48e>
    1678:	46 c0       	rjmp	.+140    	; 0x1706 <prepare_data_message+0x51a>
        uint32_t tmp32 = eeprom_read_dword(&EEPROM_ADDR_Ws_quota);
    167a:	88 ef       	ldi	r24, 0xF8	; 248
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 78 32 	call	0x64f0	; 0x64f0 <eeprom_read_dword>
        len+=sprintf(&UART_SIM_TxBuf[len],"%lu;",tmp32/3600);
    1682:	0f 2e       	mov	r0, r31
    1684:	f0 e1       	ldi	r31, 0x10	; 16
    1686:	8f 2e       	mov	r8, r31
    1688:	fe e0       	ldi	r31, 0x0E	; 14
    168a:	9f 2e       	mov	r9, r31
    168c:	a1 2c       	mov	r10, r1
    168e:	b1 2c       	mov	r11, r1
    1690:	f0 2d       	mov	r31, r0
    1692:	a5 01       	movw	r20, r10
    1694:	94 01       	movw	r18, r8
    1696:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    169a:	5f 93       	push	r21
    169c:	4f 93       	push	r20
    169e:	3f 93       	push	r19
    16a0:	2f 93       	push	r18
    16a2:	0f 2e       	mov	r0, r31
    16a4:	f6 e4       	ldi	r31, 0x46	; 70
    16a6:	ef 2e       	mov	r14, r31
    16a8:	f3 e0       	ldi	r31, 0x03	; 3
    16aa:	ff 2e       	mov	r15, r31
    16ac:	f0 2d       	mov	r31, r0
    16ae:	ff 92       	push	r15
    16b0:	ef 92       	push	r14
    16b2:	81 2f       	mov	r24, r17
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	86 54       	subi	r24, 0x46	; 70
    16b8:	93 4f       	sbci	r25, 0xF3	; 243
    16ba:	9f 93       	push	r25
    16bc:	8f 93       	push	r24
    16be:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    16c2:	18 0f       	add	r17, r24
        len+=sprintf(&UART_SIM_TxBuf[len],"%lu;",sysval.Ws_quota/3600);
    16c4:	60 91 47 10 	lds	r22, 0x1047	; 0x801047 <sysval+0x88>
    16c8:	70 91 48 10 	lds	r23, 0x1048	; 0x801048 <sysval+0x89>
    16cc:	80 91 49 10 	lds	r24, 0x1049	; 0x801049 <sysval+0x8a>
    16d0:	90 91 4a 10 	lds	r25, 0x104A	; 0x80104a <sysval+0x8b>
    16d4:	a5 01       	movw	r20, r10
    16d6:	94 01       	movw	r18, r8
    16d8:	0e 94 9a 2a 	call	0x5534	; 0x5534 <__divmodsi4>
    16dc:	5f 93       	push	r21
    16de:	4f 93       	push	r20
    16e0:	3f 93       	push	r19
    16e2:	2f 93       	push	r18
    16e4:	ff 92       	push	r15
    16e6:	ef 92       	push	r14
    16e8:	81 2f       	mov	r24, r17
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	86 54       	subi	r24, 0x46	; 70
    16ee:	93 4f       	sbci	r25, 0xF3	; 243
    16f0:	9f 93       	push	r25
    16f2:	8f 93       	push	r24
    16f4:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    16f8:	18 0f       	add	r17, r24
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	0c c0       	rjmp	.+24     	; 0x171e <prepare_data_message+0x532>
    } else {
        len+=sprintf(&UART_SIM_TxBuf[len],"0;0;");
    1706:	a1 2f       	mov	r26, r17
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	a6 54       	subi	r26, 0x46	; 70
    170c:	b3 4f       	sbci	r27, 0xF3	; 243
    170e:	85 e0       	ldi	r24, 0x05	; 5
    1710:	eb e4       	ldi	r30, 0x4B	; 75
    1712:	f3 e0       	ldi	r31, 0x03	; 3
    1714:	01 90       	ld	r0, Z+
    1716:	0d 92       	st	X+, r0
    1718:	8a 95       	dec	r24
    171a:	e1 f7       	brne	.-8      	; 0x1714 <prepare_data_message+0x528>
    171c:	1c 5f       	subi	r17, 0xFC	; 252
    }
	
//#ifdef LEONS_SHS
//    printf("%s\n",&UART_SIM_TxBuf[*sms_start_offset]); // strip off: hostname    
//#else
    printf("%s\n\r",UART_SIM_TxBuf);	
    171e:	8a eb       	ldi	r24, 0xBA	; 186
    1720:	9c e0       	ldi	r25, 0x0C	; 12
    1722:	9f 93       	push	r25
    1724:	8f 93       	push	r24
    1726:	80 e5       	ldi	r24, 0x50	; 80
    1728:	93 e0       	ldi	r25, 0x03	; 3
    172a:	9f 93       	push	r25
    172c:	8f 93       	push	r24
    172e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
//#endif 
    return len;
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
}
    173a:	81 2f       	mov	r24, r17
    173c:	cf 5b       	subi	r28, 0xBF	; 191
    173e:	df 4f       	sbci	r29, 0xFF	; 255
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	de bf       	out	0x3e, r29	; 62
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	cd bf       	out	0x3d, r28	; 61
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	cf 90       	pop	r12
    175a:	bf 90       	pop	r11
    175c:	af 90       	pop	r10
    175e:	9f 90       	pop	r9
    1760:	8f 90       	pop	r8
    1762:	7f 90       	pop	r7
    1764:	6f 90       	pop	r6
    1766:	5f 90       	pop	r5
    1768:	4f 90       	pop	r4
    176a:	3f 90       	pop	r3
    176c:	2f 90       	pop	r2
    176e:	08 95       	ret

00001770 <send_2g_message>:

int8_t send_2g_message(const char *msg, const uint8_t size)
{
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	7c 01       	movw	r14, r24
    177c:	06 2f       	mov	r16, r22
    int8_t state;
    uint8_t retries;
    uint8_t errorstatus;

    retries=0;
    177e:	c0 e0       	ldi	r28, 0x00	; 0
    state=0;
    errorstatus=0;
    while(state != 4 && retries<4) {
        state=sim_start_2g();
    1780:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <sim_start_2g>
        if(state<0) retries++;
    1784:	88 23       	and	r24, r24
    1786:	0c f4       	brge	.+2      	; 0x178a <send_2g_message+0x1a>
    1788:	cf 5f       	subi	r28, 0xFF	; 255
    uint8_t errorstatus;

    retries=0;
    state=0;
    errorstatus=0;
    while(state != 4 && retries<4) {
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	a1 f0       	breq	.+40     	; 0x17b6 <send_2g_message+0x46>
    178e:	c4 30       	cpi	r28, 0x04	; 4
    1790:	b8 f3       	brcs	.-18     	; 0x1780 <send_2g_message+0x10>
        state=sim_start_2g();
        if(state<0) retries++;
    }
    if(retries>3) {
        errorstatus=1;
    1792:	11 e0       	ldi	r17, 0x01	; 1
    1794:	15 c0       	rjmp	.+42     	; 0x17c0 <send_2g_message+0x50>
    } else {
        // now we have a 2G connection!
        retries=0;
        while(retries<4) {
            if(sim_send_2g_msg(msg,size) != 0)
    1796:	b8 01       	movw	r22, r16
    1798:	c7 01       	movw	r24, r14
    179a:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <sim_send_2g_msg>
    179e:	88 23       	and	r24, r24
    17a0:	19 f0       	breq	.+6      	; 0x17a8 <send_2g_message+0x38>
                retries++;
    17a2:	cf 5f       	subi	r28, 0xFF	; 255
    if(retries>3) {
        errorstatus=1;
    } else {
        // now we have a 2G connection!
        retries=0;
        while(retries<4) {
    17a4:	c4 30       	cpi	r28, 0x04	; 4
    17a6:	b9 f7       	brne	.-18     	; 0x1796 <send_2g_message+0x26>
    while(state != 4 && retries<4) {
        state=sim_start_2g();
        if(state<0) retries++;
    }
    if(retries>3) {
        errorstatus=1;
    17a8:	11 e0       	ldi	r17, 0x01	; 1
    17aa:	c4 30       	cpi	r28, 0x04	; 4
    17ac:	48 f4       	brcc	.+18     	; 0x17c0 <send_2g_message+0x50>
    17ae:	10 e0       	ldi	r17, 0x00	; 0
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <send_2g_message+0x50>
    17b2:	11 e0       	ldi	r17, 0x01	; 1
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <send_2g_message+0x50>
    errorstatus=0;
    while(state != 4 && retries<4) {
        state=sim_start_2g();
        if(state<0) retries++;
    }
    if(retries>3) {
    17b6:	c4 30       	cpi	r28, 0x04	; 4
    17b8:	e0 f7       	brcc	.-8      	; 0x17b2 <send_2g_message+0x42>
    17ba:	c0 e0       	ldi	r28, 0x00	; 0
        errorstatus=1;
    } else {
        // now we have a 2G connection!
        retries=0;
        while(retries<4) {
            if(sim_send_2g_msg(msg,size) != 0)
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	eb cf       	rjmp	.-42     	; 0x1796 <send_2g_message+0x26>
            else
                break;
        }
        if(retries>3) errorstatus=1;
    }
    sim_stop_2g();
    17c0:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <sim_stop_2g>
    return errorstatus;
}
    17c4:	81 2f       	mov	r24, r17
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	08 95       	ret

000017d2 <write_operator_phonenr_to_eeprom>:

void write_operator_phonenr_to_eeprom(const int idx, const char *phonenr_ptr)
{
    17d2:	cf 93       	push	r28
    uint8_t sreg;
    int len = strlen(phonenr_ptr);
    17d4:	fb 01       	movw	r30, r22
    17d6:	01 90       	ld	r0, Z+
    17d8:	00 20       	and	r0, r0
    17da:	e9 f7       	brne	.-6      	; 0x17d6 <write_operator_phonenr_to_eeprom+0x4>
    17dc:	31 97       	sbiw	r30, 0x01	; 1
    17de:	e6 1b       	sub	r30, r22
    17e0:	f7 0b       	sbc	r31, r23
    if(idx < MAX_NR_OPERATORS-1) { // MAX_NR_OPERATORS-1 is reserved: read only
    17e2:	86 30       	cpi	r24, 0x06	; 6
    17e4:	91 05       	cpc	r25, r1
    17e6:	ac f4       	brge	.+42     	; 0x1812 <write_operator_phonenr_to_eeprom+0x40>
        if(len<MAX_PHONE_NR_LENGTH) {
    17e8:	e4 31       	cpi	r30, 0x14	; 20
    17ea:	f1 05       	cpc	r31, r1
    17ec:	94 f4       	brge	.+36     	; 0x1812 <write_operator_phonenr_to_eeprom+0x40>
    17ee:	9b 01       	movw	r18, r22
            sreg=SREG; cli();
    17f0:	cf b7       	in	r28, 0x3f	; 63
    17f2:	f8 94       	cli
            eeprom_update_block(phonenr_ptr,&EEPROM_ADDR_OperatorNr[idx],len+1);
    17f4:	af 01       	movw	r20, r30
    17f6:	4f 5f       	subi	r20, 0xFF	; 255
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	e4 e1       	ldi	r30, 0x14	; 20
    17fc:	e8 9f       	mul	r30, r24
    17fe:	b0 01       	movw	r22, r0
    1800:	e9 9f       	mul	r30, r25
    1802:	70 0d       	add	r23, r0
    1804:	11 24       	eor	r1, r1
    1806:	67 5a       	subi	r22, 0xA7	; 167
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	c9 01       	movw	r24, r18
    180c:	0e 94 82 32 	call	0x6504	; 0x6504 <eeprom_update_block>
            SREG=sreg;
    1810:	cf bf       	out	0x3f, r28	; 63
        }
    }
}
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <startup_sim900>:

void startup_sim900(int8_t do_delete)
{
    1816:	6f 92       	push	r6
    1818:	7f 92       	push	r7
    181a:	8f 92       	push	r8
    181c:	9f 92       	push	r9
    181e:	af 92       	push	r10
    1820:	bf 92       	push	r11
    1822:	cf 92       	push	r12
    1824:	df 92       	push	r13
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	c0 54       	subi	r28, 0x40	; 64
    1838:	d1 09       	sbc	r29, r1
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	68 2e       	mov	r6, r24
    uint8_t tmp8;
    char sim_rxbuf[64];
    char *ptr=NULL;

    // turn off anyways (could be in undefined state)
    if(sim_is_on()) {
    1846:	0e 94 6f 17 	call	0x2ede	; 0x2ede <sim_is_on>
    184a:	88 23       	and	r24, r24
    184c:	09 f4       	brne	.+2      	; 0x1850 <startup_sim900+0x3a>
    184e:	49 c0       	rjmp	.+146    	; 0x18e2 <startup_sim900+0xcc>
        sim_onoff_pulse();
    1850:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <sim_onoff_pulse>
    1854:	46 c0       	rjmp	.+140    	; 0x18e2 <startup_sim900+0xcc>
    }

    tmp8=3;
    while(tmp8) {
        wdt_reset();
    1856:	a8 95       	wdr
        delay_ms(500);
    1858:	60 e7       	ldi	r22, 0x70	; 112
    185a:	7e e5       	ldi	r23, 0x5E	; 94
    185c:	89 e0       	ldi	r24, 0x09	; 9
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
        wdt_reset();
    1864:	a8 95       	wdr
        if(!sim_is_on()) {
    1866:	0e 94 6f 17 	call	0x2ede	; 0x2ede <sim_is_on>
    186a:	81 11       	cpse	r24, r1
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <startup_sim900+0x5c>
            sim_onoff_pulse();
    186e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <sim_onoff_pulse>
        }
        sim_set_textmode();
    1872:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <sim_set_textmode>
        if(do_delete) { sim_delete_all_sms(); }
    1876:	61 10       	cpse	r6, r1
    1878:	0e 94 26 1b 	call	0x364c	; 0x364c <sim_delete_all_sms>
        sim_set_flowcontrol();
    187c:	0e 94 97 20 	call	0x412e	; 0x412e <sim_set_flowcontrol>
        ptr = sim_read_IMEI(sim_rxbuf, sizeof(sim_rxbuf));
    1880:	60 e4       	ldi	r22, 0x40	; 64
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	ce 01       	movw	r24, r28
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <sim_read_IMEI>
    188c:	8c 01       	movw	r16, r24
        printf("IMEI=%s\n",ptr);
    188e:	1f 93       	push	r17
    1890:	8f 93       	push	r24
    1892:	df 92       	push	r13
    1894:	cf 92       	push	r12
    1896:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
        printf("Pincheck=%s\n",(sim_pincode_check() ? "OK" : "FAIL"));
    189a:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <sim_pincode_check>
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	81 11       	cpse	r24, r1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <startup_sim900+0x9a>
    18aa:	8a 2d       	mov	r24, r10
    18ac:	9b 2d       	mov	r25, r11
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <startup_sim900+0x9e>
    18b0:	88 2d       	mov	r24, r8
    18b2:	99 2d       	mov	r25, r9
    18b4:	9f 93       	push	r25
    18b6:	8f 93       	push	r24
    18b8:	ff 92       	push	r15
    18ba:	ef 92       	push	r14
    18bc:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>

        if(ptr!=NULL) break;
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	01 2b       	or	r16, r17
    18ca:	19 f4       	brne	.+6      	; 0x18d2 <startup_sim900+0xbc>
    18cc:	7a 94       	dec	r7
    if(sim_is_on()) {
        sim_onoff_pulse();
    }

    tmp8=3;
    while(tmp8) {
    18ce:	71 10       	cpse	r7, r1
    18d0:	c2 cf       	rjmp	.-124    	; 0x1856 <startup_sim900+0x40>

        if(ptr!=NULL) break;
        tmp8--;
    }
	
	if(sim_has_bluetooth()) {
    18d2:	0e 94 2b 21 	call	0x4256	; 0x4256 <sim_has_bluetooth>
    18d6:	88 23       	and	r24, r24
    18d8:	09 f1       	breq	.+66     	; 0x191c <startup_sim900+0x106>
		sysval.has_bluetooth=1;	
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	80 93 5f 10 	sts	0x105F, r24	; 0x80105f <sysval+0xa0>
	}
}
    18e0:	1d c0       	rjmp	.+58     	; 0x191c <startup_sim900+0x106>
        }
    }
}

void startup_sim900(int8_t do_delete)
{
    18e2:	0f 2e       	mov	r0, r31
    18e4:	f3 e0       	ldi	r31, 0x03	; 3
    18e6:	7f 2e       	mov	r7, r31
    18e8:	f0 2d       	mov	r31, r0
        }
        sim_set_textmode();
        if(do_delete) { sim_delete_all_sms(); }
        sim_set_flowcontrol();
        ptr = sim_read_IMEI(sim_rxbuf, sizeof(sim_rxbuf));
        printf("IMEI=%s\n",ptr);
    18ea:	0f 2e       	mov	r0, r31
    18ec:	fa e5       	ldi	r31, 0x5A	; 90
    18ee:	cf 2e       	mov	r12, r31
    18f0:	f3 e0       	ldi	r31, 0x03	; 3
    18f2:	df 2e       	mov	r13, r31
    18f4:	f0 2d       	mov	r31, r0
        printf("Pincheck=%s\n",(sim_pincode_check() ? "OK" : "FAIL"));
    18f6:	0f 2e       	mov	r0, r31
    18f8:	f9 e8       	ldi	r31, 0x89	; 137
    18fa:	8f 2e       	mov	r8, r31
    18fc:	f1 e0       	ldi	r31, 0x01	; 1
    18fe:	9f 2e       	mov	r9, r31
    1900:	f0 2d       	mov	r31, r0
    1902:	0f 2e       	mov	r0, r31
    1904:	f5 e5       	ldi	r31, 0x55	; 85
    1906:	af 2e       	mov	r10, r31
    1908:	f3 e0       	ldi	r31, 0x03	; 3
    190a:	bf 2e       	mov	r11, r31
    190c:	f0 2d       	mov	r31, r0
    190e:	0f 2e       	mov	r0, r31
    1910:	f3 e6       	ldi	r31, 0x63	; 99
    1912:	ef 2e       	mov	r14, r31
    1914:	f3 e0       	ldi	r31, 0x03	; 3
    1916:	ff 2e       	mov	r15, r31
    1918:	f0 2d       	mov	r31, r0
    191a:	9d cf       	rjmp	.-198    	; 0x1856 <startup_sim900+0x40>
    }
	
	if(sim_has_bluetooth()) {
		sysval.has_bluetooth=1;	
	}
}
    191c:	c0 5c       	subi	r28, 0xC0	; 192
    191e:	df 4f       	sbci	r29, 0xFF	; 255
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	ff 90       	pop	r15
    1934:	ef 90       	pop	r14
    1936:	df 90       	pop	r13
    1938:	cf 90       	pop	r12
    193a:	bf 90       	pop	r11
    193c:	af 90       	pop	r10
    193e:	9f 90       	pop	r9
    1940:	8f 90       	pop	r8
    1942:	7f 90       	pop	r7
    1944:	6f 90       	pop	r6
    1946:	08 95       	ret

00001948 <run_tasks>:
    TIMSK0 |= (1<<OCIE0A); //Enable output compare interrupt.
    TCCR0B |= MS_TICK_PS_VAL;
}

void run_tasks(void)
{
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	a1 97       	sbiw	r28, 0x21	; 33
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    uint8_t sreg;
    uint16_t tasklist;
    uint8_t dosms,sms_start_offset;
    sreg=SREG; cli(); // atomic read
    1964:	8f b7       	in	r24, 0x3f	; 63
    1966:	f8 94       	cli
    tasklist=sysval.tasklist;
    1968:	ef eb       	ldi	r30, 0xBF	; 191
    196a:	ff e0       	ldi	r31, 0x0F	; 15
    196c:	04 85       	ldd	r16, Z+12	; 0x0c
    196e:	15 85       	ldd	r17, Z+13	; 0x0d
    sysval.tasklist=0;
    1970:	15 86       	std	Z+13, r1	; 0x0d
    1972:	14 86       	std	Z+12, r1	; 0x0c
    SREG=sreg; // sei()
    1974:	8f bf       	out	0x3f, r24	; 63

    /* Do all pending tasks now: */

    if(tasklist & (1<<TASK_SECOND)) {
    1976:	00 ff       	sbrs	r16, 0
    1978:	46 c1       	rjmp	.+652    	; 0x1c06 <run_tasks+0x2be>
		//printf("---TASK_SECOND---\n");
        task_every_second();
    197a:	0e 94 9b 24 	call	0x4936	; 0x4936 <task_every_second>
		if(sysval.has_bluetooth) {
    197e:	80 91 5f 10 	lds	r24, 0x105F	; 0x80105f <sysval+0xa0>
    1982:	88 23       	and	r24, r24
    1984:	09 f4       	brne	.+2      	; 0x1988 <run_tasks+0x40>
    1986:	3f c1       	rjmp	.+638    	; 0x1c06 <run_tasks+0x2be>
			if(sysval.bluetooth_connected) {
    1988:	80 91 60 10 	lds	r24, 0x1060	; 0x801060 <sysval+0xa1>
    198c:	88 23       	and	r24, r24
    198e:	09 f4       	brne	.+2      	; 0x1992 <run_tasks+0x4a>
    1990:	3a c1       	rjmp	.+628    	; 0x1c06 <run_tasks+0x2be>
				char btbuf[32];
				char *btbuf_ptr=sim_bluetooth_read(btbuf, sizeof(btbuf));
    1992:	60 e2       	ldi	r22, 0x20	; 32
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	ce 01       	movw	r24, r28
    1998:	02 96       	adiw	r24, 0x02	; 2
    199a:	0e 94 0e 23 	call	0x461c	; 0x461c <sim_bluetooth_read>
    199e:	7c 01       	movw	r14, r24
				if(btbuf_ptr != NULL) {
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <run_tasks+0x5e>
    19a4:	30 c1       	rjmp	.+608    	; 0x1c06 <run_tasks+0x2be>
					uint16_t bt_len=0;
					printf("Bluetooth message received:%s\n",btbuf_ptr);
    19a6:	ff 92       	push	r15
    19a8:	8f 93       	push	r24
    19aa:	80 e7       	ldi	r24, 0x70	; 112
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	9f 93       	push	r25
    19b0:	8f 93       	push	r24
    19b2:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
					if(strncasecmp(btbuf_ptr,"SCC?",4)==0) {
    19b6:	44 e0       	ldi	r20, 0x04	; 4
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	6f e8       	ldi	r22, 0x8F	; 143
    19bc:	73 e0       	ldi	r23, 0x03	; 3
    19be:	c7 01       	movw	r24, r14
    19c0:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	89 2b       	or	r24, r25
    19ce:	39 f4       	brne	.+14     	; 0x19de <run_tasks+0x96>
						bt_len=scc_monitor_dump(UART_SIM_TxBuf,0);
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	8a eb       	ldi	r24, 0xBA	; 186
    19d6:	9c e0       	ldi	r25, 0x0C	; 12
    19d8:	0e 94 15 03 	call	0x62a	; 0x62a <scc_monitor_dump>
    19dc:	0f c1       	rjmp	.+542    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"SCCD?",5)==0) {
    19de:	45 e0       	ldi	r20, 0x05	; 5
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	64 e9       	ldi	r22, 0x94	; 148
    19e4:	73 e0       	ldi	r23, 0x03	; 3
    19e6:	c7 01       	movw	r24, r14
    19e8:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    19ec:	89 2b       	or	r24, r25
    19ee:	39 f4       	brne	.+14     	; 0x19fe <run_tasks+0xb6>
					    bt_len=scc_monitor_dump(UART_SIM_TxBuf,1);
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	8a eb       	ldi	r24, 0xBA	; 186
    19f6:	9c e0       	ldi	r25, 0x0C	; 12
    19f8:	0e 94 15 03 	call	0x62a	; 0x62a <scc_monitor_dump>
    19fc:	ff c0       	rjmp	.+510    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"SOC?",4)==0) {
    19fe:	44 e0       	ldi	r20, 0x04	; 4
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	6a e3       	ldi	r22, 0x3A	; 58
    1a04:	75 e0       	ldi	r23, 0x05	; 5
    1a06:	c7 01       	movw	r24, r14
    1a08:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    1a0c:	89 2b       	or	r24, r25
    1a0e:	29 f4       	brne	.+10     	; 0x1a1a <run_tasks+0xd2>
					    bt_len=task_soc_dump(UART_SIM_TxBuf);
    1a10:	8a eb       	ldi	r24, 0xBA	; 186
    1a12:	9c e0       	ldi	r25, 0x0C	; 12
    1a14:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <task_soc_dump>
    1a18:	f1 c0       	rjmp	.+482    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"LOAD=",5)==0) { // expect: 0 or 1
    1a1a:	45 e0       	ldi	r20, 0x05	; 5
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	6a e9       	ldi	r22, 0x9A	; 154
    1a20:	73 e0       	ldi	r23, 0x03	; 3
    1a22:	c7 01       	movw	r24, r14
    1a24:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    1a28:	89 2b       	or	r24, r25
    1a2a:	a1 f4       	brne	.+40     	; 0x1a54 <run_tasks+0x10c>
					    char *ptr=&btbuf_ptr[5];
					    btbuf_ptr[6]=0;
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	16 82       	std	Z+6, r1	; 0x06
					    task_set_load(atoi(ptr));
    1a30:	c7 01       	movw	r24, r14
    1a32:	05 96       	adiw	r24, 0x05	; 5
    1a34:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
    1a38:	0e 94 87 28 	call	0x510e	; 0x510e <task_set_load>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"setting load\r\n");
    1a3c:	8f e0       	ldi	r24, 0x0F	; 15
    1a3e:	e0 ea       	ldi	r30, 0xA0	; 160
    1a40:	f3 e0       	ldi	r31, 0x03	; 3
    1a42:	aa eb       	ldi	r26, 0xBA	; 186
    1a44:	bc e0       	ldi	r27, 0x0C	; 12
    1a46:	01 90       	ld	r0, Z+
    1a48:	0d 92       	st	X+, r0
    1a4a:	8a 95       	dec	r24
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <run_tasks+0xfe>
    1a4e:	8e e0       	ldi	r24, 0x0E	; 14
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	d4 c0       	rjmp	.+424    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"TEMP=",5)==0) { // expect: number
    1a54:	45 e0       	ldi	r20, 0x05	; 5
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	6f ea       	ldi	r22, 0xAF	; 175
    1a5a:	73 e0       	ldi	r23, 0x03	; 3
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    1a62:	89 2b       	or	r24, r25
    1a64:	a1 f4       	brne	.+40     	; 0x1a8e <run_tasks+0x146>
					    char *ptr=&btbuf_ptr[5];
					    btbuf_ptr[7]=0;
    1a66:	f7 01       	movw	r30, r14
    1a68:	17 82       	std	Z+7, r1	; 0x07
					    task_cal_temp(atoi(ptr));
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	05 96       	adiw	r24, 0x05	; 5
    1a6e:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
    1a72:	0e 94 8a 28 	call	0x5114	; 0x5114 <task_cal_temp>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"calibrate temp\r\n");
    1a76:	81 e1       	ldi	r24, 0x11	; 17
    1a78:	e5 eb       	ldi	r30, 0xB5	; 181
    1a7a:	f3 e0       	ldi	r31, 0x03	; 3
    1a7c:	aa eb       	ldi	r26, 0xBA	; 186
    1a7e:	bc e0       	ldi	r27, 0x0C	; 12
    1a80:	01 90       	ld	r0, Z+
    1a82:	0d 92       	st	X+, r0
    1a84:	8a 95       	dec	r24
    1a86:	e1 f7       	brne	.-8      	; 0x1a80 <run_tasks+0x138>
    1a88:	80 e1       	ldi	r24, 0x10	; 16
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	b7 c0       	rjmp	.+366    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"BATO=",5)==0) { // expect: number
    1a8e:	45 e0       	ldi	r20, 0x05	; 5
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	66 ec       	ldi	r22, 0xC6	; 198
    1a94:	73 e0       	ldi	r23, 0x03	; 3
    1a96:	c7 01       	movw	r24, r14
    1a98:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    1a9c:	89 2b       	or	r24, r25
    1a9e:	a1 f4       	brne	.+40     	; 0x1ac8 <run_tasks+0x180>
					    char *ptr=&btbuf_ptr[5];
					    btbuf_ptr[7]=0;
    1aa0:	f7 01       	movw	r30, r14
    1aa2:	17 82       	std	Z+7, r1	; 0x07
					    task_cal_batt(atoi(ptr));
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	05 96       	adiw	r24, 0x05	; 5
    1aa8:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
    1aac:	0e 94 8d 28 	call	0x511a	; 0x511a <task_cal_batt>
					    bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"calibrate batt Ah offset\r\n");
    1ab0:	8b e1       	ldi	r24, 0x1B	; 27
    1ab2:	ec ec       	ldi	r30, 0xCC	; 204
    1ab4:	f3 e0       	ldi	r31, 0x03	; 3
    1ab6:	aa eb       	ldi	r26, 0xBA	; 186
    1ab8:	bc e0       	ldi	r27, 0x0C	; 12
    1aba:	01 90       	ld	r0, Z+
    1abc:	0d 92       	st	X+, r0
    1abe:	8a 95       	dec	r24
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <run_tasks+0x172>
    1ac2:	8a e1       	ldi	r24, 0x1A	; 26
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9a c0       	rjmp	.+308    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"AH=",3)==0) { // expect: number
    1ac8:	43 e0       	ldi	r20, 0x03	; 3
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	67 ee       	ldi	r22, 0xE7	; 231
    1ace:	73 e0       	ldi	r23, 0x03	; 3
    1ad0:	c7 01       	movw	r24, r14
    1ad2:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    1ad6:	89 2b       	or	r24, r25
    1ad8:	a1 f4       	brne	.+40     	; 0x1b02 <run_tasks+0x1ba>
					    char *ptr=&btbuf_ptr[3];
					    btbuf_ptr[6]=0;
    1ada:	f7 01       	movw	r30, r14
    1adc:	16 82       	std	Z+6, r1	; 0x06
					    task_set_ah_batt(atoi(ptr));
    1ade:	c7 01       	movw	r24, r14
    1ae0:	03 96       	adiw	r24, 0x03	; 3
    1ae2:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
    1ae6:	0e 94 90 28 	call	0x5120	; 0x5120 <task_set_ah_batt>
					    bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"set batt Ah\r\n");
    1aea:	8e e0       	ldi	r24, 0x0E	; 14
    1aec:	eb ee       	ldi	r30, 0xEB	; 235
    1aee:	f3 e0       	ldi	r31, 0x03	; 3
    1af0:	aa eb       	ldi	r26, 0xBA	; 186
    1af2:	bc e0       	ldi	r27, 0x0C	; 12
    1af4:	01 90       	ld	r0, Z+
    1af6:	0d 92       	st	X+, r0
    1af8:	8a 95       	dec	r24
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <run_tasks+0x1ac>
    1afc:	8d e0       	ldi	r24, 0x0D	; 13
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	7d c0       	rjmp	.+250    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"RUNEQ",5)==0) {
    1b02:	45 e0       	ldi	r20, 0x05	; 5
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	69 ef       	ldi	r22, 0xF9	; 249
    1b08:	73 e0       	ldi	r23, 0x03	; 3
    1b0a:	c7 01       	movw	r24, r14
    1b0c:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    1b10:	89 2b       	or	r24, r25
    1b12:	71 f4       	brne	.+28     	; 0x1b30 <run_tasks+0x1e8>
					    task_start_equalize();
    1b14:	0e 94 93 28 	call	0x5126	; 0x5126 <task_start_equalize>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"Start equalizing\r\n");				
    1b18:	83 e1       	ldi	r24, 0x13	; 19
    1b1a:	ef ef       	ldi	r30, 0xFF	; 255
    1b1c:	f3 e0       	ldi	r31, 0x03	; 3
    1b1e:	aa eb       	ldi	r26, 0xBA	; 186
    1b20:	bc e0       	ldi	r27, 0x0C	; 12
    1b22:	01 90       	ld	r0, Z+
    1b24:	0d 92       	st	X+, r0
    1b26:	8a 95       	dec	r24
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <run_tasks+0x1da>
    1b2a:	82 e1       	ldi	r24, 0x12	; 18
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	66 c0       	rjmp	.+204    	; 0x1bfc <run_tasks+0x2b4>
					} else if(strncasecmp(btbuf_ptr,"RESET",5)==0) {
    1b30:	45 e0       	ldi	r20, 0x05	; 5
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	62 e1       	ldi	r22, 0x12	; 18
    1b36:	74 e0       	ldi	r23, 0x04	; 4
    1b38:	c7 01       	movw	r24, r14
    1b3a:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    1b3e:	89 2b       	or	r24, r25
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <run_tasks+0x1fc>
    1b42:	ff cf       	rjmp	.-2      	; 0x1b42 <run_tasks+0x1fa>
					    RESTART_MICROCONTROLLER();
				    } else {
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"------ Help: -----------------\r\n");
    1b44:	81 e2       	ldi	r24, 0x21	; 33
    1b46:	e8 e1       	ldi	r30, 0x18	; 24
    1b48:	f4 e0       	ldi	r31, 0x04	; 4
    1b4a:	aa eb       	ldi	r26, 0xBA	; 186
    1b4c:	bc e0       	ldi	r27, 0x0C	; 12
    1b4e:	01 90       	ld	r0, Z+
    1b50:	0d 92       	st	X+, r0
    1b52:	8a 95       	dec	r24
    1b54:	e1 f7       	brne	.-8      	; 0x1b4e <run_tasks+0x206>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"SCC?   read SCCs sensors\r\n");
    1b56:	8b e1       	ldi	r24, 0x1B	; 27
    1b58:	e9 e3       	ldi	r30, 0x39	; 57
    1b5a:	f4 e0       	ldi	r31, 0x04	; 4
    1b5c:	aa ed       	ldi	r26, 0xDA	; 218
    1b5e:	bc e0       	ldi	r27, 0x0C	; 12
    1b60:	01 90       	ld	r0, Z+
    1b62:	0d 92       	st	X+, r0
    1b64:	8a 95       	dec	r24
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <run_tasks+0x218>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"SCCD?  read SCCs other\r\n");
    1b68:	89 e1       	ldi	r24, 0x19	; 25
    1b6a:	e4 e5       	ldi	r30, 0x54	; 84
    1b6c:	f4 e0       	ldi	r31, 0x04	; 4
    1b6e:	a4 ef       	ldi	r26, 0xF4	; 244
    1b70:	bc e0       	ldi	r27, 0x0C	; 12
    1b72:	01 90       	ld	r0, Z+
    1b74:	0d 92       	st	X+, r0
    1b76:	8a 95       	dec	r24
    1b78:	e1 f7       	brne	.-8      	; 0x1b72 <run_tasks+0x22a>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"SOC?   read SoC of full system\r\n");
    1b7a:	81 e2       	ldi	r24, 0x21	; 33
    1b7c:	ed e6       	ldi	r30, 0x6D	; 109
    1b7e:	f4 e0       	ldi	r31, 0x04	; 4
    1b80:	ac e0       	ldi	r26, 0x0C	; 12
    1b82:	bd e0       	ldi	r27, 0x0D	; 13
    1b84:	01 90       	ld	r0, Z+
    1b86:	0d 92       	st	X+, r0
    1b88:	8a 95       	dec	r24
    1b8a:	e1 f7       	brne	.-8      	; 0x1b84 <run_tasks+0x23c>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"LOAD=x set load to 0 or 1\r\n");
    1b8c:	8c e1       	ldi	r24, 0x1C	; 28
    1b8e:	ee e8       	ldi	r30, 0x8E	; 142
    1b90:	f4 e0       	ldi	r31, 0x04	; 4
    1b92:	ac e2       	ldi	r26, 0x2C	; 44
    1b94:	bd e0       	ldi	r27, 0x0D	; 13
    1b96:	01 90       	ld	r0, Z+
    1b98:	0d 92       	st	X+, r0
    1b9a:	8a 95       	dec	r24
    1b9c:	e1 f7       	brne	.-8      	; 0x1b96 <run_tasks+0x24e>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"TEMP=x calibrate tempsensors\r\n");
    1b9e:	8f e1       	ldi	r24, 0x1F	; 31
    1ba0:	ea ea       	ldi	r30, 0xAA	; 170
    1ba2:	f4 e0       	ldi	r31, 0x04	; 4
    1ba4:	a7 e4       	ldi	r26, 0x47	; 71
    1ba6:	bd e0       	ldi	r27, 0x0D	; 13
    1ba8:	01 90       	ld	r0, Z+
    1baa:	0d 92       	st	X+, r0
    1bac:	8a 95       	dec	r24
    1bae:	e1 f7       	brne	.-8      	; 0x1ba8 <run_tasks+0x260>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"BATO=x set selfcurrent offset\r\n");
    1bb0:	80 e2       	ldi	r24, 0x20	; 32
    1bb2:	e9 ec       	ldi	r30, 0xC9	; 201
    1bb4:	f4 e0       	ldi	r31, 0x04	; 4
    1bb6:	a5 e6       	ldi	r26, 0x65	; 101
    1bb8:	bd e0       	ldi	r27, 0x0D	; 13
    1bba:	01 90       	ld	r0, Z+
    1bbc:	0d 92       	st	X+, r0
    1bbe:	8a 95       	dec	r24
    1bc0:	e1 f7       	brne	.-8      	; 0x1bba <run_tasks+0x272>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"AH=x   set batteries to xAh\r\n");
    1bc2:	8e e1       	ldi	r24, 0x1E	; 30
    1bc4:	e9 ee       	ldi	r30, 0xE9	; 233
    1bc6:	f4 e0       	ldi	r31, 0x04	; 4
    1bc8:	a4 e8       	ldi	r26, 0x84	; 132
    1bca:	bd e0       	ldi	r27, 0x0D	; 13
    1bcc:	01 90       	ld	r0, Z+
    1bce:	0d 92       	st	X+, r0
    1bd0:	8a 95       	dec	r24
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <run_tasks+0x284>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"RUNEQ  force equalization\r\n");
    1bd4:	8c e1       	ldi	r24, 0x1C	; 28
    1bd6:	e7 e0       	ldi	r30, 0x07	; 7
    1bd8:	f5 e0       	ldi	r31, 0x05	; 5
    1bda:	a1 ea       	ldi	r26, 0xA1	; 161
    1bdc:	bd e0       	ldi	r27, 0x0D	; 13
    1bde:	01 90       	ld	r0, Z+
    1be0:	0d 92       	st	X+, r0
    1be2:	8a 95       	dec	r24
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <run_tasks+0x296>
						bt_len+=sprintf(&UART_SIM_TxBuf[bt_len],"RESET  reset master\r\n");
    1be6:	86 e1       	ldi	r24, 0x16	; 22
    1be8:	e3 e2       	ldi	r30, 0x23	; 35
    1bea:	f5 e0       	ldi	r31, 0x05	; 5
    1bec:	ac eb       	ldi	r26, 0xBC	; 188
    1bee:	bd e0       	ldi	r27, 0x0D	; 13
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	0d 92       	st	X+, r0
    1bf4:	8a 95       	dec	r24
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <run_tasks+0x2a8>
    1bf8:	87 e1       	ldi	r24, 0x17	; 23
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
					}
					sim_bluetooth_write(UART_SIM_TxBuf,bt_len);
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	8a eb       	ldi	r24, 0xBA	; 186
    1c00:	9c e0       	ldi	r25, 0x0C	; 12
    1c02:	0e 94 d7 23 	call	0x47ae	; 0x47ae <sim_bluetooth_write>
		}
    }

    if(tasklist & (1<<TASK_2SECOND)) {
	}
	if(tasklist & (1<<TASK_3SECOND)) {
    1c06:	02 ff       	sbrs	r16, 2
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <run_tasks+0x2f0>
		//printf("---TASK_3SEC---\n");
		if(sysval.has_bluetooth) {
    1c0a:	80 91 5f 10 	lds	r24, 0x105F	; 0x80105f <sysval+0xa0>
    1c0e:	88 23       	and	r24, r24
    1c10:	99 f0       	breq	.+38     	; 0x1c38 <run_tasks+0x2f0>
			if(sysval.bluetooth_connected==0) {
    1c12:	80 91 60 10 	lds	r24, 0x1060	; 0x801060 <sysval+0xa1>
    1c16:	81 11       	cpse	r24, r1
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <run_tasks+0x2f0>
				sim_start_bluetooth();
    1c1a:	0e 94 b8 22 	call	0x4570	; 0x4570 <sim_start_bluetooth>
				if(sysval.bluetooth_status == 25) {
    1c1e:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <sysval+0xa2>
    1c22:	89 31       	cpi	r24, 0x19	; 25
    1c24:	49 f4       	brne	.+18     	; 0x1c38 <run_tasks+0x2f0>
					sim_bluetooth_connect();
    1c26:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <sim_bluetooth_connect>
					sysval.bluetooth_connected = 1;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	80 93 60 10 	sts	0x1060, r24	; 0x801060 <sysval+0xa1>
					printf("connect!\n");
    1c30:	86 eb       	ldi	r24, 0xB6	; 182
    1c32:	9a e0       	ldi	r25, 0x0A	; 10
    1c34:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
				}
			}
		}
	}
    if(tasklist & (1<<TASK_5SECOND)) {
    1c38:	03 fd       	sbrc	r16, 3
		//printf("---TASK_5SEC---\n");
        task_every_5second();		
    1c3a:	0e 94 9c 24 	call	0x4938	; 0x4938 <task_every_5second>
    }

    if(tasklist & (1<<TASK_MINUTE)) {
    1c3e:	04 ff       	sbrs	r16, 4
    1c40:	a0 c0       	rjmp	.+320    	; 0x1d82 <run_tasks+0x43a>
		//printf("---TASK_MIN---\n");
        task_every_minute();
    1c42:	0e 94 96 28 	call	0x512c	; 0x512c <task_every_minute>

        /*
         * In case of too many SIM900 errors:
         */
        // if for some reason the SIM900 module turned off then turn on again
        if(sysval.sim900_errors > 10) {
    1c46:	80 91 5e 10 	lds	r24, 0x105E	; 0x80105e <sysval+0x9f>
    1c4a:	8b 30       	cpi	r24, 0x0B	; 11
    1c4c:	28 f0       	brcs	.+10     	; 0x1c58 <run_tasks+0x310>
            sim_onoff_pulse(); // turn it off (next minute back on)
    1c4e:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <sim_onoff_pulse>
            sysval.sim900_errors=0;
    1c52:	10 92 5e 10 	sts	0x105E, r1	; 0x80105e <sysval+0x9f>
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <run_tasks+0x31e>
        } else {
            // if the SIM900 module turned off before then turn on now
            if(!sim_is_on()) {
    1c58:	0e 94 6f 17 	call	0x2ede	; 0x2ede <sim_is_on>
    1c5c:	81 11       	cpse	r24, r1
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <run_tasks+0x31e>
                sim_onoff_pulse();
    1c60:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <sim_onoff_pulse>
                tasklist &= ~(1<<TASK_CREG);
    1c64:	1d 7f       	andi	r17, 0xFD	; 253

        /*
         * periodic SMS sending:
         */
        dosms=0;
        sreg=SREG; cli(); // atomic read
    1c66:	ff b6       	in	r15, 0x3f	; 63
    1c68:	f8 94       	cli
        if(sysval.intervalSMS == 0) {
    1c6a:	80 91 ce 0f 	lds	r24, 0x0FCE	; 0x800fce <sysval+0xf>
    1c6e:	90 91 cf 0f 	lds	r25, 0x0FCF	; 0x800fcf <sysval+0x10>
    1c72:	89 2b       	or	r24, r25
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <run_tasks+0x330>
    1c76:	83 c0       	rjmp	.+262    	; 0x1d7e <run_tasks+0x436>
            sysval.intervalSMS = eeprom_read_word(&EEPROM_ADDR_intervalSMS);
    1c78:	83 ef       	ldi	r24, 0xF3	; 243
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 7d 32 	call	0x64fa	; 0x64fa <eeprom_read_word>
    1c80:	ef eb       	ldi	r30, 0xBF	; 191
    1c82:	ff e0       	ldi	r31, 0x0F	; 15
    1c84:	90 8b       	std	Z+16, r25	; 0x10
    1c86:	87 87       	std	Z+15, r24	; 0x0f
            if(sysval.intervalSMS > 0) {
    1c88:	87 85       	ldd	r24, Z+15	; 0x0f
    1c8a:	90 89       	ldd	r25, Z+16	; 0x10
                dosms=1;
            }
        }
        SREG=sreg; // sei()
    1c8c:	ff be       	out	0x3f, r15	; 63
        if(dosms) {
    1c8e:	89 2b       	or	r24, r25
    1c90:	e1 f0       	breq	.+56     	; 0x1cca <run_tasks+0x382>
			if(sysval.has_bluetooth) { sim_stop_bluetooth(); }
    1c92:	80 91 5f 10 	lds	r24, 0x105F	; 0x80105f <sysval+0xa0>
    1c96:	81 11       	cpse	r24, r1
    1c98:	0e 94 73 24 	call	0x48e6	; 0x48e6 <sim_stop_bluetooth>
            // to the 1st: the operator
            uint8_t message_len = prepare_data_message("ASOC?",&sms_start_offset);
    1c9c:	be 01       	movw	r22, r28
    1c9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	89 e3       	ldi	r24, 0x39	; 57
    1ca4:	95 e0       	ldi	r25, 0x05	; 5
    1ca6:	a2 da       	rcall	.-2748   	; 0x11ec <prepare_data_message>
            message_len-=sms_start_offset;
    1ca8:	99 81       	ldd	r25, Y+1	; 0x01

            if(sim_send_sms(&UART_SIM_TxBuf[sms_start_offset],message_len,0) < 0) {
    1caa:	68 2f       	mov	r22, r24
    1cac:	69 1b       	sub	r22, r25
    1cae:	89 2f       	mov	r24, r25
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	86 54       	subi	r24, 0x46	; 70
    1cb6:	93 4f       	sbci	r25, 0xF3	; 243
    1cb8:	0e 94 55 19 	call	0x32aa	; 0x32aa <sim_send_sms>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <run_tasks+0x382>
                sysval.errorstatus |= (1<<ERROR_SMS_ERROR);
    1cc0:	ea e5       	ldi	r30, 0x5A	; 90
    1cc2:	f0 e1       	ldi	r31, 0x10	; 16
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 64       	ori	r24, 0x40	; 64
    1cc8:	80 83       	st	Z, r24


    /*
     * periodic 2G data sending:
     */
    if( ((tasklist & (1<<TASK_2G)) && sysval.interval2G != 0) ||
    1cca:	10 ff       	sbrs	r17, 0
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <run_tasks+0x392>
    1cce:	80 91 d0 0f 	lds	r24, 0x0FD0	; 0x800fd0 <sysval+0x11>
    1cd2:	90 91 d1 0f 	lds	r25, 0x0FD1	; 0x800fd1 <sysval+0x12>
    1cd6:	89 2b       	or	r24, r25
    1cd8:	31 f4       	brne	.+12     	; 0x1ce6 <run_tasks+0x39e>
    1cda:	04 ff       	sbrs	r16, 4
    1cdc:	33 c0       	rjmp	.+102    	; 0x1d44 <run_tasks+0x3fc>
        ((tasklist & (1<<TASK_MINUTE)) && sysval.retry2G)) {
    1cde:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <sysval+0x9e>
    1ce2:	88 23       	and	r24, r24
    1ce4:	79 f1       	breq	.+94     	; 0x1d44 <run_tasks+0x3fc>

        uint8_t message_len;
		//printf("---TASK_2G---\n");
		if(sysval.has_bluetooth) { sim_stop_bluetooth(); }
    1ce6:	80 91 5f 10 	lds	r24, 0x105F	; 0x80105f <sysval+0xa0>
    1cea:	81 11       	cpse	r24, r1
    1cec:	0e 94 73 24 	call	0x48e6	; 0x48e6 <sim_stop_bluetooth>
        sysval.errorstatus &= ~(1<<ERROR_2G_ERROR);
    1cf0:	ea e5       	ldi	r30, 0x5A	; 90
    1cf2:	f0 e1       	ldi	r31, 0x10	; 16
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 77       	andi	r24, 0x7F	; 127
    1cf8:	80 83       	st	Z, r24
        message_len = prepare_data_message("ASOC?",&sms_start_offset);
    1cfa:	be 01       	movw	r22, r28
    1cfc:	6f 5f       	subi	r22, 0xFF	; 255
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	89 e3       	ldi	r24, 0x39	; 57
    1d02:	95 e0       	ldi	r25, 0x05	; 5
    1d04:	73 da       	rcall	.-2842   	; 0x11ec <prepare_data_message>
        if(send_2g_message(UART_SIM_TxBuf,message_len) != 0) {
    1d06:	68 2f       	mov	r22, r24
    1d08:	8a eb       	ldi	r24, 0xBA	; 186
    1d0a:	9c e0       	ldi	r25, 0x0C	; 12
    1d0c:	31 dd       	rcall	.-1438   	; 0x1770 <send_2g_message>
    1d0e:	88 23       	and	r24, r24
    1d10:	a9 f0       	breq	.+42     	; 0x1d3c <run_tasks+0x3f4>
            sysval.errorstatus |= (1<<ERROR_2G_ERROR);
    1d12:	ea e5       	ldi	r30, 0x5A	; 90
    1d14:	f0 e1       	ldi	r31, 0x10	; 16
    1d16:	80 81       	ld	r24, Z
    1d18:	80 68       	ori	r24, 0x80	; 128
    1d1a:	80 83       	st	Z, r24
            sysval.retry2G++;
    1d1c:	ed e5       	ldi	r30, 0x5D	; 93
    1d1e:	f0 e1       	ldi	r31, 0x10	; 16
    1d20:	80 81       	ld	r24, Z
    1d22:	8f 5f       	subi	r24, 0xFF	; 255
    1d24:	80 83       	st	Z, r24

            if(sysval.retry2G>3) {
    1d26:	80 81       	ld	r24, Z
    1d28:	84 30       	cpi	r24, 0x04	; 4
    1d2a:	60 f0       	brcs	.+24     	; 0x1d44 <run_tasks+0x3fc>
                sysval.retry2G=0;
    1d2c:	10 92 5d 10 	sts	0x105D, r1	; 0x80105d <sysval+0x9e>
                sysval.sim900_errors++;
    1d30:	ee e5       	ldi	r30, 0x5E	; 94
    1d32:	f0 e1       	ldi	r31, 0x10	; 16
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 5f       	subi	r24, 0xFF	; 255
    1d38:	80 83       	st	Z, r24
    1d3a:	04 c0       	rjmp	.+8      	; 0x1d44 <run_tasks+0x3fc>
            }
        } else {
            sysval.retry2G=0;
    1d3c:	10 92 5d 10 	sts	0x105D, r1	; 0x80105d <sysval+0x9e>
            sysval.sim900_errors=0;
    1d40:	10 92 5e 10 	sts	0x105E, r1	; 0x80105e <sysval+0x9f>


    /*
     * Check how good the SIM900 network connection is:
     */
    if(tasklist & (1<<TASK_CREG)) {
    1d44:	11 ff       	sbrs	r17, 1
    1d46:	0c c0       	rjmp	.+24     	; 0x1d60 <run_tasks+0x418>
		//printf("---TASK_CREG---\n");
		if(sysval.has_bluetooth) { sim_stop_bluetooth(); }
    1d48:	80 91 5f 10 	lds	r24, 0x105F	; 0x80105f <sysval+0xa0>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	0e 94 73 24 	call	0x48e6	; 0x48e6 <sim_stop_bluetooth>
        int creg = sim_read_CREG();
    1d52:	0e 94 34 20 	call	0x4068	; 0x4068 <sim_read_CREG>
        if(creg!=1 && creg!=5) { // 1 or 5 is registered
    1d56:	8b 7f       	andi	r24, 0xFB	; 251
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <run_tasks+0x418>
                                 // Otherwise... (including in case of error or 
                                 // !sim_is_on() :
            sim_onoff_pulse();   // turn it off; next minute turn back on
    1d5c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <sim_onoff_pulse>
        }
    }

    if(tasklist & (1<<TASK_HOUR)) {
    1d60:	05 fd       	sbrc	r16, 5
		//printf("---TASK_HOUR---\n");
        task_hourly();
    1d62:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <task_hourly>
    }

    if(tasklist & (1<<TASK_DAY)) {
    1d66:	06 ff       	sbrs	r16, 6
    1d68:	16 c0       	rjmp	.+44     	; 0x1d96 <run_tasks+0x44e>
		//printf("---TASK_DAY---\n");
        task_daily();
    1d6a:	0e 94 0c 29 	call	0x5218	; 0x5218 <task_daily>
		if(sysval.has_bluetooth) { sim_stop_bluetooth(); }
    1d6e:	80 91 5f 10 	lds	r24, 0x105F	; 0x80105f <sysval+0xa0>
    1d72:	81 11       	cpse	r24, r1
        startup_sim900(1); // restart the SIM900 and delete all SMSs
    1d74:	0e 94 73 24 	call	0x48e6	; 0x48e6 <sim_stop_bluetooth>
    1d78:	81 e0       	ldi	r24, 0x01	; 1
	if(tasklist & (1<<TASK_SECOND)) {
		printf("WATCHDOG=%d\n",sysval.watchdog);
	}
	*/
	
}
    1d7a:	4d dd       	rcall	.-1382   	; 0x1816 <startup_sim900>
            sysval.intervalSMS = eeprom_read_word(&EEPROM_ADDR_intervalSMS);
            if(sysval.intervalSMS > 0) {
                dosms=1;
            }
        }
        SREG=sreg; // sei()
    1d7c:	0c c0       	rjmp	.+24     	; 0x1d96 <run_tasks+0x44e>
    1d7e:	ff be       	out	0x3f, r15	; 63


    /*
     * periodic 2G data sending:
     */
    if( ((tasklist & (1<<TASK_2G)) && sysval.interval2G != 0) ||
    1d80:	a4 cf       	rjmp	.-184    	; 0x1cca <run_tasks+0x382>
    1d82:	10 ff       	sbrs	r17, 0
    1d84:	df cf       	rjmp	.-66     	; 0x1d44 <run_tasks+0x3fc>
    1d86:	80 91 d0 0f 	lds	r24, 0x0FD0	; 0x800fd0 <sysval+0x11>
    1d8a:	90 91 d1 0f 	lds	r25, 0x0FD1	; 0x800fd1 <sysval+0x12>
    1d8e:	89 2b       	or	r24, r25
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <run_tasks+0x44c>
    1d92:	a9 cf       	rjmp	.-174    	; 0x1ce6 <run_tasks+0x39e>
	if(tasklist & (1<<TASK_SECOND)) {
		printf("WATCHDOG=%d\n",sysval.watchdog);
	}
	*/
	
}
    1d94:	d7 cf       	rjmp	.-82     	; 0x1d44 <run_tasks+0x3fc>
    1d96:	a1 96       	adiw	r28, 0x21	; 33
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	08 95       	ret

00001db0 <main>:



//////////////////////////////////// Main Loop ////////////////////////////////////
int main(void) 
{
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	c7 51       	subi	r28, 0x17	; 23
    1dba:	d2 40       	sbci	r29, 0x02	; 2
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    uint8_t sreg,x,i;

    cli();
    1dc6:	f8 94       	cli

volatile uint8_t twi_timeout;
#define RESTART_MICROCONTROLLER() { while(1); } // handled by watchdog

static void initIO(void) {
    PORTA = (1<<POWER_FAULT); // pull up
    1dc8:	80 e4       	ldi	r24, 0x40	; 64
    1dca:	82 b9       	out	0x02, r24	; 2
    DDRA  = (1<<IO_0); // output enable for external powersupply
    1dcc:	80 e8       	ldi	r24, 0x80	; 128
    1dce:	81 b9       	out	0x01, r24	; 1

    PORTB = (1<<IO_1) | (1<<SPI_MOSI_IO_2) | (1<<SPI_MISO) | (1<<SPI_SCK); // pull up here
    1dd0:	80 ef       	ldi	r24, 0xF0	; 240
    1dd2:	85 b9       	out	0x05, r24	; 5
    DDRB  = (1<<LED_CHARGING) | (1<<LED_100PERCENT) | (1<<LED_60PERCENT) | (1<<LED_30PERCENT);
    1dd4:	8f e0       	ldi	r24, 0x0F	; 15
    1dd6:	84 b9       	out	0x04, r24	; 4

    PORTC = (1<<I2C_SCL) | (1<<I2C_SDA); // pull up here
    1dd8:	03 e0       	ldi	r16, 0x03	; 3
    1dda:	08 b9       	out	0x08, r16	; 8
    DDRC  = (1<<POWERKEY) | (1<<RELAY_CLOSE) | (1<<RELAY_OPEN) | 
    1ddc:	88 ef       	ldi	r24, 0xF8	; 248
    1dde:	87 b9       	out	0x07, r24	; 7
            (1<<LED_NOTPAYED) | (1<<LED_SHORTFAULT);

    PORTD = (1<<SERIAL_RXD) | (1<<SIM900_RXD) | (1<<SIM900_RI) | (1<<SIM900_CTS); // pull up here
    1de0:	85 e5       	ldi	r24, 0x55	; 85
    1de2:	8b b9       	out	0x0b, r24	; 11
    DDRD  = (1<<SERIAL_TXD) | (1<<SIM900_TXD) | (1<<SIM900_RTS);
    1de4:	8a e8       	ldi	r24, 0x8A	; 138
    1de6:	8a b9       	out	0x0a, r24	; 10
    uint8_t sreg,x,i;

    cli();
    initIO();

    PCICR |= (1<<PCIE3); // enable pin change interrupt on PCINT31:24
    1de8:	e8 e6       	ldi	r30, 0x68	; 104
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	88 60       	ori	r24, 0x08	; 8
    1df0:	80 83       	st	Z, r24
    PCMSK3 |= (1<<PCINT28); // enable PCINT28 interrupt on pin change (SIM900_RI line)
    1df2:	e3 e7       	ldi	r30, 0x73	; 115
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 61       	ori	r24, 0x10	; 16
    1dfa:	80 83       	st	Z, r24

    //wdt_enable(WDTO_2S); // enable watchdog	
	WDTCSR = (1<<WDCE) | (1<<WDE);   			 // Enable the WD Change Bit - configure mode
    1dfc:	e0 e6       	ldi	r30, 0x60	; 96
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	18 e1       	ldi	r17, 0x18	; 24
    1e02:	10 83       	st	Z, r17
	//WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1);	 // Enable WDT Interrupt, and Set Timeout to ~1 seconds ,or use WDTO_1S
	WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);	 // Enable WDT Interrupt, and Set Timeout to ~2 seconds
    1e04:	87 e4       	ldi	r24, 0x47	; 71
    1e06:	80 83       	st	Z, r24
		


    memset((void *)&sysval,0,sizeof(sysVals_t));
    1e08:	83 ea       	ldi	r24, 0xA3	; 163
    1e0a:	ef eb       	ldi	r30, 0xBF	; 191
    1e0c:	ff e0       	ldi	r31, 0x0F	; 15
    1e0e:	df 01       	movw	r26, r30
    1e10:	1d 92       	st	X+, r1
    1e12:	8a 95       	dec	r24
    1e14:	e9 f7       	brne	.-6      	; 0x1e10 <main+0x60>

    twi_init();
    1e16:	0e 94 19 29 	call	0x5232	; 0x5232 <twi_init>
    twi_timeout=0;
    1e1a:	10 92 62 10 	sts	0x1062, r1	; 0x801062 <twi_timeout>

    INIT_UARTN_8N1(1,BRR115200,U2X115200); //Configure UART SIM900
    1e1e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    1e22:	00 93 cc 00 	sts	0x00CC, r16	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1e26:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1e2a:	e9 ec       	ldi	r30, 0xC9	; 201
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	10 83       	st	Z, r17
    1e30:	96 e0       	ldi	r25, 0x06	; 6
    1e32:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    UCSR1B |= (1<<RXCIE1); // enable interrupts
    1e36:	80 81       	ld	r24, Z
    1e38:	80 68       	ori	r24, 0x80	; 128
    1e3a:	80 83       	st	Z, r24


    //INIT_UARTN_8N1(0,BRR9600,U2X9600); //Configure UART Serial
    INIT_UARTN_8N1(0,BRR115200,U2X115200); //Configure UART Serial
    1e3c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1e40:	00 93 c4 00 	sts	0x00C4, r16	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1e44:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1e48:	e1 ec       	ldi	r30, 0xC1	; 193
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	10 83       	st	Z, r17
    1e4e:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    UCSR0B |= (1<<RXCIE0); // enable interrupts
    1e52:	80 81       	ld	r24, Z
    1e54:	80 68       	ori	r24, 0x80	; 128
    1e56:	80 83       	st	Z, r24
    stdout = &term_uart_str;
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	91 e0       	ldi	r25, 0x01	; 1
    1e5c:	90 93 67 10 	sts	0x1067, r25	; 0x801067 <__iob+0x3>
    1e60:	80 93 66 10 	sts	0x1066, r24	; 0x801066 <__iob+0x2>

    x=0;
    UART_SIM_RxTail = x;
    1e64:	10 92 ba 0e 	sts	0x0EBA, r1	; 0x800eba <UART_SIM_RxTail>
    UART_SIM_RxHead = x;
    1e68:	10 92 bb 0e 	sts	0x0EBB, r1	; 0x800ebb <UART_SIM_RxHead>
    UART_SIM_TxTail = x;
    1e6c:	10 92 b8 0c 	sts	0x0CB8, r1	; 0x800cb8 <UART_SIM_TxTail>
    UART_SIM_TxHead = x;
    1e70:	10 92 b9 0c 	sts	0x0CB9, r1	; 0x800cb9 <UART_SIM_TxHead>
    UART_TERM_RxTail = x;
    1e74:	10 92 b6 0b 	sts	0x0BB6, r1	; 0x800bb6 <__data_end>
    UART_TERM_RxHead = x;
    1e78:	10 92 b7 0b 	sts	0x0BB7, r1	; 0x800bb7 <UART_TERM_RxHead>

    wdt_reset();
    1e7c:	a8 95       	wdr

    // turn on all leds:
    LED_CHARGING_ON();
    1e7e:	29 98       	cbi	0x05, 1	; 5
    LED_100PERCENT_ON();
    1e80:	28 98       	cbi	0x05, 0	; 5
    LED_60PERCENT_ON();
    1e82:	2a 98       	cbi	0x05, 2	; 5
    LED_30PERCENT_ON();
    1e84:	2b 98       	cbi	0x05, 3	; 5
    LED_NOTPAYED_ON();
    1e86:	46 98       	cbi	0x08, 6	; 8
    LED_SHORTFAULT_ON();
    1e88:	47 98       	cbi	0x08, 7	; 8
    delay_ms(500);
    1e8a:	60 e7       	ldi	r22, 0x70	; 112
    1e8c:	7e e5       	ldi	r23, 0x5E	; 94
    1e8e:	89 e0       	ldi	r24, 0x09	; 9
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    // turn off all leds:
    LED_CHARGING_OFF();
    1e96:	29 9a       	sbi	0x05, 1	; 5
    LED_100PERCENT_OFF();
    1e98:	28 9a       	sbi	0x05, 0	; 5
    LED_60PERCENT_OFF();
    1e9a:	2a 9a       	sbi	0x05, 2	; 5
    LED_30PERCENT_OFF();
    1e9c:	2b 9a       	sbi	0x05, 3	; 5
    LED_NOTPAYED_OFF();
    1e9e:	46 9a       	sbi	0x08, 6	; 8
    LED_SHORTFAULT_OFF();
    1ea0:	47 9a       	sbi	0x08, 7	; 8
    #define MSTICKS_PER_TENTHSEC  115UL 

    #define PWM_PS_VAL (1<<CS10) //clock/1 prescaler

    //Timer 0 - ~MS Tick, ~1kHz
    TCCR0A = (1<<WGM01); //Clear on output compare match.
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	84 bd       	out	0x24, r24	; 36
    OCR0A = MS_TICK_OCR_VAL;
    1ea6:	83 e6       	ldi	r24, 0x63	; 99
    1ea8:	87 bd       	out	0x27, r24	; 39
    TIMSK0 |= (1<<OCIE0A); //Enable output compare interrupt.
    1eaa:	ee e6       	ldi	r30, 0x6E	; 110
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	82 60       	ori	r24, 0x02	; 2
    1eb2:	80 83       	st	Z, r24
    TCCR0B |= MS_TICK_PS_VAL;
    1eb4:	85 b5       	in	r24, 0x25	; 37
    1eb6:	83 60       	ori	r24, 0x03	; 3
    1eb8:	85 bd       	out	0x25, r24	; 37
    LED_NOTPAYED_OFF();
    LED_SHORTFAULT_OFF();

    initTimers();

    delay_ms(500);
    1eba:	60 e7       	ldi	r22, 0x70	; 112
    1ebc:	7e e5       	ldi	r23, 0x5E	; 94
    1ebe:	89 e0       	ldi	r24, 0x09	; 9
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    wdt_reset();
    1ec6:	a8 95       	wdr


    eeprom_busy_wait();
    1ec8:	f9 99       	sbic	0x1f, 1	; 31
    1eca:	fe cf       	rjmp	.-4      	; 0x1ec8 <main+0x118>
    sysval.payled_mode = eeprom_read_byte(&EEPROM_ADDR_LED_mode);
    1ecc:	86 ef       	ldi	r24, 0xF6	; 246
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 70 32 	call	0x64e0	; 0x64e0 <eeprom_read_byte>
    1ed4:	0f eb       	ldi	r16, 0xBF	; 191
    1ed6:	1f e0       	ldi	r17, 0x0F	; 15
    1ed8:	80 93 5b 10 	sts	0x105B, r24	; 0x80105b <sysval+0x9c>
    sysval.seconds   = eeprom_read_dword(&EEPROM_ADDR_secondsMeter);
    1edc:	8d ee       	ldi	r24, 0xED	; 237
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 78 32 	call	0x64f0	; 0x64f0 <eeprom_read_dword>
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	60 83       	st	Z, r22
    1ee8:	71 83       	std	Z+1, r23	; 0x01
    1eea:	82 83       	std	Z+2, r24	; 0x02
    1eec:	93 83       	std	Z+3, r25	; 0x03
    sysval.Ws_in     = eeprom_read_dword(&EEPROM_ADDR_Ws_in);
    1eee:	89 ee       	ldi	r24, 0xE9	; 233
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 78 32 	call	0x64f0	; 0x64f0 <eeprom_read_dword>
    1ef6:	60 93 3f 10 	sts	0x103F, r22	; 0x80103f <sysval+0x80>
    1efa:	70 93 40 10 	sts	0x1040, r23	; 0x801040 <sysval+0x81>
    1efe:	80 93 41 10 	sts	0x1041, r24	; 0x801041 <sysval+0x82>
    1f02:	90 93 42 10 	sts	0x1042, r25	; 0x801042 <sysval+0x83>
    sysval.Ws_out    = eeprom_read_dword(&EEPROM_ADDR_Ws_out);
    1f06:	85 ee       	ldi	r24, 0xE5	; 229
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 78 32 	call	0x64f0	; 0x64f0 <eeprom_read_dword>
    1f0e:	60 93 43 10 	sts	0x1043, r22	; 0x801043 <sysval+0x84>
    1f12:	70 93 44 10 	sts	0x1044, r23	; 0x801044 <sysval+0x85>
    1f16:	80 93 45 10 	sts	0x1045, r24	; 0x801045 <sysval+0x86>
    1f1a:	90 93 46 10 	sts	0x1046, r25	; 0x801046 <sysval+0x87>
    sysval.Door_open = 0;
    1f1e:	10 92 58 10 	sts	0x1058, r1	; 0x801058 <sysval+0x99>
    sysval.intervalSMS = eeprom_read_word(&EEPROM_ADDR_intervalSMS);
    1f22:	83 ef       	ldi	r24, 0xF3	; 243
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 7d 32 	call	0x64fa	; 0x64fa <eeprom_read_word>
    1f2a:	d8 01       	movw	r26, r16
    1f2c:	50 96       	adiw	r26, 0x10	; 16
    1f2e:	9c 93       	st	X, r25
    1f30:	8e 93       	st	-X, r24
    1f32:	1f 97       	sbiw	r26, 0x0f	; 15
    sysval.interval2G = eeprom_read_word(&EEPROM_ADDR_interval2G);
    1f34:	81 ef       	ldi	r24, 0xF1	; 241
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 7d 32 	call	0x64fa	; 0x64fa <eeprom_read_word>
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	92 8b       	std	Z+18, r25	; 0x12
    1f40:	81 8b       	std	Z+17, r24	; 0x11
    sysval.Ws_quota  = (int32_t)eeprom_read_dword(&EEPROM_ADDR_Ws_quota);
    1f42:	88 ef       	ldi	r24, 0xF8	; 248
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 78 32 	call	0x64f0	; 0x64f0 <eeprom_read_dword>
    1f4a:	60 93 47 10 	sts	0x1047, r22	; 0x801047 <sysval+0x88>
    1f4e:	70 93 48 10 	sts	0x1048, r23	; 0x801048 <sysval+0x89>
    1f52:	80 93 49 10 	sts	0x1049, r24	; 0x801049 <sysval+0x8a>
    1f56:	90 93 4a 10 	sts	0x104A, r25	; 0x80104a <sysval+0x8b>
    sysval.Ws_quota_enabled = eeprom_read_byte(&EEPROM_ADDR_Ws_quota_enabled);
    1f5a:	8c ef       	ldi	r24, 0xFC	; 252
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 70 32 	call	0x64e0	; 0x64e0 <eeprom_read_byte>
    1f62:	80 93 4b 10 	sts	0x104B, r24	; 0x80104b <sysval+0x8c>

    delay_ms(100);
    1f66:	60 eb       	ldi	r22, 0xB0	; 176
    1f68:	7f ed       	ldi	r23, 0xDF	; 223
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    wdt_reset();
    1f72:	a8 95       	wdr

    sei();
    1f74:	78 94       	sei
	
    printf_P(PSTR(">> SHS-Control " FIRMWARE_VERSION " running >>\n\r"));
    1f76:	86 e7       	ldi	r24, 0x76	; 118
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	9f 93       	push	r25
    1f7c:	8f 93       	push	r24
    1f7e:	0e 94 b4 2b 	call	0x5768	; 0x5768 <printf_P>
#ifdef SIM_DEBUG
	printf("TESTING1\n");
    1f82:	8f e3       	ldi	r24, 0x3F	; 63
    1f84:	95 e0       	ldi	r25, 0x05	; 5
    1f86:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
#endif

    sreg=SREG; cli();
    1f8a:	1f b7       	in	r17, 0x3f	; 63
    1f8c:	f8 94       	cli
    eeprom_read_block(UART_SIM_TxBuf,&EEPROM_ADDR_hostname,HOSTNAME_LEN);
    1f8e:	48 e2       	ldi	r20, 0x28	; 40
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	61 e3       	ldi	r22, 0x31	; 49
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	8a eb       	ldi	r24, 0xBA	; 186
    1f98:	9c e0       	ldi	r25, 0x0C	; 12
    1f9a:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
    SREG=sreg;
    1f9e:	1f bf       	out	0x3f, r17	; 63
        printf("EEPROM_ADDR_hostname:%s\n",UART_SIM_TxBuf);
    1fa0:	8a eb       	ldi	r24, 0xBA	; 186
    1fa2:	9c e0       	ldi	r25, 0x0C	; 12
    1fa4:	9f 93       	push	r25
    1fa6:	8f 93       	push	r24
    1fa8:	88 e4       	ldi	r24, 0x48	; 72
    1faa:	95 e0       	ldi	r25, 0x05	; 5
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 2e       	mov	r0, r31
    1fc2:	f9 e5       	ldi	r31, 0x59	; 89
    1fc4:	ef 2e       	mov	r14, r31
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	ff 2e       	mov	r15, r31
    1fca:	f0 2d       	mov	r31, r0
    1fcc:	00 e0       	ldi	r16, 0x00	; 0
    1fce:	10 e0       	ldi	r17, 0x00	; 0
        for(i=0;i<MAX_NR_OPERATORS;i++) {
                sreg=SREG; cli();
                eeprom_read_block(UART_SIM_TxBuf,&EEPROM_ADDR_OperatorNr[i],MAX_PHONE_NR_LENGTH);         
                SREG=sreg;
                printf("EEPROM_ADDR_OperatorNr[%d]:%s\n",i,UART_SIM_TxBuf);
    1fd0:	0f 2e       	mov	r0, r31
    1fd2:	f1 e6       	ldi	r31, 0x61	; 97
    1fd4:	cf 2e       	mov	r12, r31
    1fd6:	f5 e0       	ldi	r31, 0x05	; 5
    1fd8:	df 2e       	mov	r13, r31
    1fda:	f0 2d       	mov	r31, r0
    sreg=SREG; cli();
    eeprom_read_block(UART_SIM_TxBuf,&EEPROM_ADDR_hostname,HOSTNAME_LEN);
    SREG=sreg;
        printf("EEPROM_ADDR_hostname:%s\n",UART_SIM_TxBuf);
        for(i=0;i<MAX_NR_OPERATORS;i++) {
                sreg=SREG; cli();
    1fdc:	bf b6       	in	r11, 0x3f	; 63
    1fde:	f8 94       	cli
                eeprom_read_block(UART_SIM_TxBuf,&EEPROM_ADDR_OperatorNr[i],MAX_PHONE_NR_LENGTH);         
    1fe0:	44 e1       	ldi	r20, 0x14	; 20
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	b7 01       	movw	r22, r14
    1fe6:	8a eb       	ldi	r24, 0xBA	; 186
    1fe8:	9c e0       	ldi	r25, 0x0C	; 12
    1fea:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
                SREG=sreg;
    1fee:	bf be       	out	0x3f, r11	; 63
                printf("EEPROM_ADDR_OperatorNr[%d]:%s\n",i,UART_SIM_TxBuf);
    1ff0:	8a eb       	ldi	r24, 0xBA	; 186
    1ff2:	9c e0       	ldi	r25, 0x0C	; 12
    1ff4:	9f 93       	push	r25
    1ff6:	8f 93       	push	r24
    1ff8:	1f 93       	push	r17
    1ffa:	0f 93       	push	r16
    1ffc:	df 92       	push	r13
    1ffe:	cf 92       	push	r12
    2000:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    2004:	0f 5f       	subi	r16, 0xFF	; 255
    2006:	1f 4f       	sbci	r17, 0xFF	; 255
    2008:	f4 e1       	ldi	r31, 0x14	; 20
    200a:	ef 0e       	add	r14, r31
    200c:	f1 1c       	adc	r15, r1

    sreg=SREG; cli();
    eeprom_read_block(UART_SIM_TxBuf,&EEPROM_ADDR_hostname,HOSTNAME_LEN);
    SREG=sreg;
        printf("EEPROM_ADDR_hostname:%s\n",UART_SIM_TxBuf);
        for(i=0;i<MAX_NR_OPERATORS;i++) {
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	07 30       	cpi	r16, 0x07	; 7
    201c:	11 05       	cpc	r17, r1
    201e:	f1 f6       	brne	.-68     	; 0x1fdc <main+0x22c>
                eeprom_read_block(UART_SIM_TxBuf,&EEPROM_ADDR_OperatorNr[i],MAX_PHONE_NR_LENGTH);         
                SREG=sreg;
                printf("EEPROM_ADDR_OperatorNr[%d]:%s\n",i,UART_SIM_TxBuf);
        }

    startup_sim900(1);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	f9 db       	rcall	.-2062   	; 0x1816 <startup_sim900>

    if(bit_is_clear(PINB,SPI_MOSI_IO_2)) { // jumper: SIM900 terminal mode
    2024:	1d 99       	sbic	0x03, 5	; 3
    2026:	22 c0       	rjmp	.+68     	; 0x206c <main+0x2bc>
        INIT_UARTN_8N1(0,BRR115200,U2X115200); //Configure UART Serial
    2028:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    2032:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2036:	e1 ec       	ldi	r30, 0xC1	; 193
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	88 e1       	ldi	r24, 0x18	; 24
    203c:	80 83       	st	Z, r24
    203e:	86 e0       	ldi	r24, 0x06	; 6
    2040:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
        UCSR0B |= (1<<RXCIE0); // enable interrupts
    2044:	80 81       	ld	r24, Z
    2046:	80 68       	ori	r24, 0x80	; 128
    2048:	80 83       	st	Z, r24
        
        LED_100PERCENT_ON();
    204a:	28 98       	cbi	0x05, 0	; 5

        while(1) {
            LED_CHARGING_ON();
    204c:	29 98       	cbi	0x05, 1	; 5
            delay_ms(500);
    204e:	60 e7       	ldi	r22, 0x70	; 112
    2050:	7e e5       	ldi	r23, 0x5E	; 94
    2052:	89 e0       	ldi	r24, 0x09	; 9
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
            wdt_reset();
    205a:	a8 95       	wdr
            LED_CHARGING_OFF();
    205c:	29 9a       	sbi	0x05, 1	; 5
            delay_ms(500);
    205e:	60 e7       	ldi	r22, 0x70	; 112
    2060:	7e e5       	ldi	r23, 0x5E	; 94
    2062:	89 e0       	ldi	r24, 0x09	; 9
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    206a:	f0 cf       	rjmp	.-32     	; 0x204c <main+0x29c>

        /*
         * Wait for SMS
         * when ringing AND RI became inactive then it is time to read sms
         */
        while(!(sysval.ringing && bit_is_set(PIND,SIM900_RI)) ) {
    206c:	0f 2e       	mov	r0, r31
    206e:	f9 e5       	ldi	r31, 0x59	; 89
    2070:	8f 2e       	mov	r8, r31
    2072:	f0 e1       	ldi	r31, 0x10	; 16
    2074:	9f 2e       	mov	r9, r31
    2076:	f0 2d       	mov	r31, r0
             * meanwhile run tasks (readout the tracer and run statistics)
             */
            wdt_reset();
            delay_ms(100);
            run_tasks();
			if(sysval.watchdog > 60) {
    2078:	0f 2e       	mov	r0, r31
    207a:	ff eb       	ldi	r31, 0xBF	; 191
    207c:	ef 2e       	mov	r14, r31
    207e:	ff e0       	ldi	r31, 0x0F	; 15
    2080:	ff 2e       	mov	r15, r31
    2082:	f0 2d       	mov	r31, r0
                    ptr++;
                }
                sreg=SREG; cli();
                eeprom_update_block(&termbuf_ptr[5],&EEPROM_ADDR_hostname,strlen(termbuf_ptr)-5+1); // incl \0
                SREG=sreg;
                sms_size=sprintf(UART_SIM_TxBuf,"%s",&termbuf_ptr[5]);
    2084:	0f 2e       	mov	r0, r31
    2086:	fc ed       	ldi	r31, 0xDC	; 220
    2088:	6f 2e       	mov	r6, r31
    208a:	f1 e0       	ldi	r31, 0x01	; 1
    208c:	7f 2e       	mov	r7, r31
    208e:	f0 2d       	mov	r31, r0
                }

                sms_size=0;
                for(i=0;i<MAX_NR_OPERATORS;i++) {
                    if(i>0) sms_size+=sprintf(&UART_SIM_TxBuf[sms_size],";");
                    eeprom_read_block(operator_phonenr,&EEPROM_ADDR_OperatorNr[i],
    2090:	2e 01       	movw	r4, r28
    2092:	2f ef       	ldi	r18, 0xFF	; 255
    2094:	42 1a       	sub	r4, r18
    2096:	2d ef       	ldi	r18, 0xFD	; 253
    2098:	52 0a       	sbc	r5, r18
    209a:	ca 5e       	subi	r28, 0xEA	; 234
    209c:	dd 4f       	sbci	r29, 0xFD	; 253
    209e:	48 82       	st	Y, r4
    20a0:	c6 51       	subi	r28, 0x16	; 22
    20a2:	d2 40       	sbci	r29, 0x02	; 2
    20a4:	c9 5e       	subi	r28, 0xE9	; 233
    20a6:	dd 4f       	sbci	r29, 0xFD	; 253
    20a8:	58 82       	st	Y, r5
    20aa:	c7 51       	subi	r28, 0x17	; 23
    20ac:	d2 40       	sbci	r29, 0x02	; 2
    } 

    //Main loop
    while(1) {
        uint8_t sms_size=0;
        uint8_t sms_start_offset=0;
    20ae:	cb 5e       	subi	r28, 0xEB	; 235
    20b0:	dd 4f       	sbci	r29, 0xFD	; 253
    20b2:	18 82       	st	Y, r1
    20b4:	c5 51       	subi	r28, 0x15	; 21
    20b6:	d2 40       	sbci	r29, 0x02	; 2
        uint8_t sms_reply_to,sms_pending;
        char termbuf[512];
        char *termbuf_ptr=NULL;

        wdt_reset();		
    20b8:	a8 95       	wdr

        /*
         * Wait for SMS
         * when ringing AND RI became inactive then it is time to read sms
         */
        while(!(sysval.ringing && bit_is_set(PIND,SIM900_RI)) ) {
    20ba:	12 c0       	rjmp	.+36     	; 0x20e0 <main+0x330>
            /*
             * meanwhile run tasks (readout the tracer and run statistics)
             */
            wdt_reset();
    20bc:	a8 95       	wdr
            delay_ms(100);
    20be:	60 eb       	ldi	r22, 0xB0	; 176
    20c0:	7f ed       	ldi	r23, 0xDF	; 223
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
            run_tasks();
    20ca:	3e dc       	rcall	.-1924   	; 0x1948 <run_tasks>
			if(sysval.watchdog > 60) {
    20cc:	d7 01       	movw	r26, r14
    20ce:	1e 96       	adiw	r26, 0x0e	; 14
    20d0:	8c 91       	ld	r24, X
    20d2:	8d 33       	cpi	r24, 0x3D	; 61
    20d4:	28 f0       	brcs	.+10     	; 0x20e0 <main+0x330>
				printf("WATCHDOG RESET!!!\n");
    20d6:	80 e8       	ldi	r24, 0x80	; 128
    20d8:	95 e0       	ldi	r25, 0x05	; 5
    20da:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
    20de:	ff cf       	rjmp	.-2      	; 0x20de <main+0x32e>

        /*
         * Wait for SMS
         * when ringing AND RI became inactive then it is time to read sms
         */
        while(!(sysval.ringing && bit_is_set(PIND,SIM900_RI)) ) {
    20e0:	f4 01       	movw	r30, r8
    20e2:	80 81       	ld	r24, Z
    20e4:	88 23       	and	r24, r24
    20e6:	51 f3       	breq	.-44     	; 0x20bc <main+0x30c>
    20e8:	4c 9b       	sbis	0x09, 4	; 9
    20ea:	e8 cf       	rjmp	.-48     	; 0x20bc <main+0x30c>
			if(sysval.watchdog > 60) {
				printf("WATCHDOG RESET!!!\n");
				RESTART_MICROCONTROLLER();
			}
        }
		printf("message processing\n");
    20ec:	82 e9       	ldi	r24, 0x92	; 146
    20ee:	95 e0       	ldi	r25, 0x05	; 5
    20f0:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
        wdt_reset();
    20f4:	a8 95       	wdr
        sreg=SREG; cli();
    20f6:	9f b7       	in	r25, 0x3f	; 63
    20f8:	f8 94       	cli
        sms_pending=sysval.ringing;
    20fa:	d4 01       	movw	r26, r8
    20fc:	8c 91       	ld	r24, X
        sysval.ringing=0; // reset
    20fe:	1c 92       	st	X, r1
        SREG=sreg; // sei()
    2100:	9f bf       	out	0x3f, r25	; 63
        if(sms_pending) {
    2102:	88 23       	and	r24, r24
    2104:	09 f4       	brne	.+2      	; 0x2108 <main+0x358>
    2106:	4b c4       	rjmp	.+2198   	; 0x299e <main+0xbee>
			if(sysval.has_bluetooth) { sim_stop_bluetooth(); }
    2108:	80 91 5f 10 	lds	r24, 0x105F	; 0x80105f <sysval+0xa0>
    210c:	81 11       	cpse	r24, r1
    210e:	0e 94 73 24 	call	0x48e6	; 0x48e6 <sim_stop_bluetooth>
            termbuf_ptr=sim_receive_sms(termbuf,sizeof(termbuf));
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	72 e0       	ldi	r23, 0x02	; 2
    2116:	ce 01       	movw	r24, r28
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	0e 94 1c 1a 	call	0x3438	; 0x3438 <sim_receive_sms>
    211e:	8c 01       	movw	r16, r24
            if(termbuf_ptr!=NULL) {
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	d9 f0       	breq	.+54     	; 0x215a <main+0x3aa>
               printf("SMS cmd:%s\n",termbuf_ptr);
    2124:	1f 93       	push	r17
    2126:	8f 93       	push	r24
    2128:	85 ea       	ldi	r24, 0xA5	; 165
    212a:	95 e0       	ldi	r25, 0x05	; 5
    212c:	9f 93       	push	r25
    212e:	8f 93       	push	r24
    2130:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
        }

        /*
         * Read the SMS and process (if valid content)
         */
        sysval.errorstatus &= ~((1<<ERROR_SMS_PARSE_ERROR)|(1<<ERROR_SMS_OPER_ERROR)|(1<<ERROR_SMS_ERROR));
    2134:	ea e5       	ldi	r30, 0x5A	; 90
    2136:	f0 e1       	ldi	r31, 0x10	; 16
    2138:	80 81       	ld	r24, Z
    213a:	87 79       	andi	r24, 0x97	; 151
    213c:	80 83       	st	Z, r24
        sms_reply_to=0;

        if(termbuf_ptr!=NULL) {
            if(strncasecmp(termbuf_ptr,"SOC?",4)==0) {
    213e:	44 e0       	ldi	r20, 0x04	; 4
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	6a e3       	ldi	r22, 0x3A	; 58
    2144:	75 e0       	ldi	r23, 0x05	; 5
    2146:	c8 01       	movw	r24, r16
    2148:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	89 2b       	or	r24, r25
    2156:	29 f5       	brne	.+74     	; 0x21a2 <main+0x3f2>
    2158:	05 c0       	rjmp	.+10     	; 0x2164 <main+0x3b4>
			if(sysval.has_bluetooth) { sim_stop_bluetooth(); }
            termbuf_ptr=sim_receive_sms(termbuf,sizeof(termbuf));
            if(termbuf_ptr!=NULL) {
               printf("SMS cmd:%s\n",termbuf_ptr);
            } else {
               printf("no valid SMS\n");
    215a:	81 eb       	ldi	r24, 0xB1	; 177
    215c:	95 e0       	ldi	r25, 0x05	; 5
    215e:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
    2162:	1d c4       	rjmp	.+2106   	; 0x299e <main+0xbee>
        sysval.errorstatus &= ~((1<<ERROR_SMS_PARSE_ERROR)|(1<<ERROR_SMS_OPER_ERROR)|(1<<ERROR_SMS_ERROR));
        sms_reply_to=0;

        if(termbuf_ptr!=NULL) {
            if(strncasecmp(termbuf_ptr,"SOC?",4)==0) {
                termbuf_ptr[4]=0;
    2164:	f8 01       	movw	r30, r16
    2166:	14 82       	std	Z+4, r1	; 0x04
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    2168:	be 01       	movw	r22, r28
    216a:	6b 5e       	subi	r22, 0xEB	; 235
    216c:	7d 4f       	sbci	r23, 0xFD	; 253
    216e:	c8 01       	movw	r24, r16
    2170:	3d d8       	rcall	.-3974   	; 0x11ec <prepare_data_message>
    2172:	18 2f       	mov	r17, r24
                printf("offs=%d,smssize=%d\n",sms_start_offset,sms_size);
    2174:	1f 92       	push	r1
    2176:	8f 93       	push	r24
    2178:	cb 5e       	subi	r28, 0xEB	; 235
    217a:	dd 4f       	sbci	r29, 0xFD	; 253
    217c:	88 81       	ld	r24, Y
    217e:	c5 51       	subi	r28, 0x15	; 21
    2180:	d2 40       	sbci	r29, 0x02	; 2
    2182:	1f 92       	push	r1
    2184:	8f 93       	push	r24
    2186:	8e eb       	ldi	r24, 0xBE	; 190
    2188:	95 e0       	ldi	r25, 0x05	; 5
    218a:	9f 93       	push	r25
    218c:	8f 93       	push	r24
    218e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    219e:	03 e0       	ldi	r16, 0x03	; 3
    21a0:	0f c4       	rjmp	.+2078   	; 0x29c0 <main+0xc10>

            } else if(strncasecmp(termbuf_ptr,"LOAD=",5)==0) { // expect: 0 or 1
    21a2:	45 e0       	ldi	r20, 0x05	; 5
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	6a e9       	ldi	r22, 0x9A	; 154
    21a8:	73 e0       	ldi	r23, 0x03	; 3
    21aa:	c8 01       	movw	r24, r16
    21ac:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    21b0:	89 2b       	or	r24, r25
    21b2:	99 f4       	brne	.+38     	; 0x21da <main+0x42a>
                char *bufptr=&termbuf_ptr[5];
                int state;
                termbuf_ptr[6]=0;
    21b4:	d8 01       	movw	r26, r16
    21b6:	16 96       	adiw	r26, 0x06	; 6
    21b8:	1c 92       	st	X, r1
                state=atoi(bufptr);
    21ba:	c8 01       	movw	r24, r16
    21bc:	05 96       	adiw	r24, 0x05	; 5
    21be:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
                task_set_load(state);
    21c2:	0e 94 87 28 	call	0x510e	; 0x510e <task_set_load>
                task_every_5second(); // refresh
    21c6:	0e 94 9c 24 	call	0x4938	; 0x4938 <task_every_5second>
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    21ca:	be 01       	movw	r22, r28
    21cc:	6b 5e       	subi	r22, 0xEB	; 235
    21ce:	7d 4f       	sbci	r23, 0xFD	; 253
    21d0:	c8 01       	movw	r24, r16
    21d2:	0c d8       	rcall	.-4072   	; 0x11ec <prepare_data_message>
    21d4:	18 2f       	mov	r17, r24
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    21d6:	03 e0       	ldi	r16, 0x03	; 3
    21d8:	f3 c3       	rjmp	.+2022   	; 0x29c0 <main+0xc10>

            } else if(strncasecmp(termbuf_ptr,"RESET",5)==0) {
    21da:	45 e0       	ldi	r20, 0x05	; 5
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	62 e1       	ldi	r22, 0x12	; 18
    21e0:	74 e0       	ldi	r23, 0x04	; 4
    21e2:	c8 01       	movw	r24, r16
    21e4:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    21e8:	89 2b       	or	r24, r25
    21ea:	09 f0       	breq	.+2      	; 0x21ee <main+0x43e>
    21ec:	41 c0       	rjmp	.+130    	; 0x2270 <main+0x4c0>
                termbuf_ptr[5]=0;
    21ee:	f8 01       	movw	r30, r16
    21f0:	15 82       	std	Z+5, r1	; 0x05
                sysval.Ws_in=0;
    21f2:	ef e3       	ldi	r30, 0x3F	; 63
    21f4:	f0 e1       	ldi	r31, 0x10	; 16
    21f6:	10 82       	st	Z, r1
    21f8:	11 82       	std	Z+1, r1	; 0x01
    21fa:	12 82       	std	Z+2, r1	; 0x02
    21fc:	13 82       	std	Z+3, r1	; 0x03
                sysval.Ws_out=0;
    21fe:	0f 2e       	mov	r0, r31
    2200:	f3 e4       	ldi	r31, 0x43	; 67
    2202:	af 2e       	mov	r10, r31
    2204:	f0 e1       	ldi	r31, 0x10	; 16
    2206:	bf 2e       	mov	r11, r31
    2208:	f0 2d       	mov	r31, r0
    220a:	d5 01       	movw	r26, r10
    220c:	1d 92       	st	X+, r1
    220e:	1d 92       	st	X+, r1
    2210:	1d 92       	st	X+, r1
    2212:	1c 92       	st	X, r1
    2214:	13 97       	sbiw	r26, 0x03	; 3

                sysval.Door_open=0;
    2216:	10 92 58 10 	sts	0x1058, r1	; 0x801058 <sysval+0x99>
                sysval.payled_mode=PAYLED_MODE_OFF;
    221a:	0f 2e       	mov	r0, r31
    221c:	fb e5       	ldi	r31, 0x5B	; 91
    221e:	cf 2e       	mov	r12, r31
    2220:	f0 e1       	ldi	r31, 0x10	; 16
    2222:	df 2e       	mov	r13, r31
    2224:	f0 2d       	mov	r31, r0
    2226:	d6 01       	movw	r26, r12
    2228:	1c 92       	st	X, r1

                sreg=SREG; cli();
    222a:	3f b6       	in	r3, 0x3f	; 63
    222c:	f8 94       	cli
                eeprom_update_dword(&EEPROM_ADDR_Ws_in,sysval.Ws_in);
    222e:	40 81       	ld	r20, Z
    2230:	51 81       	ldd	r21, Z+1	; 0x01
    2232:	62 81       	ldd	r22, Z+2	; 0x02
    2234:	73 81       	ldd	r23, Z+3	; 0x03
    2236:	89 ee       	ldi	r24, 0xE9	; 233
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 a3 32 	call	0x6546	; 0x6546 <eeprom_update_dword>
                eeprom_update_dword(&EEPROM_ADDR_Ws_out,sysval.Ws_out);
    223e:	f5 01       	movw	r30, r10
    2240:	40 81       	ld	r20, Z
    2242:	51 81       	ldd	r21, Z+1	; 0x01
    2244:	62 81       	ldd	r22, Z+2	; 0x02
    2246:	73 81       	ldd	r23, Z+3	; 0x03
    2248:	85 ee       	ldi	r24, 0xE5	; 229
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 a3 32 	call	0x6546	; 0x6546 <eeprom_update_dword>
                eeprom_update_byte(&EEPROM_ADDR_LED_mode,sysval.payled_mode);
    2250:	d6 01       	movw	r26, r12
    2252:	6c 91       	ld	r22, X
    2254:	86 ef       	ldi	r24, 0xF6	; 246
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 91 32 	call	0x6522	; 0x6522 <eeprom_update_byte>
                SREG=sreg;
    225c:	3f be       	out	0x3f, r3	; 63

                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    225e:	be 01       	movw	r22, r28
    2260:	6b 5e       	subi	r22, 0xEB	; 235
    2262:	7d 4f       	sbci	r23, 0xFD	; 253
    2264:	c8 01       	movw	r24, r16
    2266:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
    226a:	18 2f       	mov	r17, r24
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    226c:	03 e0       	ldi	r16, 0x03	; 3
    226e:	a8 c3       	rjmp	.+1872   	; 0x29c0 <main+0xc10>

            } else if(strncasecmp(termbuf_ptr,"RESTART",7)==0) {
    2270:	47 e0       	ldi	r20, 0x07	; 7
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	62 ed       	ldi	r22, 0xD2	; 210
    2276:	75 e0       	ldi	r23, 0x05	; 5
    2278:	c8 01       	movw	r24, r16
    227a:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    227e:	89 2b       	or	r24, r25
    2280:	d9 f4       	brne	.+54     	; 0x22b8 <main+0x508>
                termbuf_ptr[7]=0;
    2282:	f8 01       	movw	r30, r16
    2284:	17 82       	std	Z+7, r1	; 0x07
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset); 
    2286:	be 01       	movw	r22, r28
    2288:	6b 5e       	subi	r22, 0xEB	; 235
    228a:	7d 4f       	sbci	r23, 0xFD	; 253
    228c:	c8 01       	movw	r24, r16
    228e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                send_2g_message(UART_SIM_TxBuf,sms_size);
    2292:	18 2f       	mov	r17, r24
    2294:	68 2f       	mov	r22, r24
    2296:	8a eb       	ldi	r24, 0xBA	; 186
    2298:	9c e0       	ldi	r25, 0x0C	; 12
                sms_size-=sms_start_offset;
    229a:	6a da       	rcall	.-2860   	; 0x1770 <send_2g_message>
    229c:	cb 5e       	subi	r28, 0xEB	; 235
    229e:	dd 4f       	sbci	r29, 0xFD	; 253
    22a0:	88 81       	ld	r24, Y
    22a2:	c5 51       	subi	r28, 0x15	; 21
                sim_send_sms(&UART_SIM_TxBuf[sms_start_offset],sms_size,sysval.actual_operator_idx);
    22a4:	d2 40       	sbci	r29, 0x02	; 2
    22a6:	40 91 5c 10 	lds	r20, 0x105C	; 0x80105c <sysval+0x9d>
    22aa:	61 2f       	mov	r22, r17
    22ac:	68 1b       	sub	r22, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	86 54       	subi	r24, 0x46	; 70
    22b2:	93 4f       	sbci	r25, 0xF3	; 243
    22b4:	fa d7       	rcall	.+4084   	; 0x32aa <sim_send_sms>
                RESTART_MICROCONTROLLER();

            } else if(strncasecmp(termbuf_ptr,"OPER",4)==0) {
    22b6:	ff cf       	rjmp	.-2      	; 0x22b6 <main+0x506>
    22b8:	44 e0       	ldi	r20, 0x04	; 4
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	6a ed       	ldi	r22, 0xDA	; 218
    22be:	75 e0       	ldi	r23, 0x05	; 5
    22c0:	c8 01       	movw	r24, r16
    22c2:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    22c6:	89 2b       	or	r24, r25
    22c8:	09 f0       	breq	.+2      	; 0x22cc <main+0x51c>
                char operator_phonenr[MAX_PHONE_NR_LENGTH];
                int i;
                char c;
                char *idx_ptr=termbuf_ptr+4;
    22ca:	65 c0       	rjmp	.+202    	; 0x2396 <main+0x5e6>
    22cc:	c8 01       	movw	r24, r16
                char *phonenr_ptr=termbuf_ptr+6;
    22ce:	04 96       	adiw	r24, 0x04	; 4
    22d0:	68 01       	movw	r12, r16
    22d2:	f6 e0       	ldi	r31, 0x06	; 6
    22d4:	cf 0e       	add	r12, r31
                if(isdigit(idx_ptr[0])) {
    22d6:	d1 1c       	adc	r13, r1
    22d8:	d8 01       	movw	r26, r16
    22da:	14 96       	adiw	r26, 0x04	; 4
    22dc:	2c 91       	ld	r18, X
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	20 53       	subi	r18, 0x30	; 48
    22e2:	31 09       	sbc	r19, r1
    22e4:	2a 30       	cpi	r18, 0x0A	; 10
    22e6:	31 05       	cpc	r19, r1
    22e8:	08 f0       	brcs	.+2      	; 0x22ec <main+0x53c>
                    int idx=atoi(idx_ptr);
    22ea:	60 c3       	rjmp	.+1728   	; 0x29ac <main+0xbfc>
    22ec:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
                    while((c=*phonenr_ptr) != 0) {
    22f0:	ac 01       	movw	r20, r24
    22f2:	f8 01       	movw	r30, r16
    22f4:	96 81       	ldd	r25, Z+6	; 0x06
    22f6:	99 23       	and	r25, r25
    22f8:	81 f0       	breq	.+32     	; 0x231a <main+0x56a>
                        if(!isdigit(c) && c!='+') { *phonenr_ptr=0; break; }
    22fa:	f6 01       	movw	r30, r12
    22fc:	29 2f       	mov	r18, r25
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	20 53       	subi	r18, 0x30	; 48
    2302:	31 09       	sbc	r19, r1
    2304:	2a 30       	cpi	r18, 0x0A	; 10
    2306:	31 05       	cpc	r19, r1
    2308:	20 f0       	brcs	.+8      	; 0x2312 <main+0x562>
    230a:	9b 32       	cpi	r25, 0x2B	; 43
    230c:	11 f0       	breq	.+4      	; 0x2312 <main+0x562>
    230e:	10 82       	st	Z, r1
                        phonenr_ptr++;
    2310:	04 c0       	rjmp	.+8      	; 0x231a <main+0x56a>
                char c;
                char *idx_ptr=termbuf_ptr+4;
                char *phonenr_ptr=termbuf_ptr+6;
                if(isdigit(idx_ptr[0])) {
                    int idx=atoi(idx_ptr);
                    while((c=*phonenr_ptr) != 0) {
    2312:	31 96       	adiw	r30, 0x01	; 1
    2314:	90 81       	ld	r25, Z
                        if(!isdigit(c) && c!='+') { *phonenr_ptr=0; break; }
                        phonenr_ptr++;
                    }
                    phonenr_ptr=termbuf_ptr+6;
                    write_operator_phonenr_to_eeprom(idx,phonenr_ptr);
    2316:	91 11       	cpse	r25, r1
    2318:	f1 cf       	rjmp	.-30     	; 0x22fc <main+0x54c>
    231a:	b6 01       	movw	r22, r12
    231c:	ca 01       	movw	r24, r20
    231e:	59 da       	rcall	.-2894   	; 0x17d2 <write_operator_phonenr_to_eeprom>
                }

                sms_size=0;
                for(i=0;i<MAX_NR_OPERATORS;i++) {
                    if(i>0) sms_size+=sprintf(&UART_SIM_TxBuf[sms_size],";");
    2320:	45 c3       	rjmp	.+1674   	; 0x29ac <main+0xbfc>
    2322:	1c 14       	cp	r1, r12
    2324:	1d 04       	cpc	r1, r13
    2326:	4c f4       	brge	.+18     	; 0x233a <main+0x58a>
    2328:	e1 2f       	mov	r30, r17
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	e6 54       	subi	r30, 0x46	; 70
    232e:	f3 4f       	sbci	r31, 0xF3	; 243
    2330:	8b e3       	ldi	r24, 0x3B	; 59
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	1f 5f       	subi	r17, 0xFF	; 255
    233a:	94 e1       	ldi	r25, 0x14	; 20
    233c:	a9 0e       	add	r10, r25
                    eeprom_read_block(operator_phonenr,&EEPROM_ADDR_OperatorNr[i],
    233e:	b1 1c       	adc	r11, r1
    2340:	44 e1       	ldi	r20, 0x14	; 20
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	b5 01       	movw	r22, r10
    2346:	ca 5e       	subi	r28, 0xEA	; 234
    2348:	dd 4f       	sbci	r29, 0xFD	; 253
    234a:	88 81       	ld	r24, Y
    234c:	c6 51       	subi	r28, 0x16	; 22
    234e:	d2 40       	sbci	r29, 0x02	; 2
    2350:	c9 5e       	subi	r28, 0xE9	; 233
    2352:	dd 4f       	sbci	r29, 0xFD	; 253
    2354:	98 81       	ld	r25, Y
    2356:	c7 51       	subi	r28, 0x17	; 23
    2358:	d2 40       	sbci	r29, 0x02	; 2
    235a:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
                                      MAX_PHONE_NR_LENGTH);
                    sms_size+=sprintf(&UART_SIM_TxBuf[sms_size],"%s",operator_phonenr);
    235e:	5f 92       	push	r5
    2360:	4f 92       	push	r4
    2362:	7f 92       	push	r7
    2364:	6f 92       	push	r6
    2366:	81 2f       	mov	r24, r17
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	86 54       	subi	r24, 0x46	; 70
    236c:	93 4f       	sbci	r25, 0xF3	; 243
    236e:	9f 93       	push	r25
    2370:	8f 93       	push	r24
    2372:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
                    phonenr_ptr=termbuf_ptr+6;
                    write_operator_phonenr_to_eeprom(idx,phonenr_ptr);
                }

                sms_size=0;
                for(i=0;i<MAX_NR_OPERATORS;i++) {
    2376:	18 0f       	add	r17, r24
    2378:	af ef       	ldi	r26, 0xFF	; 255
    237a:	ca 1a       	sub	r12, r26
    237c:	da 0a       	sbc	r13, r26
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	b7 e0       	ldi	r27, 0x07	; 7
    238c:	cb 16       	cp	r12, r27
    238e:	d1 04       	cpc	r13, r1
                    if(i>0) sms_size+=sprintf(&UART_SIM_TxBuf[sms_size],";");
                    eeprom_read_block(operator_phonenr,&EEPROM_ADDR_OperatorNr[i],
                                      MAX_PHONE_NR_LENGTH);
                    sms_size+=sprintf(&UART_SIM_TxBuf[sms_size],"%s",operator_phonenr);
                }
                sms_reply_to=(1<<REPLY_WITH_SMS);
    2390:	41 f6       	brne	.-112    	; 0x2322 <main+0x572>
    2392:	02 e0       	ldi	r16, 0x02	; 2

            } else if(strncasecmp(termbuf_ptr,"host=",5)==0) { // expect: hostname
    2394:	15 c3       	rjmp	.+1578   	; 0x29c0 <main+0xc10>
    2396:	45 e0       	ldi	r20, 0x05	; 5
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	6f ed       	ldi	r22, 0xDF	; 223
    239c:	75 e0       	ldi	r23, 0x05	; 5
    239e:	c8 01       	movw	r24, r16
    23a0:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    23a4:	89 2b       	or	r24, r25
                char c;
                char *ptr=&termbuf_ptr[5];
    23a6:	e9 f5       	brne	.+122    	; 0x2422 <main+0x672>
    23a8:	68 01       	movw	r12, r16
    23aa:	e5 e0       	ldi	r30, 0x05	; 5
    23ac:	ce 0e       	add	r12, r30
                while((c=*ptr) != 0) {
    23ae:	d1 1c       	adc	r13, r1
    23b0:	d8 01       	movw	r26, r16
    23b2:	15 96       	adiw	r26, 0x05	; 5
    23b4:	8c 91       	ld	r24, X
    23b6:	88 23       	and	r24, r24
    23b8:	81 f0       	breq	.+32     	; 0x23da <main+0x62a>
                    if(isspace(c)) { *ptr=0; break; }
    23ba:	56 01       	movw	r10, r12
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 2c 2b 	call	0x5658	; 0x5658 <isspace>
    23c2:	89 2b       	or	r24, r25
    23c4:	19 f0       	breq	.+6      	; 0x23cc <main+0x61c>
    23c6:	f5 01       	movw	r30, r10
    23c8:	10 82       	st	Z, r1
                    ptr++;
    23ca:	07 c0       	rjmp	.+14     	; 0x23da <main+0x62a>
    23cc:	ff ef       	ldi	r31, 0xFF	; 255
    23ce:	af 1a       	sub	r10, r31
                sms_reply_to=(1<<REPLY_WITH_SMS);

            } else if(strncasecmp(termbuf_ptr,"host=",5)==0) { // expect: hostname
                char c;
                char *ptr=&termbuf_ptr[5];
                while((c=*ptr) != 0) {
    23d0:	bf 0a       	sbc	r11, r31
    23d2:	d5 01       	movw	r26, r10
    23d4:	8c 91       	ld	r24, X
    23d6:	81 11       	cpse	r24, r1
                    if(isspace(c)) { *ptr=0; break; }
                    ptr++;
                }
                sreg=SREG; cli();
    23d8:	f1 cf       	rjmp	.-30     	; 0x23bc <main+0x60c>
    23da:	bf b6       	in	r11, 0x3f	; 63
                eeprom_update_block(&termbuf_ptr[5],&EEPROM_ADDR_hostname,strlen(termbuf_ptr)-5+1); // incl \0
    23dc:	f8 94       	cli
    23de:	f8 01       	movw	r30, r16
    23e0:	01 90       	ld	r0, Z+
    23e2:	00 20       	and	r0, r0
    23e4:	e9 f7       	brne	.-6      	; 0x23e0 <main+0x630>
    23e6:	af 01       	movw	r20, r30
    23e8:	40 1b       	sub	r20, r16
    23ea:	51 0b       	sbc	r21, r17
    23ec:	45 50       	subi	r20, 0x05	; 5
    23ee:	51 09       	sbc	r21, r1
    23f0:	61 e3       	ldi	r22, 0x31	; 49
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	c6 01       	movw	r24, r12
    23f6:	0e 94 82 32 	call	0x6504	; 0x6504 <eeprom_update_block>
                SREG=sreg;
                sms_size=sprintf(UART_SIM_TxBuf,"%s",&termbuf_ptr[5]);
    23fa:	bf be       	out	0x3f, r11	; 63
    23fc:	df 92       	push	r13
    23fe:	cf 92       	push	r12
    2400:	7f 92       	push	r7
    2402:	6f 92       	push	r6
    2404:	8a eb       	ldi	r24, 0xBA	; 186
    2406:	9c e0       	ldi	r25, 0x0C	; 12
    2408:	9f 93       	push	r25
    240a:	8f 93       	push	r24
    240c:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    2410:	18 2f       	mov	r17, r24
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
                sms_reply_to=(1<<REPLY_WITH_SMS);
    241c:	0f 90       	pop	r0
    241e:	02 e0       	ldi	r16, 0x02	; 2

            } else if(strncasecmp(termbuf_ptr,"apn=",4)==0) { // expect: APN
    2420:	cf c2       	rjmp	.+1438   	; 0x29c0 <main+0xc10>
    2422:	44 e0       	ldi	r20, 0x04	; 4
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	65 ee       	ldi	r22, 0xE5	; 229
    2428:	75 e0       	ldi	r23, 0x05	; 5
    242a:	c8 01       	movw	r24, r16
    242c:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    2430:	89 2b       	or	r24, r25
                char c;
                char *ptr=&termbuf_ptr[4];
    2432:	d1 f5       	brne	.+116    	; 0x24a8 <main+0x6f8>
    2434:	68 01       	movw	r12, r16
    2436:	b4 e0       	ldi	r27, 0x04	; 4
    2438:	cb 0e       	add	r12, r27
    243a:	d1 1c       	adc	r13, r1
                while((c=*ptr) != 0) {
    243c:	56 01       	movw	r10, r12
                    if(isspace(c)) { *ptr=0; break; }
    243e:	08 c0       	rjmp	.+16     	; 0x2450 <main+0x6a0>
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 2c 2b 	call	0x5658	; 0x5658 <isspace>
    2446:	89 2b       	or	r24, r25
    2448:	19 f0       	breq	.+6      	; 0x2450 <main+0x6a0>
    244a:	f1 01       	movw	r30, r2
    244c:	10 82       	st	Z, r1
    244e:	06 c0       	rjmp	.+12     	; 0x245c <main+0x6ac>
                sms_reply_to=(1<<REPLY_WITH_SMS);

            } else if(strncasecmp(termbuf_ptr,"apn=",4)==0) { // expect: APN
                char c;
                char *ptr=&termbuf_ptr[4];
                while((c=*ptr) != 0) {
    2450:	15 01       	movw	r2, r10
    2452:	d5 01       	movw	r26, r10
    2454:	8d 91       	ld	r24, X+
    2456:	5d 01       	movw	r10, r26
    2458:	81 11       	cpse	r24, r1
                    if(isspace(c)) { *ptr=0; break; }
                    ptr++;
                }
                sreg=SREG; cli();
    245a:	f2 cf       	rjmp	.-28     	; 0x2440 <main+0x690>
    245c:	bf b6       	in	r11, 0x3f	; 63
                eeprom_update_block(&termbuf_ptr[4],&EEPROM_ADDR_apn,strlen(termbuf_ptr)-4+1); // incl \0
    245e:	f8 94       	cli
    2460:	f8 01       	movw	r30, r16
    2462:	01 90       	ld	r0, Z+
    2464:	00 20       	and	r0, r0
    2466:	e9 f7       	brne	.-6      	; 0x2462 <main+0x6b2>
    2468:	af 01       	movw	r20, r30
    246a:	40 1b       	sub	r20, r16
    246c:	51 0b       	sbc	r21, r17
    246e:	44 50       	subi	r20, 0x04	; 4
    2470:	51 09       	sbc	r21, r1
    2472:	61 e2       	ldi	r22, 0x21	; 33
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	c6 01       	movw	r24, r12
    2478:	0e 94 82 32 	call	0x6504	; 0x6504 <eeprom_update_block>
                SREG=sreg;
                sms_size=sprintf(UART_SIM_TxBuf,"\"%s\"",&termbuf_ptr[4]);
    247c:	bf be       	out	0x3f, r11	; 63
    247e:	df 92       	push	r13
    2480:	cf 92       	push	r12
    2482:	8a ee       	ldi	r24, 0xEA	; 234
    2484:	95 e0       	ldi	r25, 0x05	; 5
    2486:	9f 93       	push	r25
    2488:	8f 93       	push	r24
    248a:	8a eb       	ldi	r24, 0xBA	; 186
    248c:	9c e0       	ldi	r25, 0x0C	; 12
    248e:	9f 93       	push	r25
    2490:	8f 93       	push	r24
    2492:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    2496:	18 2f       	mov	r17, r24
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
                sms_reply_to=(1<<REPLY_WITH_SMS);
    24a2:	0f 90       	pop	r0
    24a4:	02 e0       	ldi	r16, 0x02	; 2

            } else if(strncasecmp(termbuf_ptr,"user=",5)==0) { // expect: user
    24a6:	8c c2       	rjmp	.+1304   	; 0x29c0 <main+0xc10>
    24a8:	45 e0       	ldi	r20, 0x05	; 5
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	6f ee       	ldi	r22, 0xEF	; 239
    24ae:	75 e0       	ldi	r23, 0x05	; 5
    24b0:	c8 01       	movw	r24, r16
    24b2:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    24b6:	89 2b       	or	r24, r25
                char c;
                char *ptr=&termbuf_ptr[5];
    24b8:	d1 f5       	brne	.+116    	; 0x252e <main+0x77e>
    24ba:	68 01       	movw	r12, r16
    24bc:	b5 e0       	ldi	r27, 0x05	; 5
    24be:	cb 0e       	add	r12, r27
    24c0:	d1 1c       	adc	r13, r1
                while((c=*ptr) != 0) {
    24c2:	56 01       	movw	r10, r12
                    if(isspace(c)) { *ptr=0; break; }
    24c4:	08 c0       	rjmp	.+16     	; 0x24d6 <main+0x726>
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0e 94 2c 2b 	call	0x5658	; 0x5658 <isspace>
    24cc:	89 2b       	or	r24, r25
    24ce:	19 f0       	breq	.+6      	; 0x24d6 <main+0x726>
    24d0:	f1 01       	movw	r30, r2
    24d2:	10 82       	st	Z, r1
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <main+0x732>
                sms_reply_to=(1<<REPLY_WITH_SMS);

            } else if(strncasecmp(termbuf_ptr,"user=",5)==0) { // expect: user
                char c;
                char *ptr=&termbuf_ptr[5];
                while((c=*ptr) != 0) {
    24d6:	15 01       	movw	r2, r10
    24d8:	d5 01       	movw	r26, r10
    24da:	8d 91       	ld	r24, X+
    24dc:	5d 01       	movw	r10, r26
    24de:	81 11       	cpse	r24, r1
                    if(isspace(c)) { *ptr=0; break; }
                    ptr++;
                }
                sreg=SREG; cli();
    24e0:	f2 cf       	rjmp	.-28     	; 0x24c6 <main+0x716>
    24e2:	bf b6       	in	r11, 0x3f	; 63
                eeprom_update_block(&termbuf_ptr[5],&EEPROM_ADDR_user,strlen(termbuf_ptr)-5+1); // incl \0
    24e4:	f8 94       	cli
    24e6:	f8 01       	movw	r30, r16
    24e8:	01 90       	ld	r0, Z+
    24ea:	00 20       	and	r0, r0
    24ec:	e9 f7       	brne	.-6      	; 0x24e8 <main+0x738>
    24ee:	af 01       	movw	r20, r30
    24f0:	40 1b       	sub	r20, r16
    24f2:	51 0b       	sbc	r21, r17
    24f4:	45 50       	subi	r20, 0x05	; 5
    24f6:	51 09       	sbc	r21, r1
    24f8:	61 e1       	ldi	r22, 0x11	; 17
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	c6 01       	movw	r24, r12
    24fe:	0e 94 82 32 	call	0x6504	; 0x6504 <eeprom_update_block>
                SREG=sreg;
                sms_size=sprintf(UART_SIM_TxBuf,"\"%s\"",&termbuf_ptr[5]);
    2502:	bf be       	out	0x3f, r11	; 63
    2504:	df 92       	push	r13
    2506:	cf 92       	push	r12
    2508:	8a ee       	ldi	r24, 0xEA	; 234
    250a:	95 e0       	ldi	r25, 0x05	; 5
    250c:	9f 93       	push	r25
    250e:	8f 93       	push	r24
    2510:	8a eb       	ldi	r24, 0xBA	; 186
    2512:	9c e0       	ldi	r25, 0x0C	; 12
    2514:	9f 93       	push	r25
    2516:	8f 93       	push	r24
    2518:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    251c:	18 2f       	mov	r17, r24
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
                sms_reply_to=(1<<REPLY_WITH_SMS);
    2528:	0f 90       	pop	r0
    252a:	02 e0       	ldi	r16, 0x02	; 2

            } else if(strncasecmp(termbuf_ptr,"pwd=",4)==0) { // expect: pwd
    252c:	49 c2       	rjmp	.+1170   	; 0x29c0 <main+0xc10>
    252e:	44 e0       	ldi	r20, 0x04	; 4
    2530:	50 e0       	ldi	r21, 0x00	; 0
    2532:	65 ef       	ldi	r22, 0xF5	; 245
    2534:	75 e0       	ldi	r23, 0x05	; 5
    2536:	c8 01       	movw	r24, r16
    2538:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    253c:	89 2b       	or	r24, r25
                char c;
                char *ptr=&termbuf_ptr[4];
    253e:	d1 f5       	brne	.+116    	; 0x25b4 <main+0x804>
    2540:	68 01       	movw	r12, r16
    2542:	b4 e0       	ldi	r27, 0x04	; 4
    2544:	cb 0e       	add	r12, r27
    2546:	d1 1c       	adc	r13, r1
                while((c=*ptr) != 0) {
    2548:	56 01       	movw	r10, r12
                    if(isspace(c)) { *ptr=0; break; }
    254a:	08 c0       	rjmp	.+16     	; 0x255c <main+0x7ac>
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 2c 2b 	call	0x5658	; 0x5658 <isspace>
    2552:	89 2b       	or	r24, r25
    2554:	19 f0       	breq	.+6      	; 0x255c <main+0x7ac>
    2556:	f1 01       	movw	r30, r2
    2558:	10 82       	st	Z, r1
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <main+0x7b8>
                sms_reply_to=(1<<REPLY_WITH_SMS);

            } else if(strncasecmp(termbuf_ptr,"pwd=",4)==0) { // expect: pwd
                char c;
                char *ptr=&termbuf_ptr[4];
                while((c=*ptr) != 0) {
    255c:	15 01       	movw	r2, r10
    255e:	d5 01       	movw	r26, r10
    2560:	8d 91       	ld	r24, X+
    2562:	5d 01       	movw	r10, r26
    2564:	81 11       	cpse	r24, r1
                    if(isspace(c)) { *ptr=0; break; }
                    ptr++;
                }
                sreg=SREG; cli();
    2566:	f2 cf       	rjmp	.-28     	; 0x254c <main+0x79c>
    2568:	bf b6       	in	r11, 0x3f	; 63
                eeprom_update_block(&termbuf_ptr[4],&EEPROM_ADDR_pwd,strlen(termbuf_ptr)-4+1); // incl \0
    256a:	f8 94       	cli
    256c:	f8 01       	movw	r30, r16
    256e:	01 90       	ld	r0, Z+
    2570:	00 20       	and	r0, r0
    2572:	e9 f7       	brne	.-6      	; 0x256e <main+0x7be>
    2574:	af 01       	movw	r20, r30
    2576:	40 1b       	sub	r20, r16
    2578:	51 0b       	sbc	r21, r17
    257a:	44 50       	subi	r20, 0x04	; 4
    257c:	51 09       	sbc	r21, r1
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	c6 01       	movw	r24, r12
    2584:	0e 94 82 32 	call	0x6504	; 0x6504 <eeprom_update_block>
                SREG=sreg;
                sms_size=sprintf(UART_SIM_TxBuf,"\"%s\"",&termbuf_ptr[4]);
    2588:	bf be       	out	0x3f, r11	; 63
    258a:	df 92       	push	r13
    258c:	cf 92       	push	r12
    258e:	8a ee       	ldi	r24, 0xEA	; 234
    2590:	95 e0       	ldi	r25, 0x05	; 5
    2592:	9f 93       	push	r25
    2594:	8f 93       	push	r24
    2596:	8a eb       	ldi	r24, 0xBA	; 186
    2598:	9c e0       	ldi	r25, 0x0C	; 12
    259a:	9f 93       	push	r25
    259c:	8f 93       	push	r24
    259e:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    25a2:	18 2f       	mov	r17, r24
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
                sms_reply_to=(1<<REPLY_WITH_SMS);
    25ae:	0f 90       	pop	r0
    25b0:	02 e0       	ldi	r16, 0x02	; 2

            } else if(strncasecmp(termbuf_ptr,"PAYLED=",7)==0) { // expect: 0,1,2 or 3
    25b2:	06 c2       	rjmp	.+1036   	; 0x29c0 <main+0xc10>
    25b4:	47 e0       	ldi	r20, 0x07	; 7
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	6a ef       	ldi	r22, 0xFA	; 250
    25ba:	75 e0       	ldi	r23, 0x05	; 5
    25bc:	c8 01       	movw	r24, r16
    25be:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    25c2:	89 2b       	or	r24, r25
                char *bufptr=&termbuf_ptr[7];
                termbuf_ptr[8]=0;
    25c4:	d1 f4       	brne	.+52     	; 0x25fa <main+0x84a>
    25c6:	f8 01       	movw	r30, r16
                sysval.payled_mode=atoi(bufptr);
    25c8:	10 86       	std	Z+8, r1	; 0x08
    25ca:	c8 01       	movw	r24, r16
    25cc:	07 96       	adiw	r24, 0x07	; 7
    25ce:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
    25d2:	eb e5       	ldi	r30, 0x5B	; 91
    25d4:	f0 e1       	ldi	r31, 0x10	; 16
                sreg=SREG; cli();
    25d6:	80 83       	st	Z, r24
    25d8:	df b6       	in	r13, 0x3f	; 63
                eeprom_update_byte(&EEPROM_ADDR_LED_mode,sysval.payled_mode);
    25da:	f8 94       	cli
    25dc:	60 81       	ld	r22, Z
    25de:	86 ef       	ldi	r24, 0xF6	; 246
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 91 32 	call	0x6522	; 0x6522 <eeprom_update_byte>
                SREG=sreg;
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    25e6:	df be       	out	0x3f, r13	; 63
    25e8:	be 01       	movw	r22, r28
    25ea:	6b 5e       	subi	r22, 0xEB	; 235
    25ec:	7d 4f       	sbci	r23, 0xFD	; 253
    25ee:	c8 01       	movw	r24, r16
    25f0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    25f4:	18 2f       	mov	r17, r24
    25f6:	03 e0       	ldi	r16, 0x03	; 3

            } else if(strncasecmp(termbuf_ptr,"T_SMS=",6)==0) { // expect: minutes
    25f8:	e3 c1       	rjmp	.+966    	; 0x29c0 <main+0xc10>
    25fa:	46 e0       	ldi	r20, 0x06	; 6
    25fc:	50 e0       	ldi	r21, 0x00	; 0
    25fe:	62 e0       	ldi	r22, 0x02	; 2
    2600:	76 e0       	ldi	r23, 0x06	; 6
    2602:	c8 01       	movw	r24, r16
    2604:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    2608:	89 2b       	or	r24, r25
    260a:	09 f0       	breq	.+2      	; 0x260e <main+0x85e>
                char *bufptr=&termbuf_ptr[6];
    260c:	49 c0       	rjmp	.+146    	; 0x26a0 <main+0x8f0>
    260e:	c8 01       	movw	r24, r16
                int i;
                for(i=6;i<strlen(termbuf_ptr);i++) {
    2610:	06 96       	adiw	r24, 0x06	; 6
    2612:	f8 01       	movw	r30, r16
    2614:	01 90       	ld	r0, Z+
    2616:	00 20       	and	r0, r0
    2618:	e9 f7       	brne	.-6      	; 0x2614 <main+0x864>
    261a:	31 97       	sbiw	r30, 0x01	; 1
    261c:	9f 01       	movw	r18, r30
    261e:	20 1b       	sub	r18, r16
    2620:	31 0b       	sbc	r19, r17
    2622:	bc 01       	movw	r22, r24
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
    2624:	0c c0       	rjmp	.+24     	; 0x263e <main+0x88e>
    2626:	fb 01       	movw	r30, r22
    2628:	6f 5f       	subi	r22, 0xFF	; 255
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	40 81       	ld	r20, Z
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	40 53       	subi	r20, 0x30	; 48
    2632:	51 09       	sbc	r21, r1
    2634:	4a 30       	cpi	r20, 0x0A	; 10
    2636:	51 05       	cpc	r21, r1
    2638:	10 f0       	brcs	.+4      	; 0x263e <main+0x88e>
    263a:	10 82       	st	Z, r1
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));

            } else if(strncasecmp(termbuf_ptr,"T_SMS=",6)==0) { // expect: minutes
                char *bufptr=&termbuf_ptr[6];
                int i;
                for(i=6;i<strlen(termbuf_ptr);i++) {
    263c:	06 c0       	rjmp	.+12     	; 0x264a <main+0x89a>
    263e:	ab 01       	movw	r20, r22
    2640:	40 1b       	sub	r20, r16
    2642:	51 0b       	sbc	r21, r17
    2644:	42 17       	cp	r20, r18
    2646:	53 07       	cpc	r21, r19
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
                }
                sreg=SREG; cli();
    2648:	70 f3       	brcs	.-36     	; 0x2626 <main+0x876>
    264a:	df b6       	in	r13, 0x3f	; 63
                sysval.intervalSMS=(uint16_t)atol(bufptr);
    264c:	f8 94       	cli
    264e:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <atol>
    2652:	d7 01       	movw	r26, r14
    2654:	50 96       	adiw	r26, 0x10	; 16
    2656:	7c 93       	st	X, r23
    2658:	6e 93       	st	-X, r22
                if(sysval.intervalSMS > MINUTES_PER_DAY) sysval.intervalSMS=MINUTES_PER_DAY;
    265a:	1f 97       	sbiw	r26, 0x0f	; 15
    265c:	1f 96       	adiw	r26, 0x0f	; 15
    265e:	8d 91       	ld	r24, X+
    2660:	9c 91       	ld	r25, X
    2662:	50 97       	sbiw	r26, 0x10	; 16
    2664:	81 3a       	cpi	r24, 0xA1	; 161
    2666:	95 40       	sbci	r25, 0x05	; 5
    2668:	28 f0       	brcs	.+10     	; 0x2674 <main+0x8c4>
    266a:	80 ea       	ldi	r24, 0xA0	; 160
    266c:	95 e0       	ldi	r25, 0x05	; 5
    266e:	f7 01       	movw	r30, r14
    2670:	90 8b       	std	Z+16, r25	; 0x10
                SREG=sreg;
    2672:	87 87       	std	Z+15, r24	; 0x0f
                

                sreg=SREG; cli();
    2674:	df be       	out	0x3f, r13	; 63
    2676:	df b6       	in	r13, 0x3f	; 63
                eeprom_update_word(&EEPROM_ADDR_intervalSMS,sysval.intervalSMS);
    2678:	f8 94       	cli
    267a:	d7 01       	movw	r26, r14
    267c:	1f 96       	adiw	r26, 0x0f	; 15
    267e:	6d 91       	ld	r22, X+
    2680:	7c 91       	ld	r23, X
    2682:	50 97       	sbiw	r26, 0x10	; 16
    2684:	83 ef       	ldi	r24, 0xF3	; 243
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 ab 32 	call	0x6556	; 0x6556 <eeprom_update_word>
                SREG=sreg;
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    268c:	df be       	out	0x3f, r13	; 63
    268e:	be 01       	movw	r22, r28
    2690:	6b 5e       	subi	r22, 0xEB	; 235
    2692:	7d 4f       	sbci	r23, 0xFD	; 253
    2694:	c8 01       	movw	r24, r16
    2696:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    269a:	18 2f       	mov	r17, r24
    269c:	03 e0       	ldi	r16, 0x03	; 3

            } else if(strncasecmp(termbuf_ptr,"T_2G=",5)==0) { // expect: minutes
    269e:	90 c1       	rjmp	.+800    	; 0x29c0 <main+0xc10>
    26a0:	45 e0       	ldi	r20, 0x05	; 5
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	69 e0       	ldi	r22, 0x09	; 9
    26a6:	76 e0       	ldi	r23, 0x06	; 6
    26a8:	c8 01       	movw	r24, r16
    26aa:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    26ae:	89 2b       	or	r24, r25
    26b0:	09 f0       	breq	.+2      	; 0x26b4 <main+0x904>
                char *bufptr=&termbuf_ptr[5];
    26b2:	45 c0       	rjmp	.+138    	; 0x273e <main+0x98e>
    26b4:	c8 01       	movw	r24, r16
                int i;
                for(i=5;i<strlen(termbuf_ptr);i++) {
    26b6:	05 96       	adiw	r24, 0x05	; 5
    26b8:	f8 01       	movw	r30, r16
    26ba:	01 90       	ld	r0, Z+
    26bc:	00 20       	and	r0, r0
    26be:	e9 f7       	brne	.-6      	; 0x26ba <main+0x90a>
    26c0:	31 97       	sbiw	r30, 0x01	; 1
    26c2:	9f 01       	movw	r18, r30
    26c4:	20 1b       	sub	r18, r16
    26c6:	31 0b       	sbc	r19, r17
    26c8:	bc 01       	movw	r22, r24
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
    26ca:	0c c0       	rjmp	.+24     	; 0x26e4 <main+0x934>
    26cc:	fb 01       	movw	r30, r22
    26ce:	6f 5f       	subi	r22, 0xFF	; 255
    26d0:	7f 4f       	sbci	r23, 0xFF	; 255
    26d2:	40 81       	ld	r20, Z
    26d4:	50 e0       	ldi	r21, 0x00	; 0
    26d6:	40 53       	subi	r20, 0x30	; 48
    26d8:	51 09       	sbc	r21, r1
    26da:	4a 30       	cpi	r20, 0x0A	; 10
    26dc:	51 05       	cpc	r21, r1
    26de:	10 f0       	brcs	.+4      	; 0x26e4 <main+0x934>
    26e0:	10 82       	st	Z, r1
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));

            } else if(strncasecmp(termbuf_ptr,"T_2G=",5)==0) { // expect: minutes
                char *bufptr=&termbuf_ptr[5];
                int i;
                for(i=5;i<strlen(termbuf_ptr);i++) {
    26e2:	06 c0       	rjmp	.+12     	; 0x26f0 <main+0x940>
    26e4:	ab 01       	movw	r20, r22
    26e6:	40 1b       	sub	r20, r16
    26e8:	51 0b       	sbc	r21, r17
    26ea:	42 17       	cp	r20, r18
    26ec:	53 07       	cpc	r21, r19
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
                }
                sreg=SREG; cli();
    26ee:	70 f3       	brcs	.-36     	; 0x26cc <main+0x91c>
    26f0:	df b6       	in	r13, 0x3f	; 63
                sysval.interval2G=(uint16_t)atol(bufptr);
    26f2:	f8 94       	cli
    26f4:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <atol>
    26f8:	f7 01       	movw	r30, r14
    26fa:	72 8b       	std	Z+18, r23	; 0x12
                if(sysval.interval2G > MINUTES_PER_DAY) sysval.interval2G=MINUTES_PER_DAY;
    26fc:	61 8b       	std	Z+17, r22	; 0x11
    26fe:	81 89       	ldd	r24, Z+17	; 0x11
    2700:	92 89       	ldd	r25, Z+18	; 0x12
    2702:	81 3a       	cpi	r24, 0xA1	; 161
    2704:	95 40       	sbci	r25, 0x05	; 5
    2706:	38 f0       	brcs	.+14     	; 0x2716 <main+0x966>
    2708:	80 ea       	ldi	r24, 0xA0	; 160
    270a:	95 e0       	ldi	r25, 0x05	; 5
    270c:	d7 01       	movw	r26, r14
    270e:	52 96       	adiw	r26, 0x12	; 18
    2710:	9c 93       	st	X, r25
    2712:	8e 93       	st	-X, r24
                SREG=sreg;
    2714:	51 97       	sbiw	r26, 0x11	; 17

                sreg=SREG; cli();
    2716:	df be       	out	0x3f, r13	; 63
    2718:	df b6       	in	r13, 0x3f	; 63
                eeprom_update_word(&EEPROM_ADDR_interval2G,sysval.interval2G);
    271a:	f8 94       	cli
    271c:	f7 01       	movw	r30, r14
    271e:	61 89       	ldd	r22, Z+17	; 0x11
    2720:	72 89       	ldd	r23, Z+18	; 0x12
    2722:	81 ef       	ldi	r24, 0xF1	; 241
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 ab 32 	call	0x6556	; 0x6556 <eeprom_update_word>
                SREG=sreg;
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    272a:	df be       	out	0x3f, r13	; 63
    272c:	be 01       	movw	r22, r28
    272e:	6b 5e       	subi	r22, 0xEB	; 235
    2730:	7d 4f       	sbci	r23, 0xFD	; 253
    2732:	c8 01       	movw	r24, r16
    2734:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    2738:	18 2f       	mov	r17, r24
    273a:	03 e0       	ldi	r16, 0x03	; 3

            } else if(strncasecmp(termbuf_ptr,"QUOTA=",6)==0) { // expect: Wh or 0
    273c:	41 c1       	rjmp	.+642    	; 0x29c0 <main+0xc10>
    273e:	46 e0       	ldi	r20, 0x06	; 6
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	6f e0       	ldi	r22, 0x0F	; 15
    2744:	76 e0       	ldi	r23, 0x06	; 6
    2746:	c8 01       	movw	r24, r16
    2748:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    274c:	89 2b       	or	r24, r25
    274e:	09 f0       	breq	.+2      	; 0x2752 <main+0x9a2>
                char *bufptr=&termbuf_ptr[6];
    2750:	69 c0       	rjmp	.+210    	; 0x2824 <main+0xa74>
    2752:	c8 01       	movw	r24, r16
                int i;
                uint16_t tmp16;
                for(i=6;i<strlen(termbuf_ptr);i++) {
    2754:	06 96       	adiw	r24, 0x06	; 6
    2756:	f8 01       	movw	r30, r16
    2758:	01 90       	ld	r0, Z+
    275a:	00 20       	and	r0, r0
    275c:	e9 f7       	brne	.-6      	; 0x2758 <main+0x9a8>
    275e:	31 97       	sbiw	r30, 0x01	; 1
    2760:	9f 01       	movw	r18, r30
    2762:	20 1b       	sub	r18, r16
    2764:	31 0b       	sbc	r19, r17
    2766:	bc 01       	movw	r22, r24
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
    2768:	0c c0       	rjmp	.+24     	; 0x2782 <main+0x9d2>
    276a:	fb 01       	movw	r30, r22
    276c:	6f 5f       	subi	r22, 0xFF	; 255
    276e:	7f 4f       	sbci	r23, 0xFF	; 255
    2770:	40 81       	ld	r20, Z
    2772:	50 e0       	ldi	r21, 0x00	; 0
    2774:	40 53       	subi	r20, 0x30	; 48
    2776:	51 09       	sbc	r21, r1
    2778:	4a 30       	cpi	r20, 0x0A	; 10
    277a:	51 05       	cpc	r21, r1
    277c:	10 f0       	brcs	.+4      	; 0x2782 <main+0x9d2>
    277e:	10 82       	st	Z, r1

            } else if(strncasecmp(termbuf_ptr,"QUOTA=",6)==0) { // expect: Wh or 0
                char *bufptr=&termbuf_ptr[6];
                int i;
                uint16_t tmp16;
                for(i=6;i<strlen(termbuf_ptr);i++) {
    2780:	06 c0       	rjmp	.+12     	; 0x278e <main+0x9de>
    2782:	ab 01       	movw	r20, r22
    2784:	40 1b       	sub	r20, r16
    2786:	51 0b       	sbc	r21, r17
    2788:	42 17       	cp	r20, r18
    278a:	53 07       	cpc	r21, r19
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
                }
                tmp16=(uint16_t)atol(bufptr);
    278c:	70 f3       	brcs	.-36     	; 0x276a <main+0x9ba>
    278e:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <atol>
                if(tmp16==0) {
    2792:	61 15       	cp	r22, r1
    2794:	71 05       	cpc	r23, r1
                    sysval.Ws_quota_enabled=0;
    2796:	79 f4       	brne	.+30     	; 0x27b6 <main+0xa06>
    2798:	10 92 4b 10 	sts	0x104B, r1	; 0x80104b <sysval+0x8c>
                    sysval.Ws_quota=QUOTA_DEFAULT;
    279c:	80 e8       	ldi	r24, 0x80	; 128
    279e:	9e ee       	ldi	r25, 0xEE	; 238
    27a0:	a6 e3       	ldi	r26, 0x36	; 54
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	80 93 47 10 	sts	0x1047, r24	; 0x801047 <sysval+0x88>
    27a8:	90 93 48 10 	sts	0x1048, r25	; 0x801048 <sysval+0x89>
    27ac:	a0 93 49 10 	sts	0x1049, r26	; 0x801049 <sysval+0x8a>
    27b0:	b0 93 4a 10 	sts	0x104A, r27	; 0x80104a <sysval+0x8b>
                } else {
                    sysval.Ws_quota_enabled=1;
    27b4:	19 c0       	rjmp	.+50     	; 0x27e8 <main+0xa38>
    27b6:	21 e0       	ldi	r18, 0x01	; 1
    27b8:	20 93 4b 10 	sts	0x104B, r18	; 0x80104b <sysval+0x8c>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	aa 27       	eor	r26, r26
                    sysval.Ws_quota=(int32_t)tmp16;
    27c2:	bb 27       	eor	r27, r27
    27c4:	e7 e4       	ldi	r30, 0x47	; 71
    27c6:	f0 e1       	ldi	r31, 0x10	; 16
    27c8:	80 83       	st	Z, r24
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	a2 83       	std	Z+2, r26	; 0x02
                    sysval.Ws_quota*=3600;
    27ce:	b3 83       	std	Z+3, r27	; 0x03
    27d0:	20 81       	ld	r18, Z
    27d2:	31 81       	ldd	r19, Z+1	; 0x01
    27d4:	42 81       	ldd	r20, Z+2	; 0x02
    27d6:	53 81       	ldd	r21, Z+3	; 0x03
    27d8:	a0 e1       	ldi	r26, 0x10	; 16
    27da:	be e0       	ldi	r27, 0x0E	; 14
    27dc:	0e 94 c5 2a 	call	0x558a	; 0x558a <__muluhisi3>
    27e0:	60 83       	st	Z, r22
    27e2:	71 83       	std	Z+1, r23	; 0x01
    27e4:	82 83       	std	Z+2, r24	; 0x02
                }
                sreg=SREG; cli();
    27e6:	93 83       	std	Z+3, r25	; 0x03
    27e8:	df b6       	in	r13, 0x3f	; 63
                eeprom_update_dword(&EEPROM_ADDR_Ws_quota,sysval.Ws_quota);
    27ea:	f8 94       	cli
    27ec:	40 91 47 10 	lds	r20, 0x1047	; 0x801047 <sysval+0x88>
    27f0:	50 91 48 10 	lds	r21, 0x1048	; 0x801048 <sysval+0x89>
    27f4:	60 91 49 10 	lds	r22, 0x1049	; 0x801049 <sysval+0x8a>
    27f8:	70 91 4a 10 	lds	r23, 0x104A	; 0x80104a <sysval+0x8b>
    27fc:	88 ef       	ldi	r24, 0xF8	; 248
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 a3 32 	call	0x6546	; 0x6546 <eeprom_update_dword>
                eeprom_update_byte(&EEPROM_ADDR_Ws_quota_enabled,sysval.Ws_quota_enabled);
    2804:	60 91 4b 10 	lds	r22, 0x104B	; 0x80104b <sysval+0x8c>
    2808:	8c ef       	ldi	r24, 0xFC	; 252
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 91 32 	call	0x6522	; 0x6522 <eeprom_update_byte>
                SREG=sreg;
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    2810:	df be       	out	0x3f, r13	; 63
    2812:	be 01       	movw	r22, r28
    2814:	6b 5e       	subi	r22, 0xEB	; 235
    2816:	7d 4f       	sbci	r23, 0xFD	; 253
    2818:	c8 01       	movw	r24, r16
    281a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    281e:	18 2f       	mov	r17, r24
    2820:	03 e0       	ldi	r16, 0x03	; 3

            } else if(strncasecmp(termbuf_ptr,"TIME=",5)==0) { // expect: seconds
    2822:	ce c0       	rjmp	.+412    	; 0x29c0 <main+0xc10>
    2824:	45 e0       	ldi	r20, 0x05	; 5
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	66 e1       	ldi	r22, 0x16	; 22
    282a:	76 e0       	ldi	r23, 0x06	; 6
    282c:	c8 01       	movw	r24, r16
    282e:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    2832:	89 2b       	or	r24, r25
    2834:	09 f0       	breq	.+2      	; 0x2838 <main+0xa88>
                char *bufptr=&termbuf_ptr[5];
    2836:	44 c0       	rjmp	.+136    	; 0x28c0 <main+0xb10>
    2838:	c8 01       	movw	r24, r16
                int i;
                for(i=5;i<strlen(termbuf_ptr);i++) {
    283a:	05 96       	adiw	r24, 0x05	; 5
    283c:	f8 01       	movw	r30, r16
    283e:	01 90       	ld	r0, Z+
    2840:	00 20       	and	r0, r0
    2842:	e9 f7       	brne	.-6      	; 0x283e <main+0xa8e>
    2844:	31 97       	sbiw	r30, 0x01	; 1
    2846:	9f 01       	movw	r18, r30
    2848:	20 1b       	sub	r18, r16
    284a:	31 0b       	sbc	r19, r17
    284c:	bc 01       	movw	r22, r24
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
    284e:	0c c0       	rjmp	.+24     	; 0x2868 <main+0xab8>
    2850:	fb 01       	movw	r30, r22
    2852:	6f 5f       	subi	r22, 0xFF	; 255
    2854:	7f 4f       	sbci	r23, 0xFF	; 255
    2856:	40 81       	ld	r20, Z
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	40 53       	subi	r20, 0x30	; 48
    285c:	51 09       	sbc	r21, r1
    285e:	4a 30       	cpi	r20, 0x0A	; 10
    2860:	51 05       	cpc	r21, r1
    2862:	10 f0       	brcs	.+4      	; 0x2868 <main+0xab8>
    2864:	10 82       	st	Z, r1
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));

            } else if(strncasecmp(termbuf_ptr,"TIME=",5)==0) { // expect: seconds
                char *bufptr=&termbuf_ptr[5];
                int i;
                for(i=5;i<strlen(termbuf_ptr);i++) {
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <main+0xac4>
    2868:	ab 01       	movw	r20, r22
    286a:	40 1b       	sub	r20, r16
    286c:	51 0b       	sbc	r21, r17
    286e:	42 17       	cp	r20, r18
    2870:	53 07       	cpc	r21, r19
                    if(!isdigit(termbuf_ptr[i])) { termbuf_ptr[i]=0; break; }
                }
                sysval.seconds=(uint32_t)atol(bufptr);
    2872:	70 f3       	brcs	.-36     	; 0x2850 <main+0xaa0>
    2874:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <atol>
    2878:	d7 01       	movw	r26, r14
    287a:	6d 93       	st	X+, r22
    287c:	7d 93       	st	X+, r23
    287e:	8d 93       	st	X+, r24
    2880:	9c 93       	st	X, r25
                sysval.seconds_old=sysval.seconds;
    2882:	13 97       	sbiw	r26, 0x03	; 3
    2884:	8d 91       	ld	r24, X+
    2886:	9d 91       	ld	r25, X+
    2888:	0d 90       	ld	r0, X+
    288a:	bc 91       	ld	r27, X
    288c:	a0 2d       	mov	r26, r0
    288e:	f7 01       	movw	r30, r14
    2890:	84 83       	std	Z+4, r24	; 0x04
    2892:	95 83       	std	Z+5, r25	; 0x05
    2894:	a6 83       	std	Z+6, r26	; 0x06
                sreg=SREG; cli();
    2896:	b7 83       	std	Z+7, r27	; 0x07
    2898:	df b6       	in	r13, 0x3f	; 63
                eeprom_update_dword(&EEPROM_ADDR_secondsMeter,sysval.seconds);
    289a:	f8 94       	cli
    289c:	40 81       	ld	r20, Z
    289e:	51 81       	ldd	r21, Z+1	; 0x01
    28a0:	62 81       	ldd	r22, Z+2	; 0x02
    28a2:	73 81       	ldd	r23, Z+3	; 0x03
    28a4:	8d ee       	ldi	r24, 0xED	; 237
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	0e 94 a3 32 	call	0x6546	; 0x6546 <eeprom_update_dword>
                SREG=sreg;
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    28ac:	df be       	out	0x3f, r13	; 63
    28ae:	be 01       	movw	r22, r28
    28b0:	6b 5e       	subi	r22, 0xEB	; 235
    28b2:	7d 4f       	sbci	r23, 0xFD	; 253
    28b4:	c8 01       	movw	r24, r16
    28b6:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    28ba:	18 2f       	mov	r17, r24
    28bc:	03 e0       	ldi	r16, 0x03	; 3

            } else if(strncasecmp(termbuf_ptr,"EXTPWR=",7)==0) { // expect: 0 or 1
    28be:	80 c0       	rjmp	.+256    	; 0x29c0 <main+0xc10>
    28c0:	47 e0       	ldi	r20, 0x07	; 7
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	6c e1       	ldi	r22, 0x1C	; 28
    28c6:	76 e0       	ldi	r23, 0x06	; 6
    28c8:	c8 01       	movw	r24, r16
    28ca:	0e 94 44 2b 	call	0x5688	; 0x5688 <strncasecmp>
    28ce:	89 2b       	or	r24, r25
                char *bufptr=&termbuf_ptr[7];
                int tmp8;
                termbuf_ptr[8]=0;
    28d0:	a1 f4       	brne	.+40     	; 0x28fa <main+0xb4a>
    28d2:	f8 01       	movw	r30, r16
                tmp8=atoi(bufptr);
    28d4:	10 86       	std	Z+8, r1	; 0x08
    28d6:	c8 01       	movw	r24, r16
    28d8:	07 96       	adiw	r24, 0x07	; 7
    28da:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <atoi>
                if(tmp8==0) {
    28de:	89 2b       	or	r24, r25
                    PORTA &= ~(1<<IO_0); // turn off external powersupply
    28e0:	11 f4       	brne	.+4      	; 0x28e6 <main+0xb36>
    28e2:	17 98       	cbi	0x02, 7	; 2
                } else {
                    PORTA |= (1<<IO_0); // turn on external powersupply
    28e4:	01 c0       	rjmp	.+2      	; 0x28e8 <main+0xb38>
                }
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    28e6:	17 9a       	sbi	0x02, 7	; 2
    28e8:	be 01       	movw	r22, r28
    28ea:	6b 5e       	subi	r22, 0xEB	; 235
    28ec:	7d 4f       	sbci	r23, 0xFD	; 253
    28ee:	c8 01       	movw	r24, r16
    28f0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    28f4:	18 2f       	mov	r17, r24
    28f6:	03 e0       	ldi	r16, 0x03	; 3
            } else {
                char c;
                char *ptr=termbuf_ptr;
                sysval.errorstatus |= (1<<ERROR_SMS_PARSE_ERROR);
    28f8:	63 c0       	rjmp	.+198    	; 0x29c0 <main+0xc10>
    28fa:	ea e5       	ldi	r30, 0x5A	; 90
    28fc:	f0 e1       	ldi	r31, 0x10	; 16
    28fe:	80 81       	ld	r24, Z
    2900:	88 60       	ori	r24, 0x08	; 8
        sms_pending=sysval.ringing;
        sysval.ringing=0; // reset
        SREG=sreg; // sei()
        if(sms_pending) {
			if(sysval.has_bluetooth) { sim_stop_bluetooth(); }
            termbuf_ptr=sim_receive_sms(termbuf,sizeof(termbuf));
    2902:	80 83       	st	Z, r24
            } else {
                char c;
                char *ptr=termbuf_ptr;
                sysval.errorstatus |= (1<<ERROR_SMS_PARSE_ERROR);
                while((c=*ptr) != 0) {
                    if(!isalnum(c)) *ptr=' ';
    2904:	68 01       	movw	r12, r16
    2906:	68 94       	set
    2908:	bb 24       	eor	r11, r11
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
            } else {
                char c;
                char *ptr=termbuf_ptr;
                sysval.errorstatus |= (1<<ERROR_SMS_PARSE_ERROR);
                while((c=*ptr) != 0) {
    290a:	b5 f8       	bld	r11, 5
                    if(!isalnum(c)) *ptr=' ';
    290c:	0a c0       	rjmp	.+20     	; 0x2922 <main+0xb72>
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	0e 94 18 2b 	call	0x5630	; 0x5630 <isalnum>
    2914:	89 2b       	or	r24, r25
    2916:	11 f4       	brne	.+4      	; 0x291c <main+0xb6c>
    2918:	d6 01       	movw	r26, r12
                    ptr++;
    291a:	bc 92       	st	X, r11
    291c:	bf ef       	ldi	r27, 0xFF	; 255
    291e:	cb 1a       	sub	r12, r27
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
            } else {
                char c;
                char *ptr=termbuf_ptr;
                sysval.errorstatus |= (1<<ERROR_SMS_PARSE_ERROR);
                while((c=*ptr) != 0) {
    2920:	db 0a       	sbc	r13, r27
    2922:	f6 01       	movw	r30, r12
    2924:	80 81       	ld	r24, Z
    2926:	81 11       	cpse	r24, r1
                    if(!isalnum(c)) *ptr=' ';
                    ptr++;
                }
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
    2928:	f2 cf       	rjmp	.-28     	; 0x290e <main+0xb5e>
    292a:	be 01       	movw	r22, r28
    292c:	6b 5e       	subi	r22, 0xEB	; 235
    292e:	7d 4f       	sbci	r23, 0xFD	; 253
    2930:	c8 01       	movw	r24, r16
    2932:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prepare_data_message>
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
    2936:	18 2f       	mov	r17, r24
    2938:	03 e0       	ldi	r16, 0x03	; 3

        if(sms_size>0 && sms_pending) { // send SMS after processed valid command
            uint8_t retries=2;
            int8_t smsretval;

            if(sms_reply_to&(1<<REPLY_WITH_2G)) {
    293a:	42 c0       	rjmp	.+132    	; 0x29c0 <main+0xc10>
    293c:	00 ff       	sbrs	r16, 0
                if(send_2g_message(UART_SIM_TxBuf,sms_size) != 0) {
    293e:	0c c0       	rjmp	.+24     	; 0x2958 <main+0xba8>
    2940:	61 2f       	mov	r22, r17
    2942:	8a eb       	ldi	r24, 0xBA	; 186
    2944:	9c e0       	ldi	r25, 0x0C	; 12
    2946:	0e 94 b8 0b 	call	0x1770	; 0x1770 <send_2g_message>
    294a:	88 23       	and	r24, r24
                    sysval.errorstatus |= (1<<ERROR_2G_ERROR);
    294c:	29 f0       	breq	.+10     	; 0x2958 <main+0xba8>
    294e:	ea e5       	ldi	r30, 0x5A	; 90
    2950:	f0 e1       	ldi	r31, 0x10	; 16
    2952:	80 81       	ld	r24, Z
    2954:	80 68       	ori	r24, 0x80	; 128
                }
            }
            sms_size-=sms_start_offset;
    2956:	80 83       	st	Z, r24
    2958:	cb 5e       	subi	r28, 0xEB	; 235
    295a:	dd 4f       	sbci	r29, 0xFD	; 253
    295c:	88 81       	ld	r24, Y
    295e:	c5 51       	subi	r28, 0x15	; 21
    2960:	d2 40       	sbci	r29, 0x02	; 2
            if(sms_reply_to&(1<<REPLY_WITH_SMS)) {
    2962:	18 1b       	sub	r17, r24
    2964:	02 70       	andi	r16, 0x02	; 2
                while(retries > 0) {
                    smsretval=sim_send_sms(&UART_SIM_TxBuf[sms_start_offset],sms_size,sysval.actual_operator_idx);
    2966:	a9 f0       	breq	.+42     	; 0x2992 <main+0xbe2>
    2968:	40 91 5c 10 	lds	r20, 0x105C	; 0x80105c <sysval+0x9d>
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	61 2f       	mov	r22, r17
    2970:	86 54       	subi	r24, 0x46	; 70
    2972:	93 4f       	sbci	r25, 0xF3	; 243
                    if(smsretval < -1) {
    2974:	9a d4       	rcall	.+2356   	; 0x32aa <sim_send_sms>
    2976:	8f 3f       	cpi	r24, 0xFF	; 255
                }
            }
            sms_size-=sms_start_offset;
            if(sms_reply_to&(1<<REPLY_WITH_SMS)) {
                while(retries > 0) {
                    smsretval=sim_send_sms(&UART_SIM_TxBuf[sms_start_offset],sms_size,sysval.actual_operator_idx);
    2978:	64 f4       	brge	.+24     	; 0x2992 <main+0xbe2>
    297a:	40 91 5c 10 	lds	r20, 0x105C	; 0x80105c <sysval+0x9d>
    297e:	cb 5e       	subi	r28, 0xEB	; 235
    2980:	dd 4f       	sbci	r29, 0xFD	; 253
    2982:	88 81       	ld	r24, Y
    2984:	c5 51       	subi	r28, 0x15	; 21
    2986:	d2 40       	sbci	r29, 0x02	; 2
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	61 2f       	mov	r22, r17
    298c:	86 54       	subi	r24, 0x46	; 70
    298e:	93 4f       	sbci	r25, 0xF3	; 243
                        retries--;
                    } else break;
                }
            }
        } 
        sysval.errorstatus &= ~((1<<ERROR_SMS_PARSE_ERROR)|(1<<ERROR_SMS_OPER_ERROR)|(1<<ERROR_SMS_ERROR));
    2990:	8c d4       	rcall	.+2328   	; 0x32aa <sim_send_sms>
    2992:	ea e5       	ldi	r30, 0x5A	; 90
    2994:	f0 e1       	ldi	r31, 0x10	; 16
    2996:	80 81       	ld	r24, Z
    }
    2998:	87 79       	andi	r24, 0x97	; 151
        }

        /*
         * Read the SMS and process (if valid content)
         */
        sysval.errorstatus &= ~((1<<ERROR_SMS_PARSE_ERROR)|(1<<ERROR_SMS_OPER_ERROR)|(1<<ERROR_SMS_ERROR));
    299a:	80 83       	st	Z, r24
    299c:	88 cb       	rjmp	.-2288   	; 0x20ae <main+0x2fe>
    299e:	ea e5       	ldi	r30, 0x5A	; 90
    29a0:	f0 e1       	ldi	r31, 0x10	; 16
    29a2:	80 81       	ld	r24, Z
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
            }
        }

        sim_delete_sms();
    29a4:	87 79       	andi	r24, 0x97	; 151
    29a6:	80 83       	st	Z, r24
    29a8:	27 d6       	rcall	.+3150   	; 0x35f8 <sim_delete_sms>
                char c;
                char *idx_ptr=termbuf_ptr+4;
                char *phonenr_ptr=termbuf_ptr+6;
                if(isdigit(idx_ptr[0])) {
                    int idx=atoi(idx_ptr);
                    while((c=*phonenr_ptr) != 0) {
    29aa:	f3 cf       	rjmp	.-26     	; 0x2992 <main+0xbe2>
    29ac:	0f 2e       	mov	r0, r31
    29ae:	f9 e5       	ldi	r31, 0x59	; 89
    29b0:	af 2e       	mov	r10, r31
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	bf 2e       	mov	r11, r31
    29b6:	f0 2d       	mov	r31, r0
    29b8:	c1 2c       	mov	r12, r1
    29ba:	d1 2c       	mov	r13, r1
                sms_size=prepare_data_message(termbuf_ptr,&sms_start_offset);
                sms_reply_to=((1<<REPLY_WITH_SMS)|(1<<REPLY_WITH_2G));
            }
        }

        sim_delete_sms();
    29bc:	10 e0       	ldi	r17, 0x00	; 0
    29be:	c0 cc       	rjmp	.-1664   	; 0x2340 <main+0x590>

        if(sms_size>0 && sms_pending) { // send SMS after processed valid command
    29c0:	1b d6       	rcall	.+3126   	; 0x35f8 <sim_delete_sms>
    29c2:	11 11       	cpse	r17, r1
    29c4:	bb cf       	rjmp	.-138    	; 0x293c <main+0xb8c>
    29c6:	e5 cf       	rjmp	.-54     	; 0x2992 <main+0xbe2>

000029c8 <__vector_16>:
}

/**
 * Timer 0 Compare Match Interrupt Vector - Used for MS Tick and ADC Sampling
 */
ISR(TIMER0_COMPA_vect) {
    29c8:	1f 92       	push	r1
    29ca:	0f 92       	push	r0
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	0f 92       	push	r0
    29d0:	11 24       	eor	r1, r1
    29d2:	0b b6       	in	r0, 0x3b	; 59
    29d4:	0f 92       	push	r0
    29d6:	2f 93       	push	r18
    29d8:	3f 93       	push	r19
    29da:	4f 93       	push	r20
    29dc:	5f 93       	push	r21
    29de:	6f 93       	push	r22
    29e0:	7f 93       	push	r23
    29e2:	8f 93       	push	r24
    29e4:	9f 93       	push	r25
    29e6:	af 93       	push	r26
    29e8:	bf 93       	push	r27
    29ea:	ef 93       	push	r30
    29ec:	ff 93       	push	r31
    //Update MS Tick
    sysTime.ms++;
    29ee:	ec eb       	ldi	r30, 0xBC	; 188
    29f0:	ff e0       	ldi	r31, 0x0F	; 15
    29f2:	80 81       	ld	r24, Z
    29f4:	91 81       	ldd	r25, Z+1	; 0x01
    29f6:	01 96       	adiw	r24, 0x01	; 1
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24

    if(!(sysTime.ms%MSTICKS_PER_TENTHSEC)){
    29fc:	40 81       	ld	r20, Z
    29fe:	51 81       	ldd	r21, Z+1	; 0x01
    2a00:	9a 01       	movw	r18, r20
    2a02:	a1 ef       	ldi	r26, 0xF1	; 241
    2a04:	bc e1       	ldi	r27, 0x1C	; 28
    2a06:	0e 94 b6 2a 	call	0x556c	; 0x556c <__umulhisi3>
    2a0a:	28 1b       	sub	r18, r24
    2a0c:	39 0b       	sbc	r19, r25
    2a0e:	36 95       	lsr	r19
    2a10:	27 95       	ror	r18
    2a12:	82 0f       	add	r24, r18
    2a14:	93 1f       	adc	r25, r19
    2a16:	00 24       	eor	r0, r0
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	00 1c       	adc	r0, r0
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	00 1c       	adc	r0, r0
    2a24:	89 2f       	mov	r24, r25
    2a26:	90 2d       	mov	r25, r0
    2a28:	63 e7       	ldi	r22, 0x73	; 115
    2a2a:	68 9f       	mul	r22, r24
    2a2c:	90 01       	movw	r18, r0
    2a2e:	69 9f       	mul	r22, r25
    2a30:	30 0d       	add	r19, r0
    2a32:	11 24       	eor	r1, r1
    2a34:	42 17       	cp	r20, r18
    2a36:	53 07       	cpc	r21, r19
    2a38:	49 f4       	brne	.+18     	; 0x2a4c <__vector_16+0x84>
        if(twi_timeout>0) twi_timeout--;
    2a3a:	80 91 62 10 	lds	r24, 0x1062	; 0x801062 <twi_timeout>
    2a3e:	88 23       	and	r24, r24
    2a40:	29 f0       	breq	.+10     	; 0x2a4c <__vector_16+0x84>
    2a42:	80 91 62 10 	lds	r24, 0x1062	; 0x801062 <twi_timeout>
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	80 93 62 10 	sts	0x1062, r24	; 0x801062 <twi_timeout>
    }

    //Update Sec Tick
    if(sysTime.ms >= MSTICKS_PER_SEC) { // 1152
    2a4c:	80 91 bc 0f 	lds	r24, 0x0FBC	; 0x800fbc <sysTime>
    2a50:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <sysTime+0x1>
    2a54:	80 38       	cpi	r24, 0x80	; 128
    2a56:	94 40       	sbci	r25, 0x04	; 4
    2a58:	08 f4       	brcc	.+2      	; 0x2a5c <__vector_16+0x94>
    2a5a:	64 c0       	rjmp	.+200    	; 0x2b24 <__vector_16+0x15c>
        sysTime.ms=0;
    2a5c:	ec eb       	ldi	r30, 0xBC	; 188
    2a5e:	ff e0       	ldi	r31, 0x0F	; 15
    2a60:	11 82       	std	Z+1, r1	; 0x01
    2a62:	10 82       	st	Z, r1
        sysTime.sec++;
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	8f 5f       	subi	r24, 0xFF	; 255
    2a68:	82 83       	std	Z+2, r24	; 0x02
        sysval.seconds++;
    2a6a:	af eb       	ldi	r26, 0xBF	; 191
    2a6c:	bf e0       	ldi	r27, 0x0F	; 15
    2a6e:	4d 91       	ld	r20, X+
    2a70:	5d 91       	ld	r21, X+
    2a72:	6d 91       	ld	r22, X+
    2a74:	7c 91       	ld	r23, X
    2a76:	13 97       	sbiw	r26, 0x03	; 3
    2a78:	4f 5f       	subi	r20, 0xFF	; 255
    2a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7c:	6f 4f       	sbci	r22, 0xFF	; 255
    2a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a80:	4d 93       	st	X+, r20
    2a82:	5d 93       	st	X+, r21
    2a84:	6d 93       	st	X+, r22
    2a86:	7c 93       	st	X, r23
    2a88:	13 97       	sbiw	r26, 0x03	; 3
        sysval.tasklist |= (1<<TASK_SECOND);
    2a8a:	1c 96       	adiw	r26, 0x0c	; 12
    2a8c:	8d 91       	ld	r24, X+
    2a8e:	9c 91       	ld	r25, X
    2a90:	1d 97       	sbiw	r26, 0x0d	; 13
    2a92:	81 60       	ori	r24, 0x01	; 1
    2a94:	1d 96       	adiw	r26, 0x0d	; 13
    2a96:	9c 93       	st	X, r25
    2a98:	8e 93       	st	-X, r24
    2a9a:	1c 97       	sbiw	r26, 0x0c	; 12

        if((sysTime.sec % 5)==0) {
    2a9c:	92 81       	ldd	r25, Z+2	; 0x02
    2a9e:	8d ec       	ldi	r24, 0xCD	; 205
    2aa0:	98 9f       	mul	r25, r24
    2aa2:	81 2d       	mov	r24, r1
    2aa4:	11 24       	eor	r1, r1
    2aa6:	86 95       	lsr	r24
    2aa8:	86 95       	lsr	r24
    2aaa:	28 2f       	mov	r18, r24
    2aac:	22 0f       	add	r18, r18
    2aae:	22 0f       	add	r18, r18
    2ab0:	82 0f       	add	r24, r18
    2ab2:	98 13       	cpse	r25, r24
    2ab4:	09 c0       	rjmp	.+18     	; 0x2ac8 <__vector_16+0x100>
            sysval.tasklist |= (1<<TASK_5SECOND);
    2ab6:	fd 01       	movw	r30, r26
    2ab8:	84 85       	ldd	r24, Z+12	; 0x0c
    2aba:	95 85       	ldd	r25, Z+13	; 0x0d
    2abc:	88 60       	ori	r24, 0x08	; 8
    2abe:	95 87       	std	Z+13, r25	; 0x0d
    2ac0:	84 87       	std	Z+12, r24	; 0x0c
			sysval.watchdog++;
    2ac2:	86 85       	ldd	r24, Z+14	; 0x0e
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	86 87       	std	Z+14, r24	; 0x0e
        }
		if((sysTime.sec % 2)==0) {
    2ac8:	80 91 be 0f 	lds	r24, 0x0FBE	; 0x800fbe <sysTime+0x2>
    2acc:	80 fd       	sbrc	r24, 0
    2ace:	07 c0       	rjmp	.+14     	; 0x2ade <__vector_16+0x116>
			sysval.tasklist |= (1<<TASK_2SECOND);
    2ad0:	ef eb       	ldi	r30, 0xBF	; 191
    2ad2:	ff e0       	ldi	r31, 0x0F	; 15
    2ad4:	84 85       	ldd	r24, Z+12	; 0x0c
    2ad6:	95 85       	ldd	r25, Z+13	; 0x0d
    2ad8:	82 60       	ori	r24, 0x02	; 2
    2ada:	95 87       	std	Z+13, r25	; 0x0d
    2adc:	84 87       	std	Z+12, r24	; 0x0c
		}
		if((sysTime.sec % 3)==0) {
    2ade:	90 91 be 0f 	lds	r25, 0x0FBE	; 0x800fbe <sysTime+0x2>
    2ae2:	8b ea       	ldi	r24, 0xAB	; 171
    2ae4:	98 9f       	mul	r25, r24
    2ae6:	81 2d       	mov	r24, r1
    2ae8:	11 24       	eor	r1, r1
    2aea:	86 95       	lsr	r24
    2aec:	28 2f       	mov	r18, r24
    2aee:	22 0f       	add	r18, r18
    2af0:	82 0f       	add	r24, r18
    2af2:	98 13       	cpse	r25, r24
    2af4:	07 c0       	rjmp	.+14     	; 0x2b04 <__vector_16+0x13c>
			sysval.tasklist |= (1<<TASK_3SECOND);
    2af6:	ef eb       	ldi	r30, 0xBF	; 191
    2af8:	ff e0       	ldi	r31, 0x0F	; 15
    2afa:	84 85       	ldd	r24, Z+12	; 0x0c
    2afc:	95 85       	ldd	r25, Z+13	; 0x0d
    2afe:	84 60       	ori	r24, 0x04	; 4
    2b00:	95 87       	std	Z+13, r25	; 0x0d
    2b02:	84 87       	std	Z+12, r24	; 0x0c
		}
		

        if(sysval.SIM_poweron_pulse>4) {
    2b04:	80 91 d2 0f 	lds	r24, 0x0FD2	; 0x800fd2 <sysval+0x13>
    2b08:	85 30       	cpi	r24, 0x05	; 5
    2b0a:	10 f0       	brcs	.+4      	; 0x2b10 <__vector_16+0x148>
            PORTC |= (1<<POWERKEY);
    2b0c:	43 9a       	sbi	0x08, 3	; 8
    2b0e:	01 c0       	rjmp	.+2      	; 0x2b12 <__vector_16+0x14a>
        } else {
            PORTC &= ~(1<<POWERKEY);
    2b10:	43 98       	cbi	0x08, 3	; 8
        }
        if(sysval.SIM_poweron_pulse>0) {
    2b12:	80 91 d2 0f 	lds	r24, 0x0FD2	; 0x800fd2 <sysval+0x13>
    2b16:	88 23       	and	r24, r24
    2b18:	29 f0       	breq	.+10     	; 0x2b24 <__vector_16+0x15c>
            sysval.SIM_poweron_pulse--;
    2b1a:	ef eb       	ldi	r30, 0xBF	; 191
    2b1c:	ff e0       	ldi	r31, 0x0F	; 15
    2b1e:	83 89       	ldd	r24, Z+19	; 0x13
    2b20:	81 50       	subi	r24, 0x01	; 1
    2b22:	83 8b       	std	Z+19, r24	; 0x13
        }
    }

    // Display SoCV if Quota is disabled
    if(sysval.Ws_quota_enabled == 0) {
    2b24:	80 91 4b 10 	lds	r24, 0x104B	; 0x80104b <sysval+0x8c>
    2b28:	81 11       	cpse	r24, r1
    2b2a:	1d c0       	rjmp	.+58     	; 0x2b66 <__vector_16+0x19e>
        if(sysval.SoC > 0 && sysval.SoC < 30) {
    2b2c:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <sysval+0x8d>
    2b30:	88 23       	and	r24, r24
    2b32:	39 f0       	breq	.+14     	; 0x2b42 <__vector_16+0x17a>
    2b34:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <sysval+0x8d>
    2b38:	8e 31       	cpi	r24, 0x1E	; 30
    2b3a:	18 f4       	brcc	.+6      	; 0x2b42 <__vector_16+0x17a>
            LED_100PERCENT_OFF();
    2b3c:	28 9a       	sbi	0x05, 0	; 5
            LED_60PERCENT_OFF();
    2b3e:	2a 9a       	sbi	0x05, 2	; 5
            LED_30PERCENT_ON();
    2b40:	2b 98       	cbi	0x05, 3	; 5
        }
        if(sysval.SoC > 31 && sysval.SoC < 60) {
    2b42:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <sysval+0x8d>
    2b46:	80 32       	cpi	r24, 0x20	; 32
    2b48:	38 f0       	brcs	.+14     	; 0x2b58 <__vector_16+0x190>
    2b4a:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <sysval+0x8d>
    2b4e:	8c 33       	cpi	r24, 0x3C	; 60
    2b50:	18 f4       	brcc	.+6      	; 0x2b58 <__vector_16+0x190>
            LED_100PERCENT_OFF();
    2b52:	28 9a       	sbi	0x05, 0	; 5
            LED_60PERCENT_ON();
    2b54:	2a 98       	cbi	0x05, 2	; 5
            LED_30PERCENT_OFF();
    2b56:	2b 9a       	sbi	0x05, 3	; 5
        }
        if(sysval.SoC > 61) {
    2b58:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <sysval+0x8d>
    2b5c:	8e 33       	cpi	r24, 0x3E	; 62
    2b5e:	18 f0       	brcs	.+6      	; 0x2b66 <__vector_16+0x19e>
            LED_100PERCENT_ON();
    2b60:	28 98       	cbi	0x05, 0	; 5
            LED_60PERCENT_OFF();
    2b62:	2a 9a       	sbi	0x05, 2	; 5
            LED_30PERCENT_OFF();
    2b64:	2b 9a       	sbi	0x05, 3	; 5
        }
    }

    // check for any battery which could be empty:
    if((sysval.batt_state&0x03)==0x02 || (sysval.batt_state&0x0c)==0x08 || 
    2b66:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <sysval+0x96>
    2b6a:	83 70       	andi	r24, 0x03	; 3
    2b6c:	82 30       	cpi	r24, 0x02	; 2
    2b6e:	81 f0       	breq	.+32     	; 0x2b90 <__vector_16+0x1c8>
    2b70:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <sysval+0x96>
    2b74:	8c 70       	andi	r24, 0x0C	; 12
    2b76:	88 30       	cpi	r24, 0x08	; 8
    2b78:	59 f0       	breq	.+22     	; 0x2b90 <__vector_16+0x1c8>
	   (sysval.batt_state&0x30)==0x20 || (sysval.batt_state&0xc0)==0x20 || sysval.SoC==0) {
    2b7a:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <sysval+0x96>
            LED_30PERCENT_OFF();
        }
    }

    // check for any battery which could be empty:
    if((sysval.batt_state&0x03)==0x02 || (sysval.batt_state&0x0c)==0x08 || 
    2b7e:	80 73       	andi	r24, 0x30	; 48
    2b80:	80 32       	cpi	r24, 0x20	; 32
    2b82:	31 f0       	breq	.+12     	; 0x2b90 <__vector_16+0x1c8>
	   (sysval.batt_state&0x30)==0x20 || (sysval.batt_state&0xc0)==0x20 || sysval.SoC==0) {
    2b84:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <sysval+0x96>
    2b88:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <sysval+0x8d>
    2b8c:	81 11       	cpse	r24, r1
    2b8e:	05 c0       	rjmp	.+10     	; 0x2b9a <__vector_16+0x1d2>
        LED_SHORTFAULT_ON();
    2b90:	47 98       	cbi	0x08, 7	; 8
        LED_100PERCENT_OFF();
    2b92:	28 9a       	sbi	0x05, 0	; 5
        LED_60PERCENT_OFF();
    2b94:	2a 9a       	sbi	0x05, 2	; 5
        LED_30PERCENT_OFF();
    2b96:	2b 9a       	sbi	0x05, 3	; 5
    2b98:	22 c0       	rjmp	.+68     	; 0x2bde <__vector_16+0x216>
	// check for short circuit or fuse tripped:
    } else if( ((sysval.load_state&0x03)==0x03 || (sysval.load_state&0x0c)==0x0c ||
    2b9a:	80 91 54 10 	lds	r24, 0x1054	; 0x801054 <sysval+0x95>
    2b9e:	83 70       	andi	r24, 0x03	; 3
    2ba0:	83 30       	cpi	r24, 0x03	; 3
    2ba2:	79 f0       	breq	.+30     	; 0x2bc2 <__vector_16+0x1fa>
    2ba4:	80 91 54 10 	lds	r24, 0x1054	; 0x801054 <sysval+0x95>
    2ba8:	8c 70       	andi	r24, 0x0C	; 12
    2baa:	8c 30       	cpi	r24, 0x0C	; 12
    2bac:	51 f0       	breq	.+20     	; 0x2bc2 <__vector_16+0x1fa>
	            (sysval.load_state&0x30)==0x30 || (sysval.load_state&0xc0)==0xc0)	
    2bae:	80 91 54 10 	lds	r24, 0x1054	; 0x801054 <sysval+0x95>
        LED_SHORTFAULT_ON();
        LED_100PERCENT_OFF();
        LED_60PERCENT_OFF();
        LED_30PERCENT_OFF();
	// check for short circuit or fuse tripped:
    } else if( ((sysval.load_state&0x03)==0x03 || (sysval.load_state&0x0c)==0x0c ||
    2bb2:	80 73       	andi	r24, 0x30	; 48
    2bb4:	80 33       	cpi	r24, 0x30	; 48
    2bb6:	29 f0       	breq	.+10     	; 0x2bc2 <__vector_16+0x1fa>
	            (sysval.load_state&0x30)==0x30 || (sysval.load_state&0xc0)==0xc0)	
    2bb8:	80 91 54 10 	lds	r24, 0x1054	; 0x801054 <sysval+0x95>
    2bbc:	80 7c       	andi	r24, 0xC0	; 192
    2bbe:	80 3c       	cpi	r24, 0xC0	; 192
    2bc0:	69 f4       	brne	.+26     	; 0x2bdc <__vector_16+0x214>
	           && ((sysTime.ms%MSTICKS_PER_SEC)<288)) { // load fault: blink
    2bc2:	80 91 bc 0f 	lds	r24, 0x0FBC	; 0x800fbc <sysTime>
    2bc6:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <sysTime+0x1>
    2bca:	60 e8       	ldi	r22, 0x80	; 128
    2bcc:	74 e0       	ldi	r23, 0x04	; 4
    2bce:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__udivmodhi4>
    2bd2:	80 32       	cpi	r24, 0x20	; 32
    2bd4:	91 40       	sbci	r25, 0x01	; 1
    2bd6:	10 f4       	brcc	.+4      	; 0x2bdc <__vector_16+0x214>
        LED_SHORTFAULT_ON();
    2bd8:	47 98       	cbi	0x08, 7	; 8
    2bda:	01 c0       	rjmp	.+2      	; 0x2bde <__vector_16+0x216>
    } else {
        LED_SHORTFAULT_OFF();
    2bdc:	47 9a       	sbi	0x08, 7	; 8
    }

    if(sysval.payled_mode == PAYLED_MODE_ON) {
    2bde:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <sysval+0x9c>
    2be2:	83 30       	cpi	r24, 0x03	; 3
    2be4:	11 f4       	brne	.+4      	; 0x2bea <__vector_16+0x222>
        LED_NOTPAYED_ON();
    2be6:	46 98       	cbi	0x08, 6	; 8
    2be8:	23 c0       	rjmp	.+70     	; 0x2c30 <__vector_16+0x268>
    } else if(sysval.payled_mode == PAYLED_MODE_2HZ && ((sysTime.ms%MSTICKS_PER_HALFSEC)<144)) {
    2bea:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <sysval+0x9c>
    2bee:	82 30       	cpi	r24, 0x02	; 2
    2bf0:	69 f4       	brne	.+26     	; 0x2c0c <__vector_16+0x244>
    2bf2:	80 91 bc 0f 	lds	r24, 0x0FBC	; 0x800fbc <sysTime>
    2bf6:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <sysTime+0x1>
    2bfa:	60 e4       	ldi	r22, 0x40	; 64
    2bfc:	72 e0       	ldi	r23, 0x02	; 2
    2bfe:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__udivmodhi4>
    2c02:	80 39       	cpi	r24, 0x90	; 144
    2c04:	91 05       	cpc	r25, r1
    2c06:	10 f4       	brcc	.+4      	; 0x2c0c <__vector_16+0x244>
        LED_NOTPAYED_ON();
    2c08:	46 98       	cbi	0x08, 6	; 8
    2c0a:	12 c0       	rjmp	.+36     	; 0x2c30 <__vector_16+0x268>
    } else if(sysval.payled_mode == PAYLED_MODE_1HZ && ((sysTime.ms%MSTICKS_PER_SEC)<288)) {
    2c0c:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <sysval+0x9c>
    2c10:	81 30       	cpi	r24, 0x01	; 1
    2c12:	69 f4       	brne	.+26     	; 0x2c2e <__vector_16+0x266>
    2c14:	80 91 bc 0f 	lds	r24, 0x0FBC	; 0x800fbc <sysTime>
    2c18:	90 91 bd 0f 	lds	r25, 0x0FBD	; 0x800fbd <sysTime+0x1>
    2c1c:	60 e8       	ldi	r22, 0x80	; 128
    2c1e:	74 e0       	ldi	r23, 0x04	; 4
    2c20:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__udivmodhi4>
    2c24:	80 32       	cpi	r24, 0x20	; 32
    2c26:	91 40       	sbci	r25, 0x01	; 1
    2c28:	10 f4       	brcc	.+4      	; 0x2c2e <__vector_16+0x266>
        LED_NOTPAYED_ON();
    2c2a:	46 98       	cbi	0x08, 6	; 8
    2c2c:	01 c0       	rjmp	.+2      	; 0x2c30 <__vector_16+0x268>
    } else {
        LED_NOTPAYED_OFF();
    2c2e:	46 9a       	sbi	0x08, 6	; 8
    }

    //Update minutes
    if(sysTime.sec>=60){
    2c30:	80 91 be 0f 	lds	r24, 0x0FBE	; 0x800fbe <sysTime+0x2>
    2c34:	8c 33       	cpi	r24, 0x3C	; 60
    2c36:	08 f4       	brcc	.+2      	; 0x2c3a <__vector_16+0x272>
    2c38:	7b c0       	rjmp	.+246    	; 0x2d30 <__vector_16+0x368>
        sysTime.sec=0;
    2c3a:	10 92 be 0f 	sts	0x0FBE, r1	; 0x800fbe <sysTime+0x2>
        sysval.minutes++;
    2c3e:	ef eb       	ldi	r30, 0xBF	; 191
    2c40:	ff e0       	ldi	r31, 0x0F	; 15
    2c42:	80 85       	ldd	r24, Z+8	; 0x08
    2c44:	91 85       	ldd	r25, Z+9	; 0x09
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	91 87       	std	Z+9, r25	; 0x09
    2c4a:	80 87       	std	Z+8, r24	; 0x08
        sysval.tasklist |= (1<<TASK_MINUTE);
    2c4c:	84 85       	ldd	r24, Z+12	; 0x0c
    2c4e:	95 85       	ldd	r25, Z+13	; 0x0d
    2c50:	80 61       	ori	r24, 0x10	; 16
    2c52:	95 87       	std	Z+13, r25	; 0x0d
    2c54:	84 87       	std	Z+12, r24	; 0x0c

        if((sysval.minutes % 5)==0 && sysval.minutes!=0) {
    2c56:	40 85       	ldd	r20, Z+8	; 0x08
    2c58:	51 85       	ldd	r21, Z+9	; 0x09
    2c5a:	9a 01       	movw	r18, r20
    2c5c:	ad ec       	ldi	r26, 0xCD	; 205
    2c5e:	bc ec       	ldi	r27, 0xCC	; 204
    2c60:	0e 94 b6 2a 	call	0x556c	; 0x556c <__umulhisi3>
    2c64:	96 95       	lsr	r25
    2c66:	87 95       	ror	r24
    2c68:	96 95       	lsr	r25
    2c6a:	87 95       	ror	r24
    2c6c:	9c 01       	movw	r18, r24
    2c6e:	22 0f       	add	r18, r18
    2c70:	33 1f       	adc	r19, r19
    2c72:	22 0f       	add	r18, r18
    2c74:	33 1f       	adc	r19, r19
    2c76:	82 0f       	add	r24, r18
    2c78:	93 1f       	adc	r25, r19
    2c7a:	48 17       	cp	r20, r24
    2c7c:	59 07       	cpc	r21, r25
    2c7e:	59 f4       	brne	.+22     	; 0x2c96 <__vector_16+0x2ce>
    2c80:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <sysval+0x8>
    2c84:	90 91 c8 0f 	lds	r25, 0x0FC8	; 0x800fc8 <sysval+0x9>
    2c88:	89 2b       	or	r24, r25
    2c8a:	29 f0       	breq	.+10     	; 0x2c96 <__vector_16+0x2ce>
            sysval.tasklist |= (1<<TASK_CREG);
    2c8c:	84 85       	ldd	r24, Z+12	; 0x0c
    2c8e:	95 85       	ldd	r25, Z+13	; 0x0d
    2c90:	92 60       	ori	r25, 0x02	; 2
    2c92:	95 87       	std	Z+13, r25	; 0x0d
    2c94:	84 87       	std	Z+12, r24	; 0x0c
        }
        if((sysval.minutes % 60)==0) {
    2c96:	40 91 c7 0f 	lds	r20, 0x0FC7	; 0x800fc7 <sysval+0x8>
    2c9a:	50 91 c8 0f 	lds	r21, 0x0FC8	; 0x800fc8 <sysval+0x9>
    2c9e:	9a 01       	movw	r18, r20
    2ca0:	a9 e8       	ldi	r26, 0x89	; 137
    2ca2:	b8 e8       	ldi	r27, 0x88	; 136
    2ca4:	0e 94 b6 2a 	call	0x556c	; 0x556c <__umulhisi3>
    2ca8:	96 95       	lsr	r25
    2caa:	87 95       	ror	r24
    2cac:	92 95       	swap	r25
    2cae:	82 95       	swap	r24
    2cb0:	8f 70       	andi	r24, 0x0F	; 15
    2cb2:	89 27       	eor	r24, r25
    2cb4:	9f 70       	andi	r25, 0x0F	; 15
    2cb6:	89 27       	eor	r24, r25
    2cb8:	6c e3       	ldi	r22, 0x3C	; 60
    2cba:	68 9f       	mul	r22, r24
    2cbc:	90 01       	movw	r18, r0
    2cbe:	69 9f       	mul	r22, r25
    2cc0:	30 0d       	add	r19, r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	42 17       	cp	r20, r18
    2cc6:	53 07       	cpc	r21, r19
    2cc8:	39 f4       	brne	.+14     	; 0x2cd8 <__vector_16+0x310>
            sysval.tasklist |= (1<<TASK_HOUR);
    2cca:	ef eb       	ldi	r30, 0xBF	; 191
    2ccc:	ff e0       	ldi	r31, 0x0F	; 15
    2cce:	84 85       	ldd	r24, Z+12	; 0x0c
    2cd0:	95 85       	ldd	r25, Z+13	; 0x0d
    2cd2:	80 62       	ori	r24, 0x20	; 32
    2cd4:	95 87       	std	Z+13, r25	; 0x0d
    2cd6:	84 87       	std	Z+12, r24	; 0x0c
        }
        if(sysval.intervalSMS > 0) {
    2cd8:	80 91 ce 0f 	lds	r24, 0x0FCE	; 0x800fce <sysval+0xf>
    2cdc:	90 91 cf 0f 	lds	r25, 0x0FCF	; 0x800fcf <sysval+0x10>
    2ce0:	89 2b       	or	r24, r25
    2ce2:	39 f0       	breq	.+14     	; 0x2cf2 <__vector_16+0x32a>
            sysval.intervalSMS--; 
    2ce4:	ef eb       	ldi	r30, 0xBF	; 191
    2ce6:	ff e0       	ldi	r31, 0x0F	; 15
    2ce8:	87 85       	ldd	r24, Z+15	; 0x0f
    2cea:	90 89       	ldd	r25, Z+16	; 0x10
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	90 8b       	std	Z+16, r25	; 0x10
    2cf0:	87 87       	std	Z+15, r24	; 0x0f
        }
        if((sysval.minutes % sysval.interval2G)==0) {
    2cf2:	ef eb       	ldi	r30, 0xBF	; 191
    2cf4:	ff e0       	ldi	r31, 0x0F	; 15
    2cf6:	80 85       	ldd	r24, Z+8	; 0x08
    2cf8:	91 85       	ldd	r25, Z+9	; 0x09
    2cfa:	61 89       	ldd	r22, Z+17	; 0x11
    2cfc:	72 89       	ldd	r23, Z+18	; 0x12
    2cfe:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__udivmodhi4>
    2d02:	89 2b       	or	r24, r25
    2d04:	29 f4       	brne	.+10     	; 0x2d10 <__vector_16+0x348>
            sysval.tasklist |= (1<<TASK_2G);
    2d06:	84 85       	ldd	r24, Z+12	; 0x0c
    2d08:	95 85       	ldd	r25, Z+13	; 0x0d
    2d0a:	91 60       	ori	r25, 0x01	; 1
    2d0c:	95 87       	std	Z+13, r25	; 0x0d
    2d0e:	84 87       	std	Z+12, r24	; 0x0c
        }
        if(sysval.minutes >= MINUTES_PER_DAY) {
    2d10:	80 91 c7 0f 	lds	r24, 0x0FC7	; 0x800fc7 <sysval+0x8>
    2d14:	90 91 c8 0f 	lds	r25, 0x0FC8	; 0x800fc8 <sysval+0x9>
    2d18:	80 3a       	cpi	r24, 0xA0	; 160
    2d1a:	95 40       	sbci	r25, 0x05	; 5
    2d1c:	48 f0       	brcs	.+18     	; 0x2d30 <__vector_16+0x368>
            sysval.minutes=0;
    2d1e:	ef eb       	ldi	r30, 0xBF	; 191
    2d20:	ff e0       	ldi	r31, 0x0F	; 15
    2d22:	11 86       	std	Z+9, r1	; 0x09
    2d24:	10 86       	std	Z+8, r1	; 0x08
            sysval.tasklist |= (1<<TASK_DAY);
    2d26:	84 85       	ldd	r24, Z+12	; 0x0c
    2d28:	95 85       	ldd	r25, Z+13	; 0x0d
    2d2a:	80 64       	ori	r24, 0x40	; 64
    2d2c:	95 87       	std	Z+13, r25	; 0x0d
    2d2e:	84 87       	std	Z+12, r24	; 0x0c
        }
    }
}
    2d30:	ff 91       	pop	r31
    2d32:	ef 91       	pop	r30
    2d34:	bf 91       	pop	r27
    2d36:	af 91       	pop	r26
    2d38:	9f 91       	pop	r25
    2d3a:	8f 91       	pop	r24
    2d3c:	7f 91       	pop	r23
    2d3e:	6f 91       	pop	r22
    2d40:	5f 91       	pop	r21
    2d42:	4f 91       	pop	r20
    2d44:	3f 91       	pop	r19
    2d46:	2f 91       	pop	r18
    2d48:	0f 90       	pop	r0
    2d4a:	0b be       	out	0x3b, r0	; 59
    2d4c:	0f 90       	pop	r0
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	0f 90       	pop	r0
    2d52:	1f 90       	pop	r1
    2d54:	18 95       	reti

00002d56 <__vector_28>:
/**
 * UART Data Received Interrupt - Update receive buffer.
 * SIM900
 */
ISR(USART1_RX_vect)
{
    2d56:	1f 92       	push	r1
    2d58:	0f 92       	push	r0
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	0f 92       	push	r0
    2d5e:	11 24       	eor	r1, r1
    2d60:	0b b6       	in	r0, 0x3b	; 59
    2d62:	0f 92       	push	r0
    2d64:	8f 93       	push	r24
    2d66:	9f 93       	push	r25
    2d68:	ef 93       	push	r30
    2d6a:	ff 93       	push	r31
        unsigned char data;
        unsigned char tmphead;
                
        /* Read the received data */
        data = UDR1;
    2d6c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>

        /* Calculate buffer index */
        tmphead = (UART_SIM_RxHead + 1) & UART_SIM_RX_BUFFER_MASK;
    2d70:	e0 91 bb 0e 	lds	r30, 0x0EBB	; 0x800ebb <UART_SIM_RxHead>
    2d74:	ef 5f       	subi	r30, 0xFF	; 255
        /* Store new index */
        UART_SIM_RxHead = tmphead;
    2d76:	e0 93 bb 0e 	sts	0x0EBB, r30	; 0x800ebb <UART_SIM_RxHead>
        if (tmphead == UART_SIM_RxTail) {
    2d7a:	80 91 ba 0e 	lds	r24, 0x0EBA	; 0x800eba <UART_SIM_RxTail>
                /* ERROR! Receive buffer overflow */
        }
        /* Store received data in buffer */
        UART_SIM_RxBuf[tmphead] = data;
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	e4 54       	subi	r30, 0x44	; 68
    2d82:	f1 4f       	sbci	r31, 0xF1	; 241
    2d84:	90 83       	st	Z, r25
		
	    if(bit_is_clear(PINB,SPI_MOSI_IO_2)) { // jumper: SIM900 terminal mode
    2d86:	1d 99       	sbic	0x03, 5	; 3
    2d88:	11 c0       	rjmp	.+34     	; 0x2dac <__vector_28+0x56>
	        if (data == '\n') {
    2d8a:	9a 30       	cpi	r25, 0x0A	; 10
    2d8c:	41 f4       	brne	.+16     	; 0x2d9e <__vector_28+0x48>
		        loop_until_bit_is_set(UCSR0A, UDRE0);
    2d8e:	e0 ec       	ldi	r30, 0xC0	; 192
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	85 ff       	sbrs	r24, 5
    2d96:	fd cf       	rjmp	.-6      	; 0x2d92 <__vector_28+0x3c>
		        UDR0='\r';
    2d98:	8d e0       	ldi	r24, 0x0D	; 13
    2d9a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	        }
	        loop_until_bit_is_set(UCSR0A, UDRE0);
    2d9e:	e0 ec       	ldi	r30, 0xC0	; 192
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	85 ff       	sbrs	r24, 5
    2da6:	fd cf       	rjmp	.-6      	; 0x2da2 <__vector_28+0x4c>
	        UDR0=data;
    2da8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	        //PORTD |= (1<<SIM900_RTS);
	        return;
	    }
}
    2dac:	ff 91       	pop	r31
    2dae:	ef 91       	pop	r30
    2db0:	9f 91       	pop	r25
    2db2:	8f 91       	pop	r24
    2db4:	0f 90       	pop	r0
    2db6:	0b be       	out	0x3b, r0	; 59
    2db8:	0f 90       	pop	r0
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	0f 90       	pop	r0
    2dbe:	1f 90       	pop	r1
    2dc0:	18 95       	reti

00002dc2 <__vector_20>:

/**
 * UART Data Received Interrupt - Update receive buffer.
 * Terminal
 */
ISR(USART0_RX_vect) {
    2dc2:	1f 92       	push	r1
    2dc4:	0f 92       	push	r0
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	0f 92       	push	r0
    2dca:	11 24       	eor	r1, r1
    2dcc:	0b b6       	in	r0, 0x3b	; 59
    2dce:	0f 92       	push	r0
    2dd0:	8f 93       	push	r24
    2dd2:	9f 93       	push	r25
    2dd4:	ef 93       	push	r30
    2dd6:	ff 93       	push	r31
        unsigned char data;
        unsigned char tmphead;
        
        /* Read the received data */
        data = UDR0;
    2dd8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if(bit_is_clear(PINB,SPI_MOSI_IO_2)) { // jumper: SIM900 terminal mode
    2ddc:	1d 99       	sbic	0x03, 5	; 3
    2dde:	08 c0       	rjmp	.+16     	; 0x2df0 <__vector_20+0x2e>
			// forward char to SIM900:
			//PORTD &= ~(1<<SIM900_RTS);
			loop_until_bit_is_set(UCSR1A, UDRE1);
    2de0:	e8 ec       	ldi	r30, 0xC8	; 200
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	85 ff       	sbrs	r24, 5
    2de8:	fd cf       	rjmp	.-6      	; 0x2de4 <__vector_20+0x22>
			//loop_until_bit_is_clear(PIND, SIM900_CTS);
			UDR1=data;
    2dea:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
			return;
    2dee:	17 c0       	rjmp	.+46     	; 0x2e1e <__vector_20+0x5c>
		}

        /* Calculate buffer index */
        tmphead = (UART_TERM_RxHead + 1) & UART_TERM_RX_BUFFER_MASK;
    2df0:	e0 91 b7 0b 	lds	r30, 0x0BB7	; 0x800bb7 <UART_TERM_RxHead>
    2df4:	ef 5f       	subi	r30, 0xFF	; 255
        /* Store new index */
        UART_TERM_RxHead = tmphead;
    2df6:	e0 93 b7 0b 	sts	0x0BB7, r30	; 0x800bb7 <UART_TERM_RxHead>
        if (tmphead == UART_TERM_RxTail) {
    2dfa:	80 91 b6 0b 	lds	r24, 0x0BB6	; 0x800bb6 <__data_end>
                /* ERROR! Receive buffer overflow */
        }
        /* Store received data in buffer */
        UART_TERM_RxBuf[tmphead] = data;    
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	e8 54       	subi	r30, 0x48	; 72
    2e02:	f4 4f       	sbci	r31, 0xF4	; 244
    2e04:	90 83       	st	Z, r25

        UDR0=data;
    2e06:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        if(data=='\r') {
    2e0a:	9d 30       	cpi	r25, 0x0D	; 13
    2e0c:	41 f4       	brne	.+16     	; 0x2e1e <__vector_20+0x5c>
            data='\n';
            loop_until_bit_is_set(UCSR0A, UDRE0);
    2e0e:	e0 ec       	ldi	r30, 0xC0	; 192
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	85 ff       	sbrs	r24, 5
    2e16:	fd cf       	rjmp	.-6      	; 0x2e12 <__vector_20+0x50>
            UDR0=data;
    2e18:	8a e0       	ldi	r24, 0x0A	; 10
    2e1a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        }
}
    2e1e:	ff 91       	pop	r31
    2e20:	ef 91       	pop	r30
    2e22:	9f 91       	pop	r25
    2e24:	8f 91       	pop	r24
    2e26:	0f 90       	pop	r0
    2e28:	0b be       	out	0x3b, r0	; 59
    2e2a:	0f 90       	pop	r0
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	0f 90       	pop	r0
    2e30:	1f 90       	pop	r1
    2e32:	18 95       	reti

00002e34 <__vector_7>:


// RI line
// SIM900_RI 
ISR(PCINT3_vect) {
    2e34:	1f 92       	push	r1
    2e36:	0f 92       	push	r0
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	0f 92       	push	r0
    2e3c:	11 24       	eor	r1, r1
    2e3e:	0b b6       	in	r0, 0x3b	; 59
    2e40:	0f 92       	push	r0
    2e42:	2f 93       	push	r18
    2e44:	3f 93       	push	r19
    2e46:	4f 93       	push	r20
    2e48:	5f 93       	push	r21
    2e4a:	6f 93       	push	r22
    2e4c:	7f 93       	push	r23
    2e4e:	8f 93       	push	r24
    2e50:	9f 93       	push	r25
    2e52:	af 93       	push	r26
    2e54:	bf 93       	push	r27
    2e56:	ef 93       	push	r30
    if(sim_is_on() && bit_is_clear(PIND,SIM900_RI)) {
    2e58:	ff 93       	push	r31
    2e5a:	41 d0       	rcall	.+130    	; 0x2ede <sim_is_on>
    2e5c:	88 23       	and	r24, r24
    2e5e:	29 f0       	breq	.+10     	; 0x2e6a <__vector_7+0x36>
    2e60:	4c 99       	sbic	0x09, 4	; 9
        sysval.ringing=1;
    2e62:	03 c0       	rjmp	.+6      	; 0x2e6a <__vector_7+0x36>
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	80 93 59 10 	sts	0x1059, r24	; 0x801059 <sysval+0x9a>
    }
}
    2e6a:	ff 91       	pop	r31
    2e6c:	ef 91       	pop	r30
    2e6e:	bf 91       	pop	r27
    2e70:	af 91       	pop	r26
    2e72:	9f 91       	pop	r25
    2e74:	8f 91       	pop	r24
    2e76:	7f 91       	pop	r23
    2e78:	6f 91       	pop	r22
    2e7a:	5f 91       	pop	r21
    2e7c:	4f 91       	pop	r20
    2e7e:	3f 91       	pop	r19
    2e80:	2f 91       	pop	r18
    2e82:	0f 90       	pop	r0
    2e84:	0b be       	out	0x3b, r0	; 59
    2e86:	0f 90       	pop	r0
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	0f 90       	pop	r0
    2e8c:	1f 90       	pop	r1
    2e8e:	18 95       	reti

00002e90 <__vector_8>:

// This is the interrupt code, called every second, unless wdt_reset() was called sooner
ISR(WDT_vect)
{
    2e90:	1f 92       	push	r1
    2e92:	0f 92       	push	r0
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	0f 92       	push	r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	0b b6       	in	r0, 0x3b	; 59
    2e9c:	0f 92       	push	r0
    2e9e:	8f 93       	push	r24
    2ea0:	ef 93       	push	r30
    2ea2:	ff 93       	push	r31
	sysval.watchdog++;
    2ea4:	ef eb       	ldi	r30, 0xBF	; 191
    2ea6:	ff e0       	ldi	r31, 0x0F	; 15
    2ea8:	86 85       	ldd	r24, Z+14	; 0x0e
    2eaa:	8f 5f       	subi	r24, 0xFF	; 255
    2eac:	86 87       	std	Z+14, r24	; 0x0e
	if (sysval.watchdog < 10) { // 60 seconds limit , that is ONE MINUTE
    2eae:	86 85       	ldd	r24, Z+14	; 0x0e
    2eb0:	8a 30       	cpi	r24, 0x0A	; 10
    2eb2:	10 f4       	brcc	.+4      	; 0x2eb8 <__vector_8+0x28>
		// start timer again (we are still in interrupt-only mode)
		wdt_reset();
    2eb4:	a8 95       	wdr
    2eb6:	09 c0       	rjmp	.+18     	; 0x2eca <__vector_8+0x3a>
	} else {
		UDR0='#';
    2eb8:	83 e2       	ldi	r24, 0x23	; 35
    2eba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		// go for immediate reset
		WDTCSR = (1<<WDCE) | (1<<WDE);	// Enable the WD Change Bit - configure mode
    2ebe:	e0 e6       	ldi	r30, 0x60	; 96
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	88 e1       	ldi	r24, 0x18	; 24
    2ec4:	80 83       	st	Z, r24
		WDTCSR = (1<<WDE) | (1<<WDP0);	// set reset flag (WDE) and 16ms (WDP0)
    2ec6:	89 e0       	ldi	r24, 0x09	; 9
    2ec8:	80 83       	st	Z, r24
	}
}
    2eca:	ff 91       	pop	r31
    2ecc:	ef 91       	pop	r30
    2ece:	8f 91       	pop	r24
    2ed0:	0f 90       	pop	r0
    2ed2:	0b be       	out	0x3b, r0	; 59
    2ed4:	0f 90       	pop	r0
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	0f 90       	pop	r0
    2eda:	1f 90       	pop	r1
    2edc:	18 95       	reti

00002ede <sim_is_on>:
#endif


uint8_t sim_is_on(void)
{
    return (bit_is_set(PINC,SIM900_STATUS));
    2ede:	86 b1       	in	r24, 0x06	; 6
}
    2ee0:	84 70       	andi	r24, 0x04	; 4
    2ee2:	08 95       	ret

00002ee4 <sim_rxflush>:

char sim_rxflush(void)
{
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
	char ch=0;
	int timeout_centisec=5;
    2eea:	c5 e0       	ldi	r28, 0x05	; 5
    2eec:	d0 e0       	ldi	r29, 0x00	; 0
    return (bit_is_set(PINC,SIM900_STATUS));
}

char sim_rxflush(void)
{
	char ch=0;
    2eee:	10 e0       	ldi	r17, 0x00	; 0
	int timeout_centisec=5;
#ifdef SIM_DEBUG
//	printf("\nrxflush:");
#endif
	while(timeout_centisec>0) {
		wdt_reset();
    2ef0:	a8 95       	wdr
		delay_ms(10);
    2ef2:	68 ef       	ldi	r22, 0xF8	; 248
    2ef4:	7f e2       	ldi	r23, 0x2F	; 47
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
		if(Poll_SIM()) {
    2efe:	0e 94 ed 08 	call	0x11da	; 0x11da <Poll_SIM>
    2f02:	88 23       	and	r24, r24
    2f04:	21 f0       	breq	.+8      	; 0x2f0e <sim_rxflush+0x2a>
			ch=Receive_SIM_Byte();
    2f06:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Receive_SIM_Byte>
    2f0a:	18 2f       	mov	r17, r24
    2f0c:	07 c0       	rjmp	.+14     	; 0x2f1c <sim_rxflush+0x38>
#ifdef SIM_DEBUG
//			printf("[%x]",ch);
#endif
		} else {
			delay_ms(100);
    2f0e:	60 eb       	ldi	r22, 0xB0	; 176
    2f10:	7f ed       	ldi	r23, 0xDF	; 223
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
			timeout_centisec--;
    2f1a:	21 97       	sbiw	r28, 0x01	; 1
	char ch=0;
	int timeout_centisec=5;
#ifdef SIM_DEBUG
//	printf("\nrxflush:");
#endif
	while(timeout_centisec>0) {
    2f1c:	1c 16       	cp	r1, r28
    2f1e:	1d 06       	cpc	r1, r29
    2f20:	3c f3       	brlt	.-50     	; 0x2ef0 <sim_rxflush+0xc>
	}
#ifdef SIM_DEBUG
//	printf("\n");
#endif
	return ch;
}
    2f22:	81 2f       	mov	r24, r17
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	1f 91       	pop	r17
    2f2a:	08 95       	ret

00002f2c <sim_read>:
 * returns:
 *  0 if len=0 or 'expect' not found
 * >0 if len>0
 */
uint16_t sim_read(char *sim_bufptr, const char *expect, int timeout_centisec, uint16_t maxlen)
{
    2f2c:	af 92       	push	r10
    2f2e:	bf 92       	push	r11
    2f30:	cf 92       	push	r12
    2f32:	df 92       	push	r13
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	7c 01       	movw	r14, r24
    2f42:	5b 01       	movw	r10, r22
    2f44:	8a 01       	movw	r16, r20
    uint16_t len=0;
	int timeout=timeout_centisec;
	char ch=0, found=0;

    wdt_reset();
    2f46:	a8 95       	wdr
#ifdef SIM_DEBUG
//    printf("\nsim_read:");
#endif
    while(timeout>0) {
    2f48:	14 16       	cp	r1, r20
    2f4a:	15 06       	cpc	r1, r21
    2f4c:	0c f0       	brlt	.+2      	; 0x2f50 <sim_read+0x24>
    2f4e:	4e c0       	rjmp	.+156    	; 0x2fec <sim_read+0xc0>
		if(len>=(maxlen-1)) break;	 
    2f50:	69 01       	movw	r12, r18
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	c8 1a       	sub	r12, r24
    2f56:	d1 08       	sbc	r13, r1
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <sim_read+0x30>
    2f5a:	4a c0       	rjmp	.+148    	; 0x2ff0 <sim_read+0xc4>
    2f5c:	c0 e0       	ldi	r28, 0x00	; 0
    2f5e:	d0 e0       	ldi	r29, 0x00	; 0
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <sim_read+0x3e>
    2f62:	cc 15       	cp	r28, r12
    2f64:	dd 05       	cpc	r29, r13
    2f66:	08 f0       	brcs	.+2      	; 0x2f6a <sim_read+0x3e>
    2f68:	45 c0       	rjmp	.+138    	; 0x2ff4 <sim_read+0xc8>
		wdt_reset();
    2f6a:	a8 95       	wdr
		delay_ms(1);
    2f6c:	6c ec       	ldi	r22, 0xCC	; 204
    2f6e:	74 e0       	ldi	r23, 0x04	; 4
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
		if(Poll_SIM()) {
    2f78:	0e 94 ed 08 	call	0x11da	; 0x11da <Poll_SIM>
    2f7c:	88 23       	and	r24, r24
    2f7e:	91 f0       	breq	.+36     	; 0x2fa4 <sim_read+0x78>
			ch = Receive_SIM_Byte();			
    2f80:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Receive_SIM_Byte>
//			if(ch==0) printf("\\0");
//			else if(ch=='\n') printf("\\n");
//			else if(ch=='\r') printf("\\r");
//			else printf("%c",ch);
#endif
			sim_bufptr[len]=ch;
    2f84:	f7 01       	movw	r30, r14
    2f86:	ec 0f       	add	r30, r28
    2f88:	fd 1f       	adc	r31, r29
    2f8a:	80 83       	st	Z, r24
			len++;
    2f8c:	21 96       	adiw	r28, 0x01	; 1
			sim_bufptr[len]=0;
    2f8e:	f7 01       	movw	r30, r14
    2f90:	ec 0f       	add	r30, r28
    2f92:	fd 1f       	adc	r31, r29
    2f94:	10 82       	st	Z, r1
			if(strstr(sim_bufptr,expect)!=NULL) { found=1; break; }
    2f96:	b5 01       	movw	r22, r10
    2f98:	c7 01       	movw	r24, r14
    2f9a:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strstr>
    2f9e:	89 2b       	or	r24, r25
    2fa0:	69 f0       	breq	.+26     	; 0x2fbc <sim_read+0x90>
    2fa2:	37 c0       	rjmp	.+110    	; 0x3012 <sim_read+0xe6>
		} else {
			delay_ms(100);
    2fa4:	60 eb       	ldi	r22, 0xB0	; 176
    2fa6:	7f ed       	ldi	r23, 0xDF	; 223
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
			timeout--;
    2fb0:	01 50       	subi	r16, 0x01	; 1
    2fb2:	11 09       	sbc	r17, r1
			if(timeout <= 0) {
    2fb4:	10 16       	cp	r1, r16
    2fb6:	11 06       	cpc	r1, r17
    2fb8:	a4 f2       	brlt	.-88     	; 0x2f62 <sim_read+0x36>
    2fba:	18 c0       	rjmp	.+48     	; 0x2fec <sim_read+0xc0>

    wdt_reset();
#ifdef SIM_DEBUG
//    printf("\nsim_read:");
#endif
    while(timeout>0) {
    2fbc:	10 16       	cp	r1, r16
    2fbe:	11 06       	cpc	r1, r17
    2fc0:	84 f2       	brlt	.-96     	; 0x2f62 <sim_read+0x36>
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <sim_read+0xc0>
//			else printf("%c",ch);
#endif
			sim_bufptr[len]=ch;
			len++;
			sim_bufptr[len]=0;
			if(strstr(sim_bufptr,expect)!=NULL) { found=1; break; }
    2fc4:	c1 e0       	ldi	r28, 0x01	; 1
			    break;
			}
		}
    }			 
    if(timeout <= 0) {
       printf("timeout\n");
    2fc6:	84 e2       	ldi	r24, 0x24	; 36
    2fc8:	96 e0       	ldi	r25, 0x06	; 6
    2fca:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
       len=0;
    }
    sim_bufptr[len]=0;
    2fce:	f7 01       	movw	r30, r14
    2fd0:	10 82       	st	Z, r1
    len=strlen(sim_bufptr);
    2fd2:	01 90       	ld	r0, Z+
    2fd4:	00 20       	and	r0, r0
    2fd6:	e9 f7       	brne	.-6      	; 0x2fd2 <sim_read+0xa6>
    2fd8:	31 97       	sbiw	r30, 0x01	; 1
    2fda:	ee 19       	sub	r30, r14
    2fdc:	ff 09       	sbc	r31, r15
     * OK=status, but can also be something else.
     */
#ifdef SIM_DEBUG
//    printf("\nlen=%d\n",len);	
#endif
    if(found) {  
    2fde:	cc 23       	and	r28, r28
    2fe0:	11 f0       	breq	.+4      	; 0x2fe6 <sim_read+0xba>
    if(timeout <= 0) {
       printf("timeout\n");
       len=0;
    }
    sim_bufptr[len]=0;
    len=strlen(sim_bufptr);
    2fe2:	cf 01       	movw	r24, r30
    2fe4:	1a c0       	rjmp	.+52     	; 0x301a <sim_read+0xee>
//    printf("\nlen=%d\n",len);	
#endif
    if(found) {  
        return len;
	} else {
		return 0;
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	17 c0       	rjmp	.+46     	; 0x301a <sim_read+0xee>
//			else printf("%c",ch);
#endif
			sim_bufptr[len]=ch;
			len++;
			sim_bufptr[len]=0;
			if(strstr(sim_bufptr,expect)!=NULL) { found=1; break; }
    2fec:	c0 e0       	ldi	r28, 0x00	; 0
    2fee:	eb cf       	rjmp	.-42     	; 0x2fc6 <sim_read+0x9a>
 *  0 if len=0 or 'expect' not found
 * >0 if len>0
 */
uint16_t sim_read(char *sim_bufptr, const char *expect, int timeout_centisec, uint16_t maxlen)
{
    uint16_t len=0;
    2ff0:	c0 e0       	ldi	r28, 0x00	; 0
    2ff2:	d0 e0       	ldi	r29, 0x00	; 0
    }			 
    if(timeout <= 0) {
       printf("timeout\n");
       len=0;
    }
    sim_bufptr[len]=0;
    2ff4:	ce 0d       	add	r28, r14
    2ff6:	df 1d       	adc	r29, r15
    2ff8:	18 82       	st	Y, r1
//    printf("\nlen=%d\n",len);	
#endif
    if(found) {  
        return len;
	} else {
		return 0;
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0d c0       	rjmp	.+26     	; 0x301a <sim_read+0xee>
    if(timeout <= 0) {
       printf("timeout\n");
       len=0;
    }
    sim_bufptr[len]=0;
    len=strlen(sim_bufptr);
    3000:	f7 01       	movw	r30, r14
    3002:	01 90       	ld	r0, Z+
    3004:	00 20       	and	r0, r0
    3006:	e9 f7       	brne	.-6      	; 0x3002 <sim_read+0xd6>
    3008:	31 97       	sbiw	r30, 0x01	; 1
    300a:	cf 01       	movw	r24, r30
    300c:	8e 19       	sub	r24, r14
    300e:	9f 09       	sbc	r25, r15
    3010:	04 c0       	rjmp	.+8      	; 0x301a <sim_read+0xee>
			if(timeout <= 0) {
			    break;
			}
		}
    }			 
    if(timeout <= 0) {
    3012:	10 16       	cp	r1, r16
    3014:	11 06       	cpc	r1, r17
    3016:	a4 f3       	brlt	.-24     	; 0x3000 <sim_read+0xd4>
    3018:	d5 cf       	rjmp	.-86     	; 0x2fc4 <sim_read+0x98>
    if(found) {  
        return len;
	} else {
		return 0;
	}
}
    301a:	df 91       	pop	r29
    301c:	cf 91       	pop	r28
    301e:	1f 91       	pop	r17
    3020:	0f 91       	pop	r16
    3022:	ff 90       	pop	r15
    3024:	ef 90       	pop	r14
    3026:	df 90       	pop	r13
    3028:	cf 90       	pop	r12
    302a:	bf 90       	pop	r11
    302c:	af 90       	pop	r10
    302e:	08 95       	ret

00003030 <sim_read_multi>:
 * returns:
 *  NULL if none in 'expect' is found
 *  *expect string if that one is found
 */
char * sim_read_multi(char *sim_bufptr, const char *expect[], const int nof_expect, int timeout_centisec, uint16_t maxlen)
{
    3030:	4f 92       	push	r4
    3032:	5f 92       	push	r5
    3034:	6f 92       	push	r6
    3036:	7f 92       	push	r7
    3038:	8f 92       	push	r8
    303a:	9f 92       	push	r9
    303c:	af 92       	push	r10
    303e:	bf 92       	push	r11
    3040:	cf 92       	push	r12
    3042:	df 92       	push	r13
    3044:	ef 92       	push	r14
    3046:	ff 92       	push	r15
    3048:	0f 93       	push	r16
    304a:	1f 93       	push	r17
    304c:	cf 93       	push	r28
    304e:	df 93       	push	r29
    3050:	4c 01       	movw	r8, r24
    3052:	2b 01       	movw	r4, r22
    3054:	3a 01       	movw	r6, r20
    3056:	59 01       	movw	r10, r18
    uint16_t len=0;
	int i,timeout=timeout_centisec;
	char ch=0, found=0;
	char *found_ptr=NULL;

    wdt_reset();
    3058:	a8 95       	wdr
#ifdef SIM_DEBUG
//    printf("\nsim_read_multi:");
#endif
    while(timeout>0) {
    305a:	12 16       	cp	r1, r18
    305c:	13 06       	cpc	r1, r19
    305e:	0c f0       	brlt	.+2      	; 0x3062 <sim_read_multi+0x32>
    3060:	4b c0       	rjmp	.+150    	; 0x30f8 <sim_read_multi+0xc8>
		if(len>=(maxlen-1)) break;	 
    3062:	01 50       	subi	r16, 0x01	; 1
    3064:	11 09       	sbc	r17, r1
    3066:	09 f4       	brne	.+2      	; 0x306a <sim_read_multi+0x3a>
    3068:	4e c0       	rjmp	.+156    	; 0x3106 <sim_read_multi+0xd6>
    306a:	7a 01       	movw	r14, r20
    306c:	ee 0c       	add	r14, r14
    306e:	ff 1c       	adc	r15, r15
    3070:	e6 0e       	add	r14, r22
    3072:	f7 1e       	adc	r15, r23
    3074:	c1 2c       	mov	r12, r1
    3076:	d1 2c       	mov	r13, r1
    3078:	04 c0       	rjmp	.+8      	; 0x3082 <sim_read_multi+0x52>
    307a:	c0 16       	cp	r12, r16
    307c:	d1 06       	cpc	r13, r17
    307e:	08 f0       	brcs	.+2      	; 0x3082 <sim_read_multi+0x52>
    3080:	42 c0       	rjmp	.+132    	; 0x3106 <sim_read_multi+0xd6>
		wdt_reset();
    3082:	a8 95       	wdr
		delay_ms(1);
    3084:	6c ec       	ldi	r22, 0xCC	; 204
    3086:	74 e0       	ldi	r23, 0x04	; 4
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
		if(Poll_SIM()) {
    3090:	0e 94 ed 08 	call	0x11da	; 0x11da <Poll_SIM>
    3094:	88 23       	and	r24, r24
    3096:	e1 f0       	breq	.+56     	; 0x30d0 <sim_read_multi+0xa0>
			ch = Receive_SIM_Byte();			
    3098:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Receive_SIM_Byte>
//			if(ch==0) printf("\\0");
//			else if(ch=='\n') printf("\\n");
//			else if(ch=='\r') printf("\\r");
//			else printf("%c",ch);
#endif
			sim_bufptr[len]=ch;
    309c:	f4 01       	movw	r30, r8
    309e:	ec 0d       	add	r30, r12
    30a0:	fd 1d       	adc	r31, r13
    30a2:	80 83       	st	Z, r24
			len++;
    30a4:	8f ef       	ldi	r24, 0xFF	; 255
    30a6:	c8 1a       	sub	r12, r24
    30a8:	d8 0a       	sbc	r13, r24
			sim_bufptr[len]=0;
    30aa:	f4 01       	movw	r30, r8
    30ac:	ec 0d       	add	r30, r12
    30ae:	fd 1d       	adc	r31, r13
    30b0:	10 82       	st	Z, r1
			for(i=0;i<nof_expect;i++) {
    30b2:	16 14       	cp	r1, r6
    30b4:	17 04       	cpc	r1, r7
    30b6:	cc f4       	brge	.+50     	; 0x30ea <sim_read_multi+0xba>
    30b8:	e2 01       	movw	r28, r4
			    if((found_ptr=strstr(sim_bufptr,expect[i]))!=NULL) { found=1; break; }
    30ba:	69 91       	ld	r22, Y+
    30bc:	79 91       	ld	r23, Y+
    30be:	c4 01       	movw	r24, r8
    30c0:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strstr>
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	a9 f4       	brne	.+42     	; 0x30f2 <sim_read_multi+0xc2>
//			else printf("%c",ch);
#endif
			sim_bufptr[len]=ch;
			len++;
			sim_bufptr[len]=0;
			for(i=0;i<nof_expect;i++) {
    30c8:	ec 16       	cp	r14, r28
    30ca:	fd 06       	cpc	r15, r29
    30cc:	b1 f7       	brne	.-20     	; 0x30ba <sim_read_multi+0x8a>
    30ce:	0d c0       	rjmp	.+26     	; 0x30ea <sim_read_multi+0xba>
			    if((found_ptr=strstr(sim_bufptr,expect[i]))!=NULL) { found=1; break; }
			}
			if(found) break;
		} else {
			delay_ms(100);
    30d0:	60 eb       	ldi	r22, 0xB0	; 176
    30d2:	7f ed       	ldi	r23, 0xDF	; 223
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
			timeout--;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	a8 1a       	sub	r10, r24
    30e0:	b1 08       	sbc	r11, r1
			if(timeout <= 0) {
    30e2:	1a 14       	cp	r1, r10
    30e4:	1b 04       	cpc	r1, r11
    30e6:	4c f2       	brlt	.-110    	; 0x307a <sim_read_multi+0x4a>
    30e8:	07 c0       	rjmp	.+14     	; 0x30f8 <sim_read_multi+0xc8>

    wdt_reset();
#ifdef SIM_DEBUG
//    printf("\nsim_read_multi:");
#endif
    while(timeout>0) {
    30ea:	1a 14       	cp	r1, r10
    30ec:	1b 04       	cpc	r1, r11
    30ee:	2c f2       	brlt	.-118    	; 0x307a <sim_read_multi+0x4a>
    30f0:	03 c0       	rjmp	.+6      	; 0x30f8 <sim_read_multi+0xc8>
			if(timeout <= 0) {
			    break;
			}
		}
    }			 
    if(timeout <= 0) {
    30f2:	1a 14       	cp	r1, r10
    30f4:	1b 04       	cpc	r1, r11
    30f6:	4c f0       	brlt	.+18     	; 0x310a <sim_read_multi+0xda>
       printf("timeout\n");
    30f8:	84 e2       	ldi	r24, 0x24	; 36
    30fa:	96 e0       	ldi	r25, 0x06	; 6
    30fc:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
       found_ptr=NULL;
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	02 c0       	rjmp	.+4      	; 0x310a <sim_read_multi+0xda>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    }
	return found_ptr;
}
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	bf 90       	pop	r11
    311c:	af 90       	pop	r10
    311e:	9f 90       	pop	r9
    3120:	8f 90       	pop	r8
    3122:	7f 90       	pop	r7
    3124:	6f 90       	pop	r6
    3126:	5f 90       	pop	r5
    3128:	4f 90       	pop	r4
    312a:	08 95       	ret

0000312c <sim_tx_char>:


void sim_tx_char(char c)
{
    312c:	20 ed       	ldi	r18, 0xD0	; 208
    312e:	37 e0       	ldi	r19, 0x07	; 7
/* delay function for microsec
   4 cpu cycles per loop + 1 cycles(?) overhead 
   when a constant is passed. */
static inline void delayloop16(uint16_t count)
{
	asm volatile (  "cp  %A0,__zero_reg__ \n\t"  \
    3130:	42 e1       	ldi	r20, 0x12	; 18
    3132:	50 e0       	ldi	r21, 0x00	; 0
    timeout=2000;
    do { 
        delay_us(10);
        timeout--;
        if(timeout==0) break;
    } while (bit_is_clear(UCSR1A, UDRE1));
    3134:	a8 ec       	ldi	r26, 0xC8	; 200
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	fa 01       	movw	r30, r20
    313a:	e1 15       	cp	r30, r1
    313c:	f1 05       	cpc	r31, r1
    313e:	11 f0       	breq	.+4      	; 0x3144 <L_Exit_671>

00003140 <L_LOOP_671>:
    3140:	31 97       	sbiw	r30, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <L_LOOP_671>

00003144 <L_Exit_671>:
    3144:	21 50       	subi	r18, 0x01	; 1
    3146:	31 09       	sbc	r19, r1
    
    timeout=2000;
    do { 
        delay_us(10);
        timeout--;
        if(timeout==0) break;
    3148:	19 f0       	breq	.+6      	; 0x3150 <L_Exit_671+0xc>
    } while (bit_is_clear(UCSR1A, UDRE1));
    314a:	9c 91       	ld	r25, X
    314c:	95 ff       	sbrs	r25, 5
    314e:	f4 cf       	rjmp	.-24     	; 0x3138 <sim_tx_char+0xc>


    loop_until_bit_is_clear(PIND, SIM900_CTS);
    3150:	4e 99       	sbic	0x09, 6	; 9
    3152:	fe cf       	rjmp	.-4      	; 0x3150 <L_Exit_671+0xc>
    3154:	20 ed       	ldi	r18, 0xD0	; 208
    3156:	37 e0       	ldi	r19, 0x07	; 7
    3158:	42 e1       	ldi	r20, 0x12	; 18
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	fa 01       	movw	r30, r20
    315e:	e1 15       	cp	r30, r1
    3160:	f1 05       	cpc	r31, r1
    3162:	11 f0       	breq	.+4      	; 0x3168 <L_Exit_703>

00003164 <L_LOOP_703>:
    3164:	31 97       	sbiw	r30, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <L_LOOP_703>

00003168 <L_Exit_703>:
    3168:	21 50       	subi	r18, 0x01	; 1
    316a:	31 09       	sbc	r19, r1
    timeout=2000;
    do { 
        delay_us(10);
        timeout--;
        if(timeout==0) break;
    316c:	11 f0       	breq	.+4      	; 0x3172 <L_Exit_703+0xa>
    } while (bit_is_set(PIND, SIM900_CTS));
    316e:	4e 99       	sbic	0x09, 6	; 9
    3170:	f5 cf       	rjmp	.-22     	; 0x315c <L_Exit_671+0x18>

    UDR1=c;
    3172:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    3176:	08 95       	ret

00003178 <sim_tx>:
//	else printf("%c",c);
#endif
}

void sim_tx(const char *buf, int len)
{
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    char c;
    int i;
#ifdef SIM_DEBUG
//	printf("\nsim_write:");
#endif
    for(i=0;i<len;i++) {
    3180:	16 16       	cp	r1, r22
    3182:	17 06       	cpc	r1, r23
    3184:	4c f4       	brge	.+18     	; 0x3198 <sim_tx+0x20>
    3186:	8c 01       	movw	r16, r24
    3188:	ec 01       	movw	r28, r24
    318a:	06 0f       	add	r16, r22
    318c:	17 1f       	adc	r17, r23
        c=buf[i];
        sim_tx_char(c);
    318e:	89 91       	ld	r24, Y+
    3190:	cd df       	rcall	.-102    	; 0x312c <sim_tx_char>
    char c;
    int i;
#ifdef SIM_DEBUG
//	printf("\nsim_write:");
#endif
    for(i=0;i<len;i++) {
    3192:	c0 17       	cp	r28, r16
    3194:	d1 07       	cpc	r29, r17
    3196:	d9 f7       	brne	.-10     	; 0x318e <sim_tx+0x16>
        c=buf[i];
        sim_tx_char(c);
    }
}
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <sim_onoff_pulse>:

uint8_t sim_onoff_pulse(void)
{
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    uint8_t waiting=1;
    uint8_t ison;
    uint8_t sreg;
	
#ifdef SIM_DEBUG
	printf("\nsim_onoff_pulse: ");
    31a6:	8c e2       	ldi	r24, 0x2C	; 44
    31a8:	96 e0       	ldi	r25, 0x06	; 6
    31aa:	9f 93       	push	r25
    31ac:	8f 93       	push	r24
    31ae:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
#endif
    sreg=SREG;
    31b2:	8f b7       	in	r24, 0x3f	; 63
    cli();
    31b4:	f8 94       	cli
    sysval.SIM_poweron_pulse=6;
    31b6:	96 e0       	ldi	r25, 0x06	; 6
    31b8:	90 93 d2 0f 	sts	0x0FD2, r25	; 0x800fd2 <sysval+0x13>
    SREG=sreg; // sei()
    31bc:	8f bf       	out	0x3f, r24	; 63
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0

    while(waiting) {
        wdt_reset();
        sreg=SREG;
        cli();
        if(sysval.SIM_poweron_pulse==0) waiting=0;
    31c2:	cf eb       	ldi	r28, 0xBF	; 191
    31c4:	df e0       	ldi	r29, 0x0F	; 15
    cli();
    sysval.SIM_poweron_pulse=6;
    SREG=sreg; // sei()

    while(waiting) {
        wdt_reset();
    31c6:	a8 95       	wdr
        sreg=SREG;
    31c8:	8f b7       	in	r24, 0x3f	; 63
        cli();
    31ca:	f8 94       	cli
        if(sysval.SIM_poweron_pulse==0) waiting=0;
    31cc:	9b 89       	ldd	r25, Y+19	; 0x13
    31ce:	99 23       	and	r25, r25
    31d0:	d1 f0       	breq	.+52     	; 0x3206 <sim_onoff_pulse+0x64>
        SREG=sreg; // sei()
    31d2:	8f bf       	out	0x3f, r24	; 63
        delay_ms(1);
    31d4:	6c ec       	ldi	r22, 0xCC	; 204
    31d6:	74 e0       	ldi	r23, 0x04	; 4
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    31e0:	f2 cf       	rjmp	.-28     	; 0x31c6 <sim_onoff_pulse+0x24>
    }
    ison=sim_is_on();
    if(ison) {
        sim_tx("AT\r",3); // help sim with autobauding
    31e2:	63 e0       	ldi	r22, 0x03	; 3
    31e4:	70 e0       	ldi	r23, 0x00	; 0
    31e6:	8f e3       	ldi	r24, 0x3F	; 63
    31e8:	96 e0       	ldi	r25, 0x06	; 6
    31ea:	c6 df       	rcall	.-116    	; 0x3178 <sim_tx>
        wdt_reset();
    31ec:	a8 95       	wdr
        delay_ms(500);
    31ee:	60 e7       	ldi	r22, 0x70	; 112
    31f0:	7e e5       	ldi	r23, 0x5E	; 94
    31f2:	89 e0       	ldi	r24, 0x09	; 9
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
        sim_tx("AT\r",3); // help sim with autobauding
    31fa:	63 e0       	ldi	r22, 0x03	; 3
    31fc:	70 e0       	ldi	r23, 0x00	; 0
    31fe:	8f e3       	ldi	r24, 0x3F	; 63
    3200:	96 e0       	ldi	r25, 0x06	; 6
    3202:	ba df       	rcall	.-140    	; 0x3178 <sim_tx>
    3204:	0c c0       	rjmp	.+24     	; 0x321e <sim_onoff_pulse+0x7c>
    while(waiting) {
        wdt_reset();
        sreg=SREG;
        cli();
        if(sysval.SIM_poweron_pulse==0) waiting=0;
        SREG=sreg; // sei()
    3206:	8f bf       	out	0x3f, r24	; 63
        delay_ms(1);
    3208:	6c ec       	ldi	r22, 0xCC	; 204
    320a:	74 e0       	ldi	r23, 0x04	; 4
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
#endif


uint8_t sim_is_on(void)
{
    return (bit_is_set(PINC,SIM900_STATUS));
    3214:	86 b1       	in	r24, 0x06	; 6
        if(sysval.SIM_poweron_pulse==0) waiting=0;
        SREG=sreg; // sei()
        delay_ms(1);
    }
    ison=sim_is_on();
    if(ison) {
    3216:	c8 2f       	mov	r28, r24
    3218:	c4 70       	andi	r28, 0x04	; 4
    321a:	82 fd       	sbrc	r24, 2
        sim_tx("AT\r",3); // help sim with autobauding
        wdt_reset();
        delay_ms(500);
        sim_tx("AT\r",3); // help sim with autobauding
    }
    sim_rxflush();
    321c:	e2 cf       	rjmp	.-60     	; 0x31e2 <sim_onoff_pulse+0x40>
    321e:	62 de       	rcall	.-828    	; 0x2ee4 <sim_rxflush>
#ifdef SIM_DEBUG
    printf(" sim_onoff_pulse done\n");
    3220:	83 e4       	ldi	r24, 0x43	; 67
    3222:	96 e0       	ldi	r25, 0x06	; 6
    3224:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
#endif
    return ison;
}
    3228:	8c 2f       	mov	r24, r28
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	08 95       	ret

00003230 <phonenr_ok>:

int phonenr_ok(const char *nr)
{
    int i;
    if(strlen(nr) < MIN_PHONE_NR_LENGTH) return 0;
    3230:	fc 01       	movw	r30, r24
    3232:	01 90       	ld	r0, Z+
    3234:	00 20       	and	r0, r0
    3236:	e9 f7       	brne	.-6      	; 0x3232 <phonenr_ok+0x2>
    3238:	31 97       	sbiw	r30, 0x01	; 1
    323a:	e8 1b       	sub	r30, r24
    323c:	f9 0b       	sbc	r31, r25
    323e:	9f 01       	movw	r18, r30
    3240:	2a 50       	subi	r18, 0x0A	; 10
    3242:	31 09       	sbc	r19, r1
    3244:	2b 30       	cpi	r18, 0x0B	; 11
    3246:	31 05       	cpc	r19, r1
    3248:	08 f5       	brcc	.+66     	; 0x328c <phonenr_ok+0x5c>
    if(strlen(nr) > MAX_PHONE_NR_LENGTH) return 0;
    if(nr[0] != '+') return 0;
    324a:	dc 01       	movw	r26, r24
    324c:	2c 91       	ld	r18, X
    324e:	2b 32       	cpi	r18, 0x2B	; 43
    3250:	01 f5       	brne	.+64     	; 0x3292 <phonenr_ok+0x62>
    for(i=1;i<strlen(nr);i++) {
    3252:	e2 30       	cpi	r30, 0x02	; 2
    3254:	f1 05       	cpc	r31, r1
    3256:	00 f1       	brcs	.+64     	; 0x3298 <phonenr_ok+0x68>
        if(!isdigit(nr[i])) return 0;
    3258:	11 96       	adiw	r26, 0x01	; 1
    325a:	2c 91       	ld	r18, X
    325c:	11 97       	sbiw	r26, 0x01	; 1
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	20 53       	subi	r18, 0x30	; 48
    3262:	31 09       	sbc	r19, r1
    3264:	2a 30       	cpi	r18, 0x0A	; 10
    3266:	31 05       	cpc	r19, r1
    3268:	d0 f4       	brcc	.+52     	; 0x329e <phonenr_ok+0x6e>
    326a:	12 96       	adiw	r26, 0x02	; 2
    326c:	e8 0f       	add	r30, r24
    326e:	f9 1f       	adc	r31, r25
    3270:	07 c0       	rjmp	.+14     	; 0x3280 <phonenr_ok+0x50>
    3272:	2d 91       	ld	r18, X+
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	20 53       	subi	r18, 0x30	; 48
    3278:	31 09       	sbc	r19, r1
    327a:	2a 30       	cpi	r18, 0x0A	; 10
    327c:	31 05       	cpc	r19, r1
    327e:	90 f4       	brcc	.+36     	; 0x32a4 <phonenr_ok+0x74>
{
    int i;
    if(strlen(nr) < MIN_PHONE_NR_LENGTH) return 0;
    if(strlen(nr) > MAX_PHONE_NR_LENGTH) return 0;
    if(nr[0] != '+') return 0;
    for(i=1;i<strlen(nr);i++) {
    3280:	ae 17       	cp	r26, r30
    3282:	bf 07       	cpc	r27, r31
    3284:	b1 f7       	brne	.-20     	; 0x3272 <phonenr_ok+0x42>
        if(!isdigit(nr[i])) return 0;
    }
    return 1;
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	08 95       	ret
}

int phonenr_ok(const char *nr)
{
    int i;
    if(strlen(nr) < MIN_PHONE_NR_LENGTH) return 0;
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	08 95       	ret
    if(strlen(nr) > MAX_PHONE_NR_LENGTH) return 0;
    if(nr[0] != '+') return 0;
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	08 95       	ret
    for(i=1;i<strlen(nr);i++) {
        if(!isdigit(nr[i])) return 0;
    }
    return 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	08 95       	ret
    int i;
    if(strlen(nr) < MIN_PHONE_NR_LENGTH) return 0;
    if(strlen(nr) > MAX_PHONE_NR_LENGTH) return 0;
    if(nr[0] != '+') return 0;
    for(i=1;i<strlen(nr);i++) {
        if(!isdigit(nr[i])) return 0;
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	08 95       	ret
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    }
    return 1;
}
    32a8:	08 95       	ret

000032aa <sim_send_sms>:

int8_t sim_send_sms(const char *sms_msg, uint8_t size, uint8_t to_phone_idx)
{
    32aa:	df 92       	push	r13
    32ac:	ef 92       	push	r14
    32ae:	ff 92       	push	r15
    32b0:	0f 93       	push	r16
    32b2:	1f 93       	push	r17
    32b4:	cf 93       	push	r28
    32b6:	df 93       	push	r29
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	c8 56       	subi	r28, 0x68	; 104
    32be:	d1 09       	sbc	r29, r1
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	d8 2e       	mov	r13, r24
    32cc:	e9 2e       	mov	r14, r25
    32ce:	f6 2e       	mov	r15, r22
    32d0:	14 2f       	mov	r17, r20
    char operator_phonenr[MAX_PHONE_NR_LENGTH];
    char buf[MAX_PHONE_NR_LENGTH];
    uint8_t len;
    int8_t ret=0;

    printf("sendsms:%s\n",sms_msg);
    32d2:	9f 93       	push	r25
    32d4:	8f 93       	push	r24
    32d6:	89 e5       	ldi	r24, 0x59	; 89
    32d8:	96 e0       	ldi	r25, 0x06	; 6
    32da:	9f 93       	push	r25
    32dc:	8f 93       	push	r24
    32de:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    sreg=SREG;
    32e2:	0f b7       	in	r16, 0x3f	; 63
    cli();
    32e4:	f8 94       	cli
    eeprom_read_block(operator_phonenr,
                      &EEPROM_ADDR_OperatorNr[to_phone_idx],
    32e6:	84 e1       	ldi	r24, 0x14	; 20
    32e8:	18 9f       	mul	r17, r24
    32ea:	b0 01       	movw	r22, r0
    32ec:	11 24       	eor	r1, r1
    32ee:	67 5a       	subi	r22, 0xA7	; 167
    32f0:	7f 4f       	sbci	r23, 0xFF	; 255
    int8_t ret=0;

    printf("sendsms:%s\n",sms_msg);
    sreg=SREG;
    cli();
    eeprom_read_block(operator_phonenr,
    32f2:	44 e1       	ldi	r20, 0x14	; 20
    32f4:	50 e0       	ldi	r21, 0x00	; 0
    32f6:	ce 01       	movw	r24, r28
    32f8:	8f 5b       	subi	r24, 0xBF	; 191
    32fa:	9f 4f       	sbci	r25, 0xFF	; 255
    32fc:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
                      &EEPROM_ADDR_OperatorNr[to_phone_idx],
                      MAX_PHONE_NR_LENGTH);
    SREG=sreg;
    3300:	0f bf       	out	0x3f, r16	; 63
    if(!phonenr_ok(operator_phonenr)) return -1;
    3302:	ce 01       	movw	r24, r28
    3304:	8f 5b       	subi	r24, 0xBF	; 191
    3306:	9f 4f       	sbci	r25, 0xFF	; 255
    3308:	93 df       	rcall	.-218    	; 0x3230 <phonenr_ok>
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	89 2b       	or	r24, r25
    3314:	09 f4       	brne	.+2      	; 0x3318 <sim_send_sms+0x6e>
    3316:	80 c0       	rjmp	.+256    	; 0x3418 <sim_send_sms+0x16e>

    sim_tx("AT+CMGS=\"",9);
    3318:	69 e0       	ldi	r22, 0x09	; 9
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	85 e6       	ldi	r24, 0x65	; 101
    331e:	96 e0       	ldi	r25, 0x06	; 6
    3320:	2b df       	rcall	.-426    	; 0x3178 <sim_tx>
    len=sprintf(buf,"%s\"\r",operator_phonenr);
    3322:	ce 01       	movw	r24, r28
    3324:	8f 5b       	subi	r24, 0xBF	; 191
    3326:	9f 4f       	sbci	r25, 0xFF	; 255
    3328:	9f 93       	push	r25
    332a:	8f 93       	push	r24
    332c:	8f e6       	ldi	r24, 0x6F	; 111
    332e:	96 e0       	ldi	r25, 0x06	; 6
    3330:	9f 93       	push	r25
    3332:	8f 93       	push	r24
    3334:	8e 01       	movw	r16, r28
    3336:	0b 5a       	subi	r16, 0xAB	; 171
    3338:	1f 4f       	sbci	r17, 0xFF	; 255
    333a:	1f 93       	push	r17
    333c:	0f 93       	push	r16
    333e:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    sim_tx(buf,len);
    3342:	bc 01       	movw	r22, r24
    3344:	77 27       	eor	r23, r23
    3346:	c8 01       	movw	r24, r16
    3348:	17 df       	rcall	.-466    	; 0x3178 <sim_tx>
    
    if(sim_read(sim_rxbuf,">",5,sizeof(sim_rxbuf))==0) {
    334a:	20 e4       	ldi	r18, 0x40	; 64
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	45 e0       	ldi	r20, 0x05	; 5
    3350:	50 e0       	ldi	r21, 0x00	; 0
    3352:	64 e7       	ldi	r22, 0x74	; 116
    3354:	76 e0       	ldi	r23, 0x06	; 6
    3356:	ce 01       	movw	r24, r28
    3358:	01 96       	adiw	r24, 0x01	; 1
    335a:	e8 dd       	rcall	.-1072   	; 0x2f2c <sim_read>
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	89 2b       	or	r24, r25
    336a:	e1 f4       	brne	.+56     	; 0x33a4 <sim_send_sms+0xfa>
        printf("abort\n");
    336c:	86 e7       	ldi	r24, 0x76	; 118
    336e:	96 e0       	ldi	r25, 0x06	; 6
    3370:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
        len=sprintf(buf,"%c",0x1b); // abort by send ESC
    3374:	1f 92       	push	r1
    3376:	8b e1       	ldi	r24, 0x1B	; 27
    3378:	8f 93       	push	r24
    337a:	8c e7       	ldi	r24, 0x7C	; 124
    337c:	96 e0       	ldi	r25, 0x06	; 6
    337e:	9f 93       	push	r25
    3380:	8f 93       	push	r24
    3382:	1f 93       	push	r17
    3384:	0f 93       	push	r16
        sim_tx(buf,len);
    3386:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    338a:	bc 01       	movw	r22, r24
    338c:	77 27       	eor	r23, r23
        sim_rxflush();
    338e:	c8 01       	movw	r24, r16
    3390:	f3 de       	rcall	.-538    	; 0x3178 <sim_tx>
        return -3;
    3392:	a8 dd       	rcall	.-1200   	; 0x2ee4 <sim_rxflush>
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    }

    /*
     * Now write SMS:
     */
    sim_tx(sms_msg,size); // send prepared sms message
    33a0:	8d ef       	ldi	r24, 0xFD	; 253
    33a2:	3b c0       	rjmp	.+118    	; 0x341a <sim_send_sms+0x170>
    33a4:	6f 2d       	mov	r22, r15
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	8d 2d       	mov	r24, r13
    33aa:	9e 2d       	mov	r25, r14
    len=sprintf(buf,"%c",0x1a); // end SMS
    33ac:	e5 de       	rcall	.-566    	; 0x3178 <sim_tx>
    33ae:	1f 92       	push	r1
    33b0:	8a e1       	ldi	r24, 0x1A	; 26
    33b2:	8f 93       	push	r24
    33b4:	8c e7       	ldi	r24, 0x7C	; 124
    33b6:	96 e0       	ldi	r25, 0x06	; 6
    33b8:	9f 93       	push	r25
    33ba:	8f 93       	push	r24
    33bc:	8e 01       	movw	r16, r28
    33be:	0b 5a       	subi	r16, 0xAB	; 171
    33c0:	1f 4f       	sbci	r17, 0xFF	; 255
    33c2:	1f 93       	push	r17
    sim_tx(buf,len);
    33c4:	0f 93       	push	r16
    33c6:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    33ca:	bc 01       	movw	r22, r24
    33cc:	77 27       	eor	r23, r23

    sim_rxflush();
    33ce:	c8 01       	movw	r24, r16
    33d0:	d3 de       	rcall	.-602    	; 0x3178 <sim_tx>
#ifdef SIM_DEBUG
    printf("result\n");
    33d2:	88 dd       	rcall	.-1264   	; 0x2ee4 <sim_rxflush>
    33d4:	8f e7       	ldi	r24, 0x7F	; 127
    33d6:	96 e0       	ldi	r25, 0x06	; 6
#endif
    ret=sim_read(sim_rxbuf,"+CMGS",60,sizeof(sim_rxbuf));
    33d8:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
    33dc:	20 e4       	ldi	r18, 0x40	; 64
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4c e3       	ldi	r20, 0x3C	; 60
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	66 e8       	ldi	r22, 0x86	; 134
    33e6:	76 e0       	ldi	r23, 0x06	; 6
    33e8:	ce 01       	movw	r24, r28
    33ea:	01 96       	adiw	r24, 0x01	; 1
    33ec:	9f dd       	rcall	.-1218   	; 0x2f2c <sim_read>
#ifdef SIM_DEBUG
    printf("send ret=%d\n",ret);
    33ee:	18 2f       	mov	r17, r24
    33f0:	81 2f       	mov	r24, r17
    33f2:	01 2e       	mov	r0, r17
    33f4:	00 0c       	add	r0, r0
    33f6:	99 0b       	sbc	r25, r25
    33f8:	9f 93       	push	r25
    33fa:	1f 93       	push	r17
    33fc:	8c e8       	ldi	r24, 0x8C	; 140
    33fe:	96 e0       	ldi	r25, 0x06	; 6
    3400:	9f 93       	push	r25
    3402:	8f 93       	push	r24
#endif
    sim_rxflush();
    3404:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    return ret;
    3408:	6d dd       	rcall	.-1318   	; 0x2ee4 <sim_rxflush>
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	81 2f       	mov	r24, r17
    cli();
    eeprom_read_block(operator_phonenr,
                      &EEPROM_ADDR_OperatorNr[to_phone_idx],
                      MAX_PHONE_NR_LENGTH);
    SREG=sreg;
    if(!phonenr_ok(operator_phonenr)) return -1;
    3416:	01 c0       	rjmp	.+2      	; 0x341a <sim_send_sms+0x170>
#ifdef SIM_DEBUG
    printf("send ret=%d\n",ret);
#endif
    sim_rxflush();
    return ret;
}
    3418:	8f ef       	ldi	r24, 0xFF	; 255
    341a:	c8 59       	subi	r28, 0x98	; 152
    341c:	df 4f       	sbci	r29, 0xFF	; 255
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	1f 91       	pop	r17
    342e:	0f 91       	pop	r16
    3430:	ff 90       	pop	r15
    3432:	ef 90       	pop	r14
    3434:	df 90       	pop	r13
    3436:	08 95       	ret

00003438 <sim_receive_sms>:

char * sim_receive_sms(char *sim_rxbuf, uint16_t maxlen)
{
    3438:	9f 92       	push	r9
    343a:	af 92       	push	r10
    343c:	bf 92       	push	r11
    343e:	cf 92       	push	r12
    3440:	df 92       	push	r13
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	64 97       	sbiw	r28, 0x14	; 20
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	e8 2e       	mov	r14, r24
    3460:	f9 2e       	mov	r15, r25
    3462:	8b 01       	movw	r16, r22
    char *ptr;
    char c;
    uint8_t match;
    int i;

    sysval.actual_operator_idx=0;
    3464:	10 92 5c 10 	sts	0x105C, r1	; 0x80105c <sysval+0x9d>

    sim_tx("AT+CMGL\r",8);
    3468:	68 e0       	ldi	r22, 0x08	; 8
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	89 e9       	ldi	r24, 0x99	; 153
    346e:	96 e0       	ldi	r25, 0x06	; 6
    3470:	83 de       	rcall	.-762    	; 0x3178 <sim_tx>
	delay_ms(500);
    3472:	60 e7       	ldi	r22, 0x70	; 112
    3474:	7e e5       	ldi	r23, 0x5E	; 94
    3476:	89 e0       	ldi	r24, 0x09	; 9
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	wdt_reset();
    347e:	a8 95       	wdr
	
    if(sim_read(sim_rxbuf,"REC UNREAD",30,maxlen) == 0) return NULL;
    3480:	98 01       	movw	r18, r16
    3482:	4e e1       	ldi	r20, 0x1E	; 30
    3484:	50 e0       	ldi	r21, 0x00	; 0
    3486:	62 ea       	ldi	r22, 0xA2	; 162
    3488:	76 e0       	ldi	r23, 0x06	; 6
    348a:	8e 2d       	mov	r24, r14
    348c:	9f 2d       	mov	r25, r15
    348e:	4e dd       	rcall	.-1380   	; 0x2f2c <sim_read>
    3490:	89 2b       	or	r24, r25
    3492:	09 f4       	brne	.+2      	; 0x3496 <sim_receive_sms+0x5e>
    3494:	9a c0       	rjmp	.+308    	; 0x35ca <sim_receive_sms+0x192>
	
	if(sim_read(sim_rxbuf,"\r\nOK\r\n",7,maxlen) == 0) return NULL;	
    3496:	98 01       	movw	r18, r16
    3498:	47 e0       	ldi	r20, 0x07	; 7
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	6d ea       	ldi	r22, 0xAD	; 173
    349e:	76 e0       	ldi	r23, 0x06	; 6
    34a0:	8e 2d       	mov	r24, r14
    34a2:	9f 2d       	mov	r25, r15
    34a4:	43 dd       	rcall	.-1402   	; 0x2f2c <sim_read>
    34a6:	89 2b       	or	r24, r25
    34a8:	f1 f4       	brne	.+60     	; 0x34e6 <sim_receive_sms+0xae>
    34aa:	92 c0       	rjmp	.+292    	; 0x35d0 <sim_receive_sms+0x198>
    // first pass:  AT+CMGL\r\r\n+CMGL: 1,"REC UNREAD
	// second pass: ","+31612622133","Leon","13/05/10,13:16:52+08"\r\nSOC?\r\n\r\nOK\r\n
    sim_bufptr=sim_rxbuf;
    match=0;
    while((c=*sim_bufptr) != 0) {
        if(c=='\"') match++;
    34ac:	82 32       	cpi	r24, 0x22	; 34
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <sim_receive_sms+0x7a>
    34b0:	9f 5f       	subi	r25, 0xFF	; 255
        sim_bufptr++;
    34b2:	78 01       	movw	r14, r16
        if(match==2) {
    34b4:	92 30       	cpi	r25, 0x02	; 2
    34b6:	51 f4       	brne	.+20     	; 0x34cc <sim_receive_sms+0x94>
			match++;
			printf("phonenr: ");
    34b8:	bf 92       	push	r11
    34ba:	af 92       	push	r10
    34bc:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
	// second pass: ","+31612622133","Leon","13/05/10,13:16:52+08"\r\nSOC?\r\n\r\nOK\r\n
    sim_bufptr=sim_rxbuf;
    match=0;
    while((c=*sim_bufptr) != 0) {
        if(c=='\"') match++;
        sim_bufptr++;
    34c4:	d0 2e       	mov	r13, r16
    34c6:	c1 2e       	mov	r12, r17
        if(match==2) {
			match++;
    34c8:	93 e0       	ldi	r25, 0x03	; 3
    34ca:	18 c0       	rjmp	.+48     	; 0x34fc <sim_receive_sms+0xc4>
			printf("phonenr: ");
            phonenr_ptr=sim_bufptr;
        }
        if(match==4) {
    34cc:	94 30       	cpi	r25, 0x04	; 4
    34ce:	b1 f4       	brne	.+44     	; 0x34fc <sim_receive_sms+0xc4>
            *(sim_bufptr-1)=0; // eos for phone number
    34d0:	f8 01       	movw	r30, r16
    34d2:	31 97       	sbiw	r30, 0x01	; 1
    34d4:	10 82       	st	Z, r1
            sim_bufptr++;
    34d6:	8f ef       	ldi	r24, 0xFF	; 255
    34d8:	e8 1a       	sub	r14, r24
    34da:	f8 0a       	sbc	r15, r24
			printf("%s\n",phonenr_ptr);
    34dc:	8d 2d       	mov	r24, r13
    34de:	9c 2d       	mov	r25, r12
    34e0:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
            break;
    34e4:	11 c0       	rjmp	.+34     	; 0x3508 <sim_receive_sms+0xd0>
    34e6:	0e 2d       	mov	r16, r14
    34e8:	1f 2d       	mov	r17, r15
	delay_ms(500);
	wdt_reset();
	
    if(sim_read(sim_rxbuf,"REC UNREAD",30,maxlen) == 0) return NULL;
	
	if(sim_read(sim_rxbuf,"\r\nOK\r\n",7,maxlen) == 0) return NULL;	
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	d1 2c       	mov	r13, r1
    34ee:	c1 2c       	mov	r12, r1
    while((c=*sim_bufptr) != 0) {
        if(c=='\"') match++;
        sim_bufptr++;
        if(match==2) {
			match++;
			printf("phonenr: ");
    34f0:	0f 2e       	mov	r0, r31
    34f2:	f4 eb       	ldi	r31, 0xB4	; 180
    34f4:	af 2e       	mov	r10, r31
    34f6:	f6 e0       	ldi	r31, 0x06	; 6
    34f8:	bf 2e       	mov	r11, r31
    34fa:	f0 2d       	mov	r31, r0
    34fc:	78 01       	movw	r14, r16
    // message response comes in like:
    // first pass:  AT+CMGL\r\r\n+CMGL: 1,"REC UNREAD
	// second pass: ","+31612622133","Leon","13/05/10,13:16:52+08"\r\nSOC?\r\n\r\nOK\r\n
    sim_bufptr=sim_rxbuf;
    match=0;
    while((c=*sim_bufptr) != 0) {
    34fe:	f8 01       	movw	r30, r16
    3500:	81 91       	ld	r24, Z+
    3502:	8f 01       	movw	r16, r30
    3504:	81 11       	cpse	r24, r1
    3506:	d2 cf       	rjmp	.-92     	; 0x34ac <sim_receive_sms+0x74>
            sim_bufptr++;
			printf("%s\n",phonenr_ptr);
            break;
        }
    }
    sim_bufptr=strstr(sim_bufptr,"\r\n");
    3508:	65 e4       	ldi	r22, 0x45	; 69
    350a:	7b e0       	ldi	r23, 0x0B	; 11
    350c:	c7 01       	movw	r24, r14
    350e:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strstr>
    if(sim_bufptr==NULL) { printf("nothing\n"); return NULL; }
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	39 f4       	brne	.+14     	; 0x3524 <sim_receive_sms+0xec>
    3516:	8e eb       	ldi	r24, 0xBE	; 190
    3518:	96 e0       	ldi	r25, 0x06	; 6
    351a:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	58 c0       	rjmp	.+176    	; 0x35d4 <sim_receive_sms+0x19c>

    sim_bufptr+=2; // point to message
    3524:	8c 01       	movw	r16, r24
    3526:	0e 5f       	subi	r16, 0xFE	; 254
    3528:	1f 4f       	sbci	r17, 0xFF	; 255

    // remove "\r\n\r\nOK\r\n" after message:
    ptr=sim_bufptr;
    while((c=*ptr) != 0) {
    352a:	fc 01       	movw	r30, r24
    352c:	22 81       	ldd	r18, Z+2	; 0x02
    352e:	22 23       	and	r18, r18
    3530:	79 f0       	breq	.+30     	; 0x3550 <sim_receive_sms+0x118>
        if(c=='\r') {
    3532:	2d 30       	cpi	r18, 0x0D	; 13
    3534:	39 f4       	brne	.+14     	; 0x3544 <sim_receive_sms+0x10c>
    3536:	03 c0       	rjmp	.+6      	; 0x353e <sim_receive_sms+0x106>
    3538:	8d 30       	cpi	r24, 0x0D	; 13
    353a:	31 f4       	brne	.+12     	; 0x3548 <sim_receive_sms+0x110>
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <sim_receive_sms+0x108>
    if(sim_bufptr==NULL) { printf("nothing\n"); return NULL; }

    sim_bufptr+=2; // point to message

    // remove "\r\n\r\nOK\r\n" after message:
    ptr=sim_bufptr;
    353e:	d8 01       	movw	r26, r16
    while((c=*ptr) != 0) {
        if(c=='\r') {
            *ptr=0;
    3540:	1c 92       	st	X, r1
            break;
    3542:	06 c0       	rjmp	.+12     	; 0x3550 <sim_receive_sms+0x118>
    3544:	fc 01       	movw	r30, r24
    3546:	33 96       	adiw	r30, 0x03	; 3
        }
        ptr++;
    3548:	df 01       	movw	r26, r30

    sim_bufptr+=2; // point to message

    // remove "\r\n\r\nOK\r\n" after message:
    ptr=sim_bufptr;
    while((c=*ptr) != 0) {
    354a:	81 91       	ld	r24, Z+
    354c:	81 11       	cpse	r24, r1
    354e:	f4 cf       	rjmp	.-24     	; 0x3538 <sim_receive_sms+0x100>
            *ptr=0;
            break;
        }
        ptr++;
    }
    printf("sms:%s\n",sim_bufptr);
    3550:	1f 93       	push	r17
    3552:	0f 93       	push	r16
    3554:	8d e5       	ldi	r24, 0x5D	; 93
    3556:	96 e0       	ldi	r25, 0x06	; 6
    3558:	9f 93       	push	r25
    355a:	8f 93       	push	r24
    355c:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    3560:	0f 2e       	mov	r0, r31
    3562:	f9 e5       	ldi	r31, 0x59	; 89
    3564:	ef 2e       	mov	r14, r31
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	ff 2e       	mov	r15, r31
    356a:	f0 2d       	mov	r31, r0
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	0f 90       	pop	r0

    // verify if sender is in OPER list:
    for(i=0;i<MAX_NR_OPERATORS;i++) {
    3574:	a1 2c       	mov	r10, r1
    3576:	b1 2c       	mov	r11, r1
        sreg=SREG;
    3578:	9f b6       	in	r9, 0x3f	; 63
        cli();
    357a:	f8 94       	cli
        eeprom_read_block(operator_phonenr,&EEPROM_ADDR_OperatorNr[i],
    357c:	44 e1       	ldi	r20, 0x14	; 20
    357e:	50 e0       	ldi	r21, 0x00	; 0
    3580:	b7 01       	movw	r22, r14
    3582:	ce 01       	movw	r24, r28
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
                          MAX_PHONE_NR_LENGTH);
        SREG=sreg;
    358a:	9f be       	out	0x3f, r9	; 63
        if(strcmp(phonenr_ptr,operator_phonenr) == 0) {
    358c:	be 01       	movw	r22, r28
    358e:	6f 5f       	subi	r22, 0xFF	; 255
    3590:	7f 4f       	sbci	r23, 0xFF	; 255
    3592:	8d 2d       	mov	r24, r13
    3594:	9c 2d       	mov	r25, r12
    3596:	0e 94 34 2b 	call	0x5668	; 0x5668 <strcmp>
    359a:	89 2b       	or	r24, r25
    359c:	49 f4       	brne	.+18     	; 0x35b0 <sim_receive_sms+0x178>
            sysval.actual_operator_idx=i;
    359e:	a0 92 5c 10 	sts	0x105C, r10	; 0x80105c <sysval+0x9d>
			printf("phone number OK\n");
    35a2:	86 ec       	ldi	r24, 0xC6	; 198
    35a4:	96 e0       	ldi	r25, 0x06	; 6
    35a6:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
            break;
        }
    }
	return sim_bufptr;
    35aa:	80 2f       	mov	r24, r16
    35ac:	91 2f       	mov	r25, r17
                          MAX_PHONE_NR_LENGTH);
        SREG=sreg;
        if(strcmp(phonenr_ptr,operator_phonenr) == 0) {
            sysval.actual_operator_idx=i;
			printf("phone number OK\n");
            break;
    35ae:	12 c0       	rjmp	.+36     	; 0x35d4 <sim_receive_sms+0x19c>
        ptr++;
    }
    printf("sms:%s\n",sim_bufptr);

    // verify if sender is in OPER list:
    for(i=0;i<MAX_NR_OPERATORS;i++) {
    35b0:	ff ef       	ldi	r31, 0xFF	; 255
    35b2:	af 1a       	sub	r10, r31
    35b4:	bf 0a       	sbc	r11, r31
    35b6:	84 e1       	ldi	r24, 0x14	; 20
    35b8:	e8 0e       	add	r14, r24
    35ba:	f1 1c       	adc	r15, r1
    35bc:	e7 e0       	ldi	r30, 0x07	; 7
    35be:	ae 16       	cp	r10, r30
    35c0:	b1 04       	cpc	r11, r1
    35c2:	d1 f6       	brne	.-76     	; 0x3578 <sim_receive_sms+0x140>
            sysval.actual_operator_idx=i;
			printf("phone number OK\n");
            break;
        }
    }
	return sim_bufptr;
    35c4:	80 2f       	mov	r24, r16
    35c6:	91 2f       	mov	r25, r17
    35c8:	05 c0       	rjmp	.+10     	; 0x35d4 <sim_receive_sms+0x19c>

    sim_tx("AT+CMGL\r",8);
	delay_ms(500);
	wdt_reset();
	
    if(sim_read(sim_rxbuf,"REC UNREAD",30,maxlen) == 0) return NULL;
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	02 c0       	rjmp	.+4      	; 0x35d4 <sim_receive_sms+0x19c>
	
	if(sim_read(sim_rxbuf,"\r\nOK\r\n",7,maxlen) == 0) return NULL;	
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
			printf("phone number OK\n");
            break;
        }
    }
	return sim_bufptr;
}
    35d4:	64 96       	adiw	r28, 0x14	; 20
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	ff 90       	pop	r15
    35ea:	ef 90       	pop	r14
    35ec:	df 90       	pop	r13
    35ee:	cf 90       	pop	r12
    35f0:	bf 90       	pop	r11
    35f2:	af 90       	pop	r10
    35f4:	9f 90       	pop	r9
    35f6:	08 95       	ret

000035f8 <sim_delete_sms>:

uint8_t sim_delete_sms(void)
{
    35f8:	cf 93       	push	r28
    35fa:	df 93       	push	r29
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	a0 97       	sbiw	r28, 0x20	; 32
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	uint16_t len;
    sim_tx("AT+CMGD=1\r",10);
    360c:	6a e0       	ldi	r22, 0x0A	; 10
    360e:	70 e0       	ldi	r23, 0x00	; 0
    3610:	86 ed       	ldi	r24, 0xD6	; 214
    3612:	96 e0       	ldi	r25, 0x06	; 6
    3614:	b1 dd       	rcall	.-1182   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,"AT+CMGD=1\r",7,sizeof(sim_rxbuf)); // read echo
    3616:	20 e2       	ldi	r18, 0x20	; 32
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	47 e0       	ldi	r20, 0x07	; 7
    361c:	50 e0       	ldi	r21, 0x00	; 0
    361e:	66 ed       	ldi	r22, 0xD6	; 214
    3620:	76 e0       	ldi	r23, 0x06	; 6
    3622:	ce 01       	movw	r24, r28
    3624:	01 96       	adiw	r24, 0x01	; 1
    3626:	82 dc       	rcall	.-1788   	; 0x2f2c <sim_read>
	len=sim_read(sim_rxbuf,"OK\r\n",7,sizeof(sim_rxbuf));	
    3628:	20 e2       	ldi	r18, 0x20	; 32
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	47 e0       	ldi	r20, 0x07	; 7
    362e:	50 e0       	ldi	r21, 0x00	; 0
    3630:	6f ea       	ldi	r22, 0xAF	; 175
    3632:	76 e0       	ldi	r23, 0x06	; 6
    3634:	ce 01       	movw	r24, r28
    3636:	01 96       	adiw	r24, 0x01	; 1
    3638:	79 dc       	rcall	.-1806   	; 0x2f2c <sim_read>
	return (uint8_t)len;
}
    363a:	a0 96       	adiw	r28, 0x20	; 32
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	08 95       	ret

0000364c <sim_delete_all_sms>:

uint8_t sim_delete_all_sms(void)
{
    364c:	cf 93       	push	r28
    364e:	df 93       	push	r29
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	a0 97       	sbiw	r28, 0x20	; 32
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	uint16_t len;
	char *cmd="AT+CMGDA=\"DEL ALL\"\r";
    sim_tx(cmd,strlen(cmd));
    3660:	63 e1       	ldi	r22, 0x13	; 19
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	81 ee       	ldi	r24, 0xE1	; 225
    3666:	96 e0       	ldi	r25, 0x06	; 6
    3668:	87 dd       	rcall	.-1266   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    366a:	20 e2       	ldi	r18, 0x20	; 32
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	4a e0       	ldi	r20, 0x0A	; 10
    3670:	50 e0       	ldi	r21, 0x00	; 0
    3672:	61 ee       	ldi	r22, 0xE1	; 225
    3674:	76 e0       	ldi	r23, 0x06	; 6
    3676:	ce 01       	movw	r24, r28
    3678:	01 96       	adiw	r24, 0x01	; 1
    367a:	58 dc       	rcall	.-1872   	; 0x2f2c <sim_read>
	len=sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf));	
    367c:	20 e2       	ldi	r18, 0x20	; 32
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	4a e0       	ldi	r20, 0x0A	; 10
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	6f ea       	ldi	r22, 0xAF	; 175
    3686:	76 e0       	ldi	r23, 0x06	; 6
    3688:	ce 01       	movw	r24, r28
    368a:	01 96       	adiw	r24, 0x01	; 1
    368c:	4f dc       	rcall	.-1890   	; 0x2f2c <sim_read>
	return (uint8_t)len;
}
    368e:	a0 96       	adiw	r28, 0x20	; 32
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	08 95       	ret

000036a0 <sim_read_IMEI>:

char * sim_read_IMEI(char *sim_rxbuf, uint16_t maxlen)
{
    36a0:	cf 92       	push	r12
    36a2:	df 92       	push	r13
    36a4:	ef 92       	push	r14
    36a6:	ff 92       	push	r15
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	ec 01       	movw	r28, r24
    36b0:	6b 01       	movw	r12, r22
    36b2:	14 e0       	ldi	r17, 0x04	; 4
        sim_tx(cmd,strlen(cmd));
		sim_read(sim_rxbuf,cmd,5,maxlen); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",5,maxlen)==0) {
            retry--;
            delay_ms(100);
			printf("bad imei");
    36b4:	0f 2e       	mov	r0, r31
    36b6:	f5 e0       	ldi	r31, 0x05	; 5
    36b8:	ef 2e       	mov	r14, r31
    36ba:	f7 e0       	ldi	r31, 0x07	; 7
    36bc:	ff 2e       	mov	r15, r31
    36be:	f0 2d       	mov	r31, r0
	char *ptr_imei,*ptr,c;
    uint8_t retry=5;
    char *cmd="AT+GSN\r";
	
    while(retry) {
        sim_tx(cmd,strlen(cmd));
    36c0:	67 e0       	ldi	r22, 0x07	; 7
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	8d ef       	ldi	r24, 0xFD	; 253
    36c6:	96 e0       	ldi	r25, 0x06	; 6
    36c8:	57 dd       	rcall	.-1362   	; 0x3178 <sim_tx>
		sim_read(sim_rxbuf,cmd,5,maxlen); // read echo
    36ca:	96 01       	movw	r18, r12
    36cc:	45 e0       	ldi	r20, 0x05	; 5
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	6d ef       	ldi	r22, 0xFD	; 253
    36d2:	76 e0       	ldi	r23, 0x06	; 6
    36d4:	ce 01       	movw	r24, r28
    36d6:	2a dc       	rcall	.-1964   	; 0x2f2c <sim_read>
        if(sim_read(sim_rxbuf,"OK\r\n",5,maxlen)==0) {
    36d8:	96 01       	movw	r18, r12
    36da:	45 e0       	ldi	r20, 0x05	; 5
    36dc:	50 e0       	ldi	r21, 0x00	; 0
    36de:	6f ea       	ldi	r22, 0xAF	; 175
    36e0:	76 e0       	ldi	r23, 0x06	; 6
    36e2:	ce 01       	movw	r24, r28
    36e4:	23 dc       	rcall	.-1978   	; 0x2f2c <sim_read>
    36e6:	89 2b       	or	r24, r25
    36e8:	29 f0       	breq	.+10     	; 0x36f4 <sim_read_IMEI+0x54>
            sim_rxflush();
            continue;
        }
		// skip heading \r\n
		ptr_imei=sim_rxbuf;
		while((c=*ptr_imei) != 0) {
    36ea:	88 81       	ld	r24, Y
    36ec:	81 11       	cpse	r24, r1
    36ee:	10 c0       	rjmp	.+32     	; 0x3710 <sim_read_IMEI+0x70>
    36f0:	9e 01       	movw	r18, r28
    36f2:	2d c0       	rjmp	.+90     	; 0x374e <sim_read_IMEI+0xae>
    while(retry) {
        sim_tx(cmd,strlen(cmd));
		sim_read(sim_rxbuf,cmd,5,maxlen); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",5,maxlen)==0) {
            retry--;
            delay_ms(100);
    36f4:	60 eb       	ldi	r22, 0xB0	; 176
    36f6:	7f ed       	ldi	r23, 0xDF	; 223
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
			printf("bad imei");
    3700:	ff 92       	push	r15
    3702:	ef 92       	push	r14
    3704:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
            sim_rxflush();
    3708:	ed db       	rcall	.-2086   	; 0x2ee4 <sim_rxflush>
            continue;
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	2f c0       	rjmp	.+94     	; 0x376e <sim_read_IMEI+0xce>
        }
		// skip heading \r\n
		ptr_imei=sim_rxbuf;
		while((c=*ptr_imei) != 0) {
    3710:	9e 01       	movw	r18, r28
			if(c=='\r' || c=='\n') {
    3712:	8d 30       	cpi	r24, 0x0D	; 13
    3714:	49 f0       	breq	.+18     	; 0x3728 <sim_read_IMEI+0x88>
    3716:	8a 30       	cpi	r24, 0x0A	; 10
    3718:	39 f0       	breq	.+14     	; 0x3728 <sim_read_IMEI+0x88>
				continue;
			} else break;
		}
		// remove "\r\n\r\nOK\r\n" after message:
		ptr=ptr_imei;
		while((c=*ptr) != 0) {
    371a:	f9 01       	movw	r30, r18
    371c:	80 81       	ld	r24, Z
    371e:	88 23       	and	r24, r24
    3720:	b1 f0       	breq	.+44     	; 0x374e <sim_read_IMEI+0xae>
			if(c=='\r') {
    3722:	8d 30       	cpi	r24, 0x0D	; 13
    3724:	71 f4       	brne	.+28     	; 0x3742 <sim_read_IMEI+0xa2>
    3726:	0a c0       	rjmp	.+20     	; 0x373c <sim_read_IMEI+0x9c>
        }
		// skip heading \r\n
		ptr_imei=sim_rxbuf;
		while((c=*ptr_imei) != 0) {
			if(c=='\r' || c=='\n') {
				ptr_imei++;
    3728:	2f 5f       	subi	r18, 0xFF	; 255
    372a:	3f 4f       	sbci	r19, 0xFF	; 255
            sim_rxflush();
            continue;
        }
		// skip heading \r\n
		ptr_imei=sim_rxbuf;
		while((c=*ptr_imei) != 0) {
    372c:	f9 01       	movw	r30, r18
    372e:	80 81       	ld	r24, Z
    3730:	81 11       	cpse	r24, r1
    3732:	ef cf       	rjmp	.-34     	; 0x3712 <sim_read_IMEI+0x72>
    3734:	0c c0       	rjmp	.+24     	; 0x374e <sim_read_IMEI+0xae>
			} else break;
		}
		// remove "\r\n\r\nOK\r\n" after message:
		ptr=ptr_imei;
		while((c=*ptr) != 0) {
			if(c=='\r') {
    3736:	9d 30       	cpi	r25, 0x0D	; 13
    3738:	31 f4       	brne	.+12     	; 0x3746 <sim_read_IMEI+0xa6>
    373a:	01 c0       	rjmp	.+2      	; 0x373e <sim_read_IMEI+0x9e>
    373c:	d9 01       	movw	r26, r18
				*ptr=0;
    373e:	1c 92       	st	X, r1
				break;
    3740:	06 c0       	rjmp	.+12     	; 0x374e <sim_read_IMEI+0xae>
    3742:	f9 01       	movw	r30, r18
    3744:	31 96       	adiw	r30, 0x01	; 1
			}
			ptr++;
    3746:	df 01       	movw	r26, r30
				continue;
			} else break;
		}
		// remove "\r\n\r\nOK\r\n" after message:
		ptr=ptr_imei;
		while((c=*ptr) != 0) {
    3748:	91 91       	ld	r25, Z+
    374a:	91 11       	cpse	r25, r1
    374c:	f4 cf       	rjmp	.-24     	; 0x3736 <sim_read_IMEI+0x96>
				break;
			}
			ptr++;
		}
		
        if(strlen(ptr_imei)>10) break;
    374e:	f9 01       	movw	r30, r18
    3750:	01 90       	ld	r0, Z+
    3752:	00 20       	and	r0, r0
    3754:	e9 f7       	brne	.-6      	; 0x3750 <sim_read_IMEI+0xb0>
    3756:	31 97       	sbiw	r30, 0x01	; 1
    3758:	e2 1b       	sub	r30, r18
    375a:	f3 0b       	sbc	r31, r19
    375c:	3b 97       	sbiw	r30, 0x0b	; 11
    375e:	68 f4       	brcc	.+26     	; 0x377a <sim_read_IMEI+0xda>
        else {
            retry--;
            delay_ms(100);
    3760:	60 eb       	ldi	r22, 0xB0	; 176
    3762:	7f ed       	ldi	r23, 0xDF	; 223
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
            sim_rxflush();
    376c:	bb db       	rcall	.-2186   	; 0x2ee4 <sim_rxflush>
    376e:	11 50       	subi	r17, 0x01	; 1
    3770:	08 f0       	brcs	.+2      	; 0x3774 <sim_read_IMEI+0xd4>
    3772:	a6 cf       	rjmp	.-180    	; 0x36c0 <sim_read_IMEI+0x20>
            continue;
        }
    }
    if(retry==0) return "NO-IMEI";
    3774:	85 ef       	ldi	r24, 0xF5	; 245
    3776:	96 e0       	ldi	r25, 0x06	; 6
    3778:	06 c0       	rjmp	.+12     	; 0x3786 <sim_read_IMEI+0xe6>
    377a:	1f 3f       	cpi	r17, 0xFF	; 255
    377c:	11 f0       	breq	.+4      	; 0x3782 <sim_read_IMEI+0xe2>
    377e:	c9 01       	movw	r24, r18
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <sim_read_IMEI+0xe6>
    3782:	85 ef       	ldi	r24, 0xF5	; 245
    3784:	96 e0       	ldi	r25, 0x06	; 6
    else return ptr_imei;
}
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	1f 91       	pop	r17
    378c:	ff 90       	pop	r15
    378e:	ef 90       	pop	r14
    3790:	df 90       	pop	r13
    3792:	cf 90       	pop	r12
    3794:	08 95       	ret

00003796 <sim_read_signalstrength>:

int sim_read_signalstrength(void)
{
    3796:	cf 93       	push	r28
    3798:	df 93       	push	r29
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	a4 97       	sbiw	r28, 0x24	; 36
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
    char *ptr;
    int found,signal,ber;
	char *cmd="AT+CSQ\r";

    sim_tx(cmd,strlen(cmd));
    37aa:	67 e0       	ldi	r22, 0x07	; 7
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	8e e0       	ldi	r24, 0x0E	; 14
    37b0:	97 e0       	ldi	r25, 0x07	; 7
    37b2:	e2 dc       	rcall	.-1596   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    37b4:	20 e2       	ldi	r18, 0x20	; 32
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	4a e0       	ldi	r20, 0x0A	; 10
    37ba:	50 e0       	ldi	r21, 0x00	; 0
    37bc:	6e e0       	ldi	r22, 0x0E	; 14
    37be:	77 e0       	ldi	r23, 0x07	; 7
    37c0:	ce 01       	movw	r24, r28
    37c2:	01 96       	adiw	r24, 0x01	; 1
    37c4:	b3 db       	rcall	.-2202   	; 0x2f2c <sim_read>
    if(sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf))==0)
    37c6:	20 e2       	ldi	r18, 0x20	; 32
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	4a e0       	ldi	r20, 0x0A	; 10
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	6f ea       	ldi	r22, 0xAF	; 175
    37d0:	76 e0       	ldi	r23, 0x06	; 6
    37d2:	ce 01       	movw	r24, r28
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	aa db       	rcall	.-2220   	; 0x2f2c <sim_read>
    37d8:	89 2b       	or	r24, r25
    37da:	49 f1       	breq	.+82     	; 0x382e <sim_read_signalstrength+0x98>
        return -3;

    // response looks like: AT+CSQ\r\r\n+CSQ: 28,0
    ptr=sim_rxbuf;
    found=sscanf(ptr,"\r\n+CSQ: %d,%d",&signal,&ber);
    37dc:	ce 01       	movw	r24, r28
    37de:	83 96       	adiw	r24, 0x23	; 35
    37e0:	9f 93       	push	r25
    37e2:	8f 93       	push	r24
    37e4:	02 97       	sbiw	r24, 0x02	; 2
    37e6:	9f 93       	push	r25
    37e8:	8f 93       	push	r24
    37ea:	86 e1       	ldi	r24, 0x16	; 22
    37ec:	97 e0       	ldi	r25, 0x07	; 7
    37ee:	9f 93       	push	r25
    37f0:	8f 93       	push	r24
    37f2:	ce 01       	movw	r24, r28
    37f4:	01 96       	adiw	r24, 0x01	; 1
    37f6:	9f 93       	push	r25
    37f8:	8f 93       	push	r24
    37fa:	0e 94 67 2c 	call	0x58ce	; 0x58ce <sscanf>
    if(found==2) {
    37fe:	0f b6       	in	r0, 0x3f	; 63
    3800:	f8 94       	cli
    3802:	de bf       	out	0x3e, r29	; 62
    3804:	0f be       	out	0x3f, r0	; 63
    3806:	cd bf       	out	0x3d, r28	; 61
    3808:	02 97       	sbiw	r24, 0x02	; 2
    380a:	a1 f4       	brne	.+40     	; 0x3834 <sim_read_signalstrength+0x9e>
#ifdef SIM_DEBUG
        printf("CSQ:%d\n",signal);
    380c:	8a a1       	ldd	r24, Y+34	; 0x22
    380e:	8f 93       	push	r24
    3810:	89 a1       	ldd	r24, Y+33	; 0x21
    3812:	8f 93       	push	r24
    3814:	84 e2       	ldi	r24, 0x24	; 36
    3816:	97 e0       	ldi	r25, 0x07	; 7
    3818:	9f 93       	push	r25
    381a:	8f 93       	push	r24
    381c:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
#endif
        return signal;
    3820:	89 a1       	ldd	r24, Y+33	; 0x21
    3822:	9a a1       	ldd	r25, Y+34	; 0x22
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	05 c0       	rjmp	.+10     	; 0x3838 <sim_read_signalstrength+0xa2>
	char *cmd="AT+CSQ\r";

    sim_tx(cmd,strlen(cmd));
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    if(sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf))==0)
        return -3;
    382e:	8d ef       	ldi	r24, 0xFD	; 253
    3830:	9f ef       	ldi	r25, 0xFF	; 255
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <sim_read_signalstrength+0xa2>
    if(found==2) {
#ifdef SIM_DEBUG
        printf("CSQ:%d\n",signal);
#endif
        return signal;
    } else return -4;
    3834:	8c ef       	ldi	r24, 0xFC	; 252
    3836:	9f ef       	ldi	r25, 0xFF	; 255
}
    3838:	a4 96       	adiw	r28, 0x24	; 36
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	df 91       	pop	r29
    3846:	cf 91       	pop	r28
    3848:	08 95       	ret

0000384a <sim_2g_state>:

char * sim_2g_state(char *sim_rxbuf, uint16_t maxlen)
{
    384a:	0f 93       	push	r16
    384c:	1f 93       	push	r17
    384e:	cf 93       	push	r28
    3850:	df 93       	push	r29
    3852:	d8 2f       	mov	r29, r24
    3854:	c9 2f       	mov	r28, r25
    3856:	8b 01       	movw	r16, r22
	char *cmd="AT+CIPSTATUS\r";
    sim_tx(cmd,strlen(cmd));
    3858:	6d e0       	ldi	r22, 0x0D	; 13
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	8c e2       	ldi	r24, 0x2C	; 44
    385e:	97 e0       	ldi	r25, 0x07	; 7
    3860:	8b dc       	rcall	.-1770   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,20,maxlen); // read echo
    3862:	98 01       	movw	r18, r16
    3864:	44 e1       	ldi	r20, 0x14	; 20
    3866:	50 e0       	ldi	r21, 0x00	; 0
    3868:	6c e2       	ldi	r22, 0x2C	; 44
    386a:	77 e0       	ldi	r23, 0x07	; 7
    386c:	8d 2f       	mov	r24, r29
    386e:	9c 2f       	mov	r25, r28
    3870:	5d db       	rcall	.-2374   	; 0x2f2c <sim_read>
	// response looks like: AT+CIPSTATUS\r\r\nOK\r\n\r\nSTATE: IP INITIAL\r\n
    if(sim_read(sim_rxbuf,"STATE: ",20,maxlen)==0)
    3872:	98 01       	movw	r18, r16
    3874:	44 e1       	ldi	r20, 0x14	; 20
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	6a e3       	ldi	r22, 0x3A	; 58
    387a:	77 e0       	ldi	r23, 0x07	; 7
    387c:	8d 2f       	mov	r24, r29
    387e:	9c 2f       	mov	r25, r28
    3880:	55 db       	rcall	.-2390   	; 0x2f2c <sim_read>
    3882:	89 2b       	or	r24, r25
    3884:	69 f0       	breq	.+26     	; 0x38a0 <sim_2g_state+0x56>
        return NULL;
	if(sim_read(sim_rxbuf,"\r\n",20,maxlen)==0)
    3886:	98 01       	movw	r18, r16
    3888:	44 e1       	ldi	r20, 0x14	; 20
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	65 e4       	ldi	r22, 0x45	; 69
    388e:	7b e0       	ldi	r23, 0x0B	; 11
    3890:	8d 2f       	mov	r24, r29
    3892:	9c 2f       	mov	r25, r28
    3894:	4b db       	rcall	.-2410   	; 0x2f2c <sim_read>
    3896:	89 2b       	or	r24, r25
    3898:	31 f0       	breq	.+12     	; 0x38a6 <sim_2g_state+0x5c>
	    return NULL;
	else 
	    return sim_rxbuf;
    389a:	8d 2f       	mov	r24, r29
    389c:	9c 2f       	mov	r25, r28
    389e:	05 c0       	rjmp	.+10     	; 0x38aa <sim_2g_state+0x60>
	char *cmd="AT+CIPSTATUS\r";
    sim_tx(cmd,strlen(cmd));
	sim_read(sim_rxbuf,cmd,20,maxlen); // read echo
	// response looks like: AT+CIPSTATUS\r\r\nOK\r\n\r\nSTATE: IP INITIAL\r\n
    if(sim_read(sim_rxbuf,"STATE: ",20,maxlen)==0)
        return NULL;
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <sim_2g_state+0x60>
	if(sim_read(sim_rxbuf,"\r\n",20,maxlen)==0)
	    return NULL;
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	90 e0       	ldi	r25, 0x00	; 0
	else 
	    return sim_rxbuf;
}
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	08 95       	ret

000038b4 <sim_start_2g>:

int8_t sim_start_2g(void)
{
    38b4:	bf 92       	push	r11
    38b6:	cf 92       	push	r12
    38b8:	df 92       	push	r13
    38ba:	ef 92       	push	r14
    38bc:	ff 92       	push	r15
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	c4 52       	subi	r28, 0x24	; 36
    38cc:	d1 40       	sbci	r29, 0x01	; 1
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
	char *cmd6="AT+CIICR\r";
	char *cmd7="AT+CIFSR\r";
	char *cmd8="AT+SAPBR=1,1\r";
	char *cmd9_shut="AT+CIPSHUT\r";
	
    sim_tx(cmd1,strlen(cmd1));
    38d8:	6e e1       	ldi	r22, 0x1E	; 30
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	82 e4       	ldi	r24, 0x42	; 66
    38de:	97 e0       	ldi	r25, 0x07	; 7
    38e0:	4b dc       	rcall	.-1898   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	31 e0       	ldi	r19, 0x01	; 1
    38e6:	42 e0       	ldi	r20, 0x02	; 2
    38e8:	50 e0       	ldi	r21, 0x00	; 0
    38ea:	61 e6       	ldi	r22, 0x61	; 97
    38ec:	77 e0       	ldi	r23, 0x07	; 7
    38ee:	ce 01       	movw	r24, r28
    38f0:	01 96       	adiw	r24, 0x01	; 1
    38f2:	1c db       	rcall	.-2504   	; 0x2f2c <sim_read>
    if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	31 e0       	ldi	r19, 0x01	; 1
    38f8:	42 e0       	ldi	r20, 0x02	; 2
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	6f ea       	ldi	r22, 0xAF	; 175
    38fe:	76 e0       	ldi	r23, 0x06	; 6
    3900:	ce 01       	movw	r24, r28
    3902:	01 96       	adiw	r24, 0x01	; 1
    3904:	13 db       	rcall	.-2522   	; 0x2f2c <sim_read>
    3906:	89 2b       	or	r24, r25
    3908:	09 f4       	brne	.+2      	; 0x390c <sim_start_2g+0x58>
    390a:	fe c1       	rjmp	.+1020   	; 0x3d08 <sim_start_2g+0x454>
        return -3;
    }

    // find out current state:
    state=sim_2g_state(sim_rxbuf,sizeof(sim_rxbuf));
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	71 e0       	ldi	r23, 0x01	; 1
    3910:	ce 01       	movw	r24, r28
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	9a df       	rcall	.-204    	; 0x384a <sim_2g_state>
    3916:	08 2f       	mov	r16, r24
    3918:	19 2f       	mov	r17, r25
	
//#ifdef SIM_DEBUG
    printf("2g:state=%s\n",state);
    391a:	9f 93       	push	r25
    391c:	8f 93       	push	r24
    391e:	8f e6       	ldi	r24, 0x6F	; 111
    3920:	97 e0       	ldi	r25, 0x07	; 7
    3922:	9f 93       	push	r25
    3924:	8f 93       	push	r24
    3926:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
//#endif

    if(strncmp(state,"IP INITIAL",10)==0) {
    392a:	4a e0       	ldi	r20, 0x0A	; 10
    392c:	50 e0       	ldi	r21, 0x00	; 0
    392e:	6c e7       	ldi	r22, 0x7C	; 124
    3930:	77 e0       	ldi	r23, 0x07	; 7
    3932:	80 2f       	mov	r24, r16
    3934:	91 2f       	mov	r25, r17
    3936:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <strncmp>
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	89 2b       	or	r24, r25
    3944:	09 f0       	breq	.+2      	; 0x3948 <sim_start_2g+0x94>
    3946:	27 c1       	rjmp	.+590    	; 0x3b96 <sim_start_2g+0x2e2>

        sreg=SREG; cli();
    3948:	ff b6       	in	r15, 0x3f	; 63
    394a:	f8 94       	cli
        eeprom_read_block(login_data,&EEPROM_ADDR_apn,LOGIN_LEN);
    394c:	8e 01       	movw	r16, r28
    394e:	0f 5f       	subi	r16, 0xFF	; 255
    3950:	1e 4f       	sbci	r17, 0xFE	; 254
    3952:	40 e1       	ldi	r20, 0x10	; 16
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	61 e2       	ldi	r22, 0x21	; 33
    3958:	70 e0       	ldi	r23, 0x00	; 0
    395a:	c8 01       	movw	r24, r16
    395c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
        SREG=sreg;
        sim_tx(cmd2,strlen(cmd2));
    3960:	ff be       	out	0x3f, r15	; 63
    3962:	64 e1       	ldi	r22, 0x14	; 20
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	87 e8       	ldi	r24, 0x87	; 135
    3968:	97 e0       	ldi	r25, 0x07	; 7
        len=sprintf(buf,"%s\"\r",login_data);
    396a:	06 dc       	rcall	.-2036   	; 0x3178 <sim_tx>
    396c:	1f 93       	push	r17
    396e:	0f 93       	push	r16
    3970:	8f e6       	ldi	r24, 0x6F	; 111
    3972:	96 e0       	ldi	r25, 0x06	; 6
    3974:	9f 93       	push	r25
    3976:	8f 93       	push	r24
    3978:	00 5f       	subi	r16, 0xF0	; 240
    397a:	1f 4f       	sbci	r17, 0xFF	; 255
    397c:	1f 93       	push	r17
    397e:	0f 93       	push	r16
        sim_tx(buf,len);
    3980:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    3984:	bc 01       	movw	r22, r24
    3986:	77 27       	eor	r23, r23
    3988:	c8 01       	movw	r24, r16
		sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
    398a:	f6 db       	rcall	.-2068   	; 0x3178 <sim_tx>
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	31 e0       	ldi	r19, 0x01	; 1
    3990:	42 e0       	ldi	r20, 0x02	; 2
    3992:	50 e0       	ldi	r21, 0x00	; 0
    3994:	61 e6       	ldi	r22, 0x61	; 97
    3996:	77 e0       	ldi	r23, 0x07	; 7
    3998:	ce 01       	movw	r24, r28
    399a:	01 96       	adiw	r24, 0x01	; 1
        if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
    399c:	c7 da       	rcall	.-2674   	; 0x2f2c <sim_read>
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	31 e0       	ldi	r19, 0x01	; 1
    39a2:	42 e0       	ldi	r20, 0x02	; 2
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	6f ea       	ldi	r22, 0xAF	; 175
    39a8:	76 e0       	ldi	r23, 0x06	; 6
    39aa:	ce 01       	movw	r24, r28
    39ac:	01 96       	adiw	r24, 0x01	; 1
    39ae:	be da       	rcall	.-2692   	; 0x2f2c <sim_read>
    39b0:	0f 90       	pop	r0
    39b2:	0f 90       	pop	r0
    39b4:	0f 90       	pop	r0
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	89 2b       	or	r24, r25
    39be:	09 f4       	brne	.+2      	; 0x39c2 <sim_start_2g+0x10e>
            return -4;
        }

        sreg=SREG; cli();
    39c0:	a5 c1       	rjmp	.+842    	; 0x3d0c <sim_start_2g+0x458>
    39c2:	ff b6       	in	r15, 0x3f	; 63
        eeprom_read_block(login_data,&EEPROM_ADDR_user,LOGIN_LEN);
    39c4:	f8 94       	cli
    39c6:	00 51       	subi	r16, 0x10	; 16
    39c8:	11 09       	sbc	r17, r1
    39ca:	40 e1       	ldi	r20, 0x10	; 16
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	61 e1       	ldi	r22, 0x11	; 17
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	c8 01       	movw	r24, r16
        SREG=sreg;
    39d4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
        sim_tx(cmd3,strlen(cmd3));
    39d8:	ff be       	out	0x3f, r15	; 63
    39da:	65 e1       	ldi	r22, 0x15	; 21
    39dc:	70 e0       	ldi	r23, 0x00	; 0
    39de:	8c e9       	ldi	r24, 0x9C	; 156
    39e0:	97 e0       	ldi	r25, 0x07	; 7
        len=sprintf(buf,"%s\"\r",login_data);
    39e2:	ca db       	rcall	.-2156   	; 0x3178 <sim_tx>
    39e4:	1f 93       	push	r17
    39e6:	0f 93       	push	r16
    39e8:	8f e6       	ldi	r24, 0x6F	; 111
    39ea:	96 e0       	ldi	r25, 0x06	; 6
    39ec:	9f 93       	push	r25
    39ee:	8f 93       	push	r24
    39f0:	00 5f       	subi	r16, 0xF0	; 240
    39f2:	1f 4f       	sbci	r17, 0xFF	; 255
    39f4:	1f 93       	push	r17
    39f6:	0f 93       	push	r16
        sim_tx(buf,len);
    39f8:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    39fc:	bc 01       	movw	r22, r24
    39fe:	77 27       	eor	r23, r23
		sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
    3a00:	c8 01       	movw	r24, r16
    3a02:	ba db       	rcall	.-2188   	; 0x3178 <sim_tx>
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	31 e0       	ldi	r19, 0x01	; 1
    3a08:	42 e0       	ldi	r20, 0x02	; 2
    3a0a:	50 e0       	ldi	r21, 0x00	; 0
    3a0c:	61 e6       	ldi	r22, 0x61	; 97
    3a0e:	77 e0       	ldi	r23, 0x07	; 7
    3a10:	ce 01       	movw	r24, r28
        if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
    3a12:	01 96       	adiw	r24, 0x01	; 1
    3a14:	8b da       	rcall	.-2794   	; 0x2f2c <sim_read>
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	31 e0       	ldi	r19, 0x01	; 1
    3a1a:	42 e0       	ldi	r20, 0x02	; 2
    3a1c:	50 e0       	ldi	r21, 0x00	; 0
    3a1e:	6f ea       	ldi	r22, 0xAF	; 175
    3a20:	76 e0       	ldi	r23, 0x06	; 6
    3a22:	ce 01       	movw	r24, r28
    3a24:	01 96       	adiw	r24, 0x01	; 1
    3a26:	82 da       	rcall	.-2812   	; 0x2f2c <sim_read>
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	89 2b       	or	r24, r25
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <sim_start_2g+0x186>
            return -5;
        }

        sreg=SREG; cli();
    3a38:	6b c1       	rjmp	.+726    	; 0x3d10 <sim_start_2g+0x45c>
    3a3a:	ff b6       	in	r15, 0x3f	; 63
        eeprom_read_block(login_data,&EEPROM_ADDR_pwd,LOGIN_LEN);
    3a3c:	f8 94       	cli
    3a3e:	00 51       	subi	r16, 0x10	; 16
    3a40:	11 09       	sbc	r17, r1
    3a42:	40 e1       	ldi	r20, 0x10	; 16
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	61 e0       	ldi	r22, 0x01	; 1
    3a48:	70 e0       	ldi	r23, 0x00	; 0
    3a4a:	c8 01       	movw	r24, r16
        SREG=sreg;
    3a4c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
        sim_tx(cmd4,strlen(cmd4));
    3a50:	ff be       	out	0x3f, r15	; 63
    3a52:	64 e1       	ldi	r22, 0x14	; 20
    3a54:	70 e0       	ldi	r23, 0x00	; 0
    3a56:	82 eb       	ldi	r24, 0xB2	; 178
    3a58:	97 e0       	ldi	r25, 0x07	; 7
        len=sprintf(buf,"%s\"\r",login_data);
    3a5a:	8e db       	rcall	.-2276   	; 0x3178 <sim_tx>
    3a5c:	1f 93       	push	r17
    3a5e:	0f 93       	push	r16
    3a60:	8f e6       	ldi	r24, 0x6F	; 111
    3a62:	96 e0       	ldi	r25, 0x06	; 6
    3a64:	9f 93       	push	r25
    3a66:	8f 93       	push	r24
    3a68:	00 5f       	subi	r16, 0xF0	; 240
    3a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6c:	1f 93       	push	r17
        sim_tx(buf,len);
    3a6e:	0f 93       	push	r16
    3a70:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    3a74:	bc 01       	movw	r22, r24
    3a76:	77 27       	eor	r23, r23
		sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
    3a78:	c8 01       	movw	r24, r16
    3a7a:	7e db       	rcall	.-2308   	; 0x3178 <sim_tx>
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	31 e0       	ldi	r19, 0x01	; 1
    3a80:	42 e0       	ldi	r20, 0x02	; 2
    3a82:	50 e0       	ldi	r21, 0x00	; 0
    3a84:	61 e6       	ldi	r22, 0x61	; 97
    3a86:	77 e0       	ldi	r23, 0x07	; 7
    3a88:	ce 01       	movw	r24, r28
        if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
    3a8a:	01 96       	adiw	r24, 0x01	; 1
    3a8c:	4f da       	rcall	.-2914   	; 0x2f2c <sim_read>
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	31 e0       	ldi	r19, 0x01	; 1
    3a92:	42 e0       	ldi	r20, 0x02	; 2
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	6f ea       	ldi	r22, 0xAF	; 175
    3a98:	76 e0       	ldi	r23, 0x06	; 6
    3a9a:	ce 01       	movw	r24, r28
    3a9c:	01 96       	adiw	r24, 0x01	; 1
    3a9e:	46 da       	rcall	.-2932   	; 0x2f2c <sim_read>
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	89 2b       	or	r24, r25
            return -6;
        }

        sim_tx(cmd5,strlen(cmd5));
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <sim_start_2g+0x1fe>
    3ab0:	31 c1       	rjmp	.+610    	; 0x3d14 <sim_start_2g+0x460>
    3ab2:	69 e0       	ldi	r22, 0x09	; 9
    3ab4:	70 e0       	ldi	r23, 0x00	; 0
    3ab6:	87 ec       	ldi	r24, 0xC7	; 199
    3ab8:	97 e0       	ldi	r25, 0x07	; 7
        sreg=SREG; cli();
    3aba:	5e db       	rcall	.-2372   	; 0x3178 <sim_tx>
    3abc:	1f b7       	in	r17, 0x3f	; 63
        eeprom_read_block(login_data,&EEPROM_ADDR_apn,LOGIN_LEN);
    3abe:	f8 94       	cli
    3ac0:	7e 01       	movw	r14, r28
    3ac2:	21 e0       	ldi	r18, 0x01	; 1
    3ac4:	e2 0e       	add	r14, r18
    3ac6:	f2 1e       	adc	r15, r18
    3ac8:	40 e1       	ldi	r20, 0x10	; 16
    3aca:	50 e0       	ldi	r21, 0x00	; 0
    3acc:	61 e2       	ldi	r22, 0x21	; 33
    3ace:	70 e0       	ldi	r23, 0x00	; 0
    3ad0:	c7 01       	movw	r24, r14
    3ad2:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
        SREG=sreg;
        len=sprintf(buf,"%s\",\"",login_data);
    3ad6:	1f bf       	out	0x3f, r17	; 63
    3ad8:	ff 92       	push	r15
    3ada:	ef 92       	push	r14
    3adc:	0f 2e       	mov	r0, r31
    3ade:	f1 ed       	ldi	r31, 0xD1	; 209
    3ae0:	cf 2e       	mov	r12, r31
    3ae2:	f7 e0       	ldi	r31, 0x07	; 7
    3ae4:	df 2e       	mov	r13, r31
    3ae6:	f0 2d       	mov	r31, r0
    3ae8:	df 92       	push	r13
    3aea:	cf 92       	push	r12
    3aec:	8e 01       	movw	r16, r28
    3aee:	0f 5e       	subi	r16, 0xEF	; 239
    3af0:	1e 4f       	sbci	r17, 0xFE	; 254
    3af2:	1f 93       	push	r17
    3af4:	0f 93       	push	r16
        sim_tx(buf,len);
    3af6:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    3afa:	bc 01       	movw	r22, r24
    3afc:	77 27       	eor	r23, r23
    3afe:	c8 01       	movw	r24, r16

        sreg=SREG; cli();
    3b00:	3b db       	rcall	.-2442   	; 0x3178 <sim_tx>
    3b02:	bf b6       	in	r11, 0x3f	; 63
        eeprom_read_block(login_data,&EEPROM_ADDR_user,LOGIN_LEN);
    3b04:	f8 94       	cli
    3b06:	40 e1       	ldi	r20, 0x10	; 16
    3b08:	50 e0       	ldi	r21, 0x00	; 0
    3b0a:	61 e1       	ldi	r22, 0x11	; 17
    3b0c:	70 e0       	ldi	r23, 0x00	; 0
    3b0e:	c7 01       	movw	r24, r14
        SREG=sreg;
    3b10:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
        len=sprintf(buf,"%s\",\"",login_data);
    3b14:	bf be       	out	0x3f, r11	; 63
    3b16:	ff 92       	push	r15
    3b18:	ef 92       	push	r14
    3b1a:	df 92       	push	r13
    3b1c:	cf 92       	push	r12
    3b1e:	1f 93       	push	r17
    3b20:	0f 93       	push	r16
        sim_tx(buf,len);
    3b22:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    3b26:	bc 01       	movw	r22, r24
    3b28:	77 27       	eor	r23, r23
    3b2a:	c8 01       	movw	r24, r16

        sreg=SREG; cli();
    3b2c:	25 db       	rcall	.-2486   	; 0x3178 <sim_tx>
    3b2e:	df b6       	in	r13, 0x3f	; 63
        eeprom_read_block(login_data,&EEPROM_ADDR_pwd,LOGIN_LEN);
    3b30:	f8 94       	cli
    3b32:	40 e1       	ldi	r20, 0x10	; 16
    3b34:	50 e0       	ldi	r21, 0x00	; 0
    3b36:	61 e0       	ldi	r22, 0x01	; 1
    3b38:	70 e0       	ldi	r23, 0x00	; 0
    3b3a:	c7 01       	movw	r24, r14
        SREG=sreg;
    3b3c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <eeprom_read_block>
        len=sprintf(buf,"%s\"\r",login_data);
    3b40:	df be       	out	0x3f, r13	; 63
    3b42:	ff 92       	push	r15
    3b44:	ef 92       	push	r14
    3b46:	8f e6       	ldi	r24, 0x6F	; 111
    3b48:	96 e0       	ldi	r25, 0x06	; 6
    3b4a:	9f 93       	push	r25
    3b4c:	8f 93       	push	r24
    3b4e:	1f 93       	push	r17
        sim_tx(buf,len);
    3b50:	0f 93       	push	r16
    3b52:	0e 94 0b 2c 	call	0x5816	; 0x5816 <sprintf>
    3b56:	bc 01       	movw	r22, r24
        sim_read(sim_rxbuf,"AT+CSTT=",15,sizeof(sim_rxbuf)); // read echo
    3b58:	77 27       	eor	r23, r23
    3b5a:	c8 01       	movw	r24, r16
    3b5c:	0d db       	rcall	.-2534   	; 0x3178 <sim_tx>
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	31 e0       	ldi	r19, 0x01	; 1
    3b62:	4f e0       	ldi	r20, 0x0F	; 15
    3b64:	50 e0       	ldi	r21, 0x00	; 0
    3b66:	67 ed       	ldi	r22, 0xD7	; 215
    3b68:	77 e0       	ldi	r23, 0x07	; 7
    3b6a:	ce 01       	movw	r24, r28
        if(sim_read(sim_rxbuf,"OK\r\n",15,sizeof(sim_rxbuf))==0) {
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	de d9       	rcall	.-3140   	; 0x2f2c <sim_read>
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	31 e0       	ldi	r19, 0x01	; 1
    3b74:	4f e0       	ldi	r20, 0x0F	; 15
    3b76:	50 e0       	ldi	r21, 0x00	; 0
    3b78:	6f ea       	ldi	r22, 0xAF	; 175
    3b7a:	76 e0       	ldi	r23, 0x06	; 6
    3b7c:	ce 01       	movw	r24, r28
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	d5 d9       	rcall	.-3158   	; 0x2f2c <sim_read>
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	de bf       	out	0x3e, r29	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	cd bf       	out	0x3d, r28	; 61
    3b8c:	89 2b       	or	r24, r25
            return -7;
        }

        ret_state=1;
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <sim_start_2g+0x2de>
    3b90:	c3 c0       	rjmp	.+390    	; 0x3d18 <sim_start_2g+0x464>
    } else if(strncmp(state,"IP START",8)==0) {
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	ca c0       	rjmp	.+404    	; 0x3d2a <sim_start_2g+0x476>
    3b96:	48 e0       	ldi	r20, 0x08	; 8
    3b98:	50 e0       	ldi	r21, 0x00	; 0
    3b9a:	60 ee       	ldi	r22, 0xE0	; 224
    3b9c:	77 e0       	ldi	r23, 0x07	; 7
    3b9e:	80 2f       	mov	r24, r16
    3ba0:	91 2f       	mov	r25, r17
    3ba2:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <strncmp>
    3ba6:	89 2b       	or	r24, r25
        // bring up wireless connection with GPRS
        retries=0;
        while(retries<4) {
            sim_tx(cmd6,strlen(cmd6));
    3ba8:	89 f5       	brne	.+98     	; 0x3c0c <sim_start_2g+0x358>
    3baa:	10 e0       	ldi	r17, 0x00	; 0
    3bac:	69 e0       	ldi	r22, 0x09	; 9
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	89 ee       	ldi	r24, 0xE9	; 233
            delay_ms(1000);
    3bb2:	97 e0       	ldi	r25, 0x07	; 7
    3bb4:	e1 da       	rcall	.-2622   	; 0x3178 <sim_tx>
    3bb6:	60 ee       	ldi	r22, 0xE0	; 224
    3bb8:	7c eb       	ldi	r23, 0xBC	; 188
    3bba:	82 e1       	ldi	r24, 0x12	; 18
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
            wdt_reset();
            delay_ms(500);
    3bbe:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    3bc2:	a8 95       	wdr
    3bc4:	60 e7       	ldi	r22, 0x70	; 112
    3bc6:	7e e5       	ldi	r23, 0x5E	; 94
			sim_read(sim_rxbuf,cmd6,50,sizeof(sim_rxbuf)); // read echo
    3bc8:	89 e0       	ldi	r24, 0x09	; 9
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	31 e0       	ldi	r19, 0x01	; 1
    3bd4:	42 e3       	ldi	r20, 0x32	; 50
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	69 ee       	ldi	r22, 0xE9	; 233
    3bda:	77 e0       	ldi	r23, 0x07	; 7
            if(sim_read(sim_rxbuf,"OK\r\n",50,sizeof(sim_rxbuf))==0) {
    3bdc:	ce 01       	movw	r24, r28
    3bde:	01 96       	adiw	r24, 0x01	; 1
    3be0:	a5 d9       	rcall	.-3254   	; 0x2f2c <sim_read>
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	31 e0       	ldi	r19, 0x01	; 1
    3be6:	42 e3       	ldi	r20, 0x32	; 50
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	6f ea       	ldi	r22, 0xAF	; 175
    3bec:	76 e0       	ldi	r23, 0x06	; 6
    3bee:	ce 01       	movw	r24, r28
    3bf0:	01 96       	adiw	r24, 0x01	; 1
                retries++;
    3bf2:	9c d9       	rcall	.-3272   	; 0x2f2c <sim_read>

        ret_state=1;
    } else if(strncmp(state,"IP START",8)==0) {
        // bring up wireless connection with GPRS
        retries=0;
        while(retries<4) {
    3bf4:	89 2b       	or	r24, r25
    3bf6:	29 f4       	brne	.+10     	; 0x3c02 <sim_start_2g+0x34e>
			sim_read(sim_rxbuf,cmd6,50,sizeof(sim_rxbuf)); // read echo
            if(sim_read(sim_rxbuf,"OK\r\n",50,sizeof(sim_rxbuf))==0) {
                retries++;
            } else break;
        }
        if(retries>3) return -8;
    3bf8:	1f 5f       	subi	r17, 0xFF	; 255
    3bfa:	14 30       	cpi	r17, 0x04	; 4
    3bfc:	b9 f6       	brne	.-82     	; 0x3bac <sim_start_2g+0x2f8>
    3bfe:	88 ef       	ldi	r24, 0xF8	; 248

        ret_state=2;
    3c00:	94 c0       	rjmp	.+296    	; 0x3d2a <sim_start_2g+0x476>
    } else if(strncmp(state,"IP GPRSACT",10)==0) {
    3c02:	14 30       	cpi	r17, 0x04	; 4
    3c04:	08 f0       	brcs	.+2      	; 0x3c08 <sim_start_2g+0x354>
    3c06:	8a c0       	rjmp	.+276    	; 0x3d1c <sim_start_2g+0x468>
    3c08:	82 e0       	ldi	r24, 0x02	; 2
    3c0a:	8f c0       	rjmp	.+286    	; 0x3d2a <sim_start_2g+0x476>
    3c0c:	4a e0       	ldi	r20, 0x0A	; 10
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	63 ef       	ldi	r22, 0xF3	; 243
    3c12:	77 e0       	ldi	r23, 0x07	; 7
        // get an IP address
        sim_tx(cmd7,strlen(cmd7));
    3c14:	80 2f       	mov	r24, r16
    3c16:	91 2f       	mov	r25, r17
    3c18:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <strncmp>
    3c1c:	89 2b       	or	r24, r25
		sim_read(sim_rxbuf,cmd7,15,sizeof(sim_rxbuf)); // read echo
    3c1e:	e9 f4       	brne	.+58     	; 0x3c5a <sim_start_2g+0x3a6>
    3c20:	69 e0       	ldi	r22, 0x09	; 9
    3c22:	70 e0       	ldi	r23, 0x00	; 0
    3c24:	8e ef       	ldi	r24, 0xFE	; 254
    3c26:	97 e0       	ldi	r25, 0x07	; 7
    3c28:	a7 da       	rcall	.-2738   	; 0x3178 <sim_tx>
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	31 e0       	ldi	r19, 0x01	; 1
    3c2e:	4f e0       	ldi	r20, 0x0F	; 15
    3c30:	50 e0       	ldi	r21, 0x00	; 0
        if(sim_read(sim_rxbuf,".",15,sizeof(sim_rxbuf))==0) { // response is the ipadress
    3c32:	6e ef       	ldi	r22, 0xFE	; 254
    3c34:	77 e0       	ldi	r23, 0x07	; 7
    3c36:	ce 01       	movw	r24, r28
    3c38:	01 96       	adiw	r24, 0x01	; 1
    3c3a:	78 d9       	rcall	.-3344   	; 0x2f2c <sim_read>
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	31 e0       	ldi	r19, 0x01	; 1
    3c40:	4f e0       	ldi	r20, 0x0F	; 15
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	68 e0       	ldi	r22, 0x08	; 8
    3c46:	78 e0       	ldi	r23, 0x08	; 8
            return -9;
        }
		sim_rxflush();
    3c48:	ce 01       	movw	r24, r28
    3c4a:	01 96       	adiw	r24, 0x01	; 1
        ret_state=3;
    3c4c:	6f d9       	rcall	.-3362   	; 0x2f2c <sim_read>
    3c4e:	89 2b       	or	r24, r25
    } else if(strncmp(state,"IP STATUS",9)==0) {
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <sim_start_2g+0x3a0>
    3c52:	66 c0       	rjmp	.+204    	; 0x3d20 <sim_start_2g+0x46c>
    3c54:	47 d9       	rcall	.-3442   	; 0x2ee4 <sim_rxflush>
    3c56:	83 e0       	ldi	r24, 0x03	; 3
    3c58:	68 c0       	rjmp	.+208    	; 0x3d2a <sim_start_2g+0x476>
    3c5a:	49 e0       	ldi	r20, 0x09	; 9
    3c5c:	50 e0       	ldi	r21, 0x00	; 0
    3c5e:	6a e0       	ldi	r22, 0x0A	; 10
    3c60:	78 e0       	ldi	r23, 0x08	; 8
    3c62:	80 2f       	mov	r24, r16
        retries=0;
        while(retries<4) {
            // open bearer
            sim_tx(cmd8,strlen(cmd8));
    3c64:	91 2f       	mov	r25, r17
    3c66:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <strncmp>
    3c6a:	89 2b       	or	r24, r25
    3c6c:	19 f5       	brne	.+70     	; 0x3cb4 <sim_start_2g+0x400>
    3c6e:	10 e0       	ldi	r17, 0x00	; 0
			sim_read(sim_rxbuf,cmd8,70,sizeof(sim_rxbuf)); // read echo
    3c70:	6d e0       	ldi	r22, 0x0D	; 13
    3c72:	70 e0       	ldi	r23, 0x00	; 0
    3c74:	84 e1       	ldi	r24, 0x14	; 20
    3c76:	98 e0       	ldi	r25, 0x08	; 8
    3c78:	7f da       	rcall	.-2818   	; 0x3178 <sim_tx>
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	31 e0       	ldi	r19, 0x01	; 1
    3c7e:	46 e4       	ldi	r20, 0x46	; 70
    3c80:	50 e0       	ldi	r21, 0x00	; 0
    3c82:	64 e1       	ldi	r22, 0x14	; 20
            if(sim_read(sim_rxbuf,"OK\r\n",70,sizeof(sim_rxbuf))==0) {
    3c84:	78 e0       	ldi	r23, 0x08	; 8
    3c86:	ce 01       	movw	r24, r28
    3c88:	01 96       	adiw	r24, 0x01	; 1
    3c8a:	50 d9       	rcall	.-3424   	; 0x2f2c <sim_read>
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	31 e0       	ldi	r19, 0x01	; 1
    3c90:	46 e4       	ldi	r20, 0x46	; 70
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	6f ea       	ldi	r22, 0xAF	; 175
    3c96:	76 e0       	ldi	r23, 0x06	; 6
        }
		sim_rxflush();
        ret_state=3;
    } else if(strncmp(state,"IP STATUS",9)==0) {
        retries=0;
        while(retries<4) {
    3c98:	ce 01       	movw	r24, r28
    3c9a:	01 96       	adiw	r24, 0x01	; 1
			sim_read(sim_rxbuf,cmd8,70,sizeof(sim_rxbuf)); // read echo
            if(sim_read(sim_rxbuf,"OK\r\n",70,sizeof(sim_rxbuf))==0) {
                retries++;
            } else break;
        }
        if(retries>3) return -10;
    3c9c:	47 d9       	rcall	.-3442   	; 0x2f2c <sim_read>
    3c9e:	89 2b       	or	r24, r25
    3ca0:	29 f4       	brne	.+10     	; 0x3cac <sim_start_2g+0x3f8>
    3ca2:	1f 5f       	subi	r17, 0xFF	; 255

        ret_state=4;
    3ca4:	14 30       	cpi	r17, 0x04	; 4
    3ca6:	21 f7       	brne	.-56     	; 0x3c70 <sim_start_2g+0x3bc>
    } else if(strncmp(state,"PDP DEACT",9)==0) {
    3ca8:	86 ef       	ldi	r24, 0xF6	; 246
    3caa:	3f c0       	rjmp	.+126    	; 0x3d2a <sim_start_2g+0x476>
    3cac:	14 30       	cpi	r17, 0x04	; 4
    3cae:	d0 f5       	brcc	.+116    	; 0x3d24 <sim_start_2g+0x470>
    3cb0:	84 e0       	ldi	r24, 0x04	; 4
    3cb2:	3b c0       	rjmp	.+118    	; 0x3d2a <sim_start_2g+0x476>
    3cb4:	49 e0       	ldi	r20, 0x09	; 9
    3cb6:	50 e0       	ldi	r21, 0x00	; 0
    3cb8:	62 e2       	ldi	r22, 0x22	; 34
		sim_tx(cmd9_shut,strlen(cmd9_shut));
    3cba:	78 e0       	ldi	r23, 0x08	; 8
    3cbc:	80 2f       	mov	r24, r16
    3cbe:	91 2f       	mov	r25, r17
    3cc0:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <strncmp>
    3cc4:	89 2b       	or	r24, r25
		sim_read(sim_rxbuf,cmd9_shut,40,sizeof(sim_rxbuf)); // read echo
    3cc6:	81 f5       	brne	.+96     	; 0x3d28 <sim_start_2g+0x474>
    3cc8:	6b e0       	ldi	r22, 0x0B	; 11
    3cca:	70 e0       	ldi	r23, 0x00	; 0
    3ccc:	8c e2       	ldi	r24, 0x2C	; 44
    3cce:	98 e0       	ldi	r25, 0x08	; 8
    3cd0:	53 da       	rcall	.-2906   	; 0x3178 <sim_tx>
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	31 e0       	ldi	r19, 0x01	; 1
    3cd6:	48 e2       	ldi	r20, 0x28	; 40
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
		wdt_reset();
    3cda:	6c e2       	ldi	r22, 0x2C	; 44
		delay_ms(500);
    3cdc:	78 e0       	ldi	r23, 0x08	; 8
    3cde:	ce 01       	movw	r24, r28
    3ce0:	01 96       	adiw	r24, 0x01	; 1
    3ce2:	24 d9       	rcall	.-3512   	; 0x2f2c <sim_read>
    3ce4:	a8 95       	wdr
    3ce6:	60 e7       	ldi	r22, 0x70	; 112
		sim_read(sim_rxbuf,"SHUT OK\r\n",40,sizeof(sim_rxbuf));
    3ce8:	7e e5       	ldi	r23, 0x5E	; 94
    3cea:	89 e0       	ldi	r24, 0x09	; 9
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	31 e0       	ldi	r19, 0x01	; 1
    3cf6:	48 e2       	ldi	r20, 0x28	; 40
    3cf8:	50 e0       	ldi	r21, 0x00	; 0
    3cfa:	68 e3       	ldi	r22, 0x38	; 56
		return -11;
    3cfc:	78 e0       	ldi	r23, 0x08	; 8
    3cfe:	ce 01       	movw	r24, r28
	char *cmd9_shut="AT+CIPSHUT\r";
	
    sim_tx(cmd1,strlen(cmd1));
	sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
    if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
        return -3;
    3d00:	01 96       	adiw	r24, 0x01	; 1
    3d02:	14 d9       	rcall	.-3544   	; 0x2f2c <sim_read>
        sim_tx(cmd2,strlen(cmd2));
        len=sprintf(buf,"%s\"\r",login_data);
        sim_tx(buf,len);
		sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
            return -4;
    3d04:	85 ef       	ldi	r24, 0xF5	; 245
    3d06:	11 c0       	rjmp	.+34     	; 0x3d2a <sim_start_2g+0x476>
        sim_tx(cmd3,strlen(cmd3));
        len=sprintf(buf,"%s\"\r",login_data);
        sim_tx(buf,len);
		sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
            return -5;
    3d08:	8d ef       	ldi	r24, 0xFD	; 253
    3d0a:	0f c0       	rjmp	.+30     	; 0x3d2a <sim_start_2g+0x476>
        sim_tx(cmd4,strlen(cmd4));
        len=sprintf(buf,"%s\"\r",login_data);
        sim_tx(buf,len);
		sim_read(sim_rxbuf,"AT+SAPBR=3,1,",2,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",2,sizeof(sim_rxbuf))==0) {
            return -6;
    3d0c:	8c ef       	ldi	r24, 0xFC	; 252
    3d0e:	0d c0       	rjmp	.+26     	; 0x3d2a <sim_start_2g+0x476>
        SREG=sreg;
        len=sprintf(buf,"%s\"\r",login_data);
        sim_tx(buf,len);
        sim_read(sim_rxbuf,"AT+CSTT=",15,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",15,sizeof(sim_rxbuf))==0) {
            return -7;
    3d10:	8b ef       	ldi	r24, 0xFB	; 251
    3d12:	0b c0       	rjmp	.+22     	; 0x3d2a <sim_start_2g+0x476>
			sim_read(sim_rxbuf,cmd6,50,sizeof(sim_rxbuf)); // read echo
            if(sim_read(sim_rxbuf,"OK\r\n",50,sizeof(sim_rxbuf))==0) {
                retries++;
            } else break;
        }
        if(retries>3) return -8;
    3d14:	8a ef       	ldi	r24, 0xFA	; 250
    3d16:	09 c0       	rjmp	.+18     	; 0x3d2a <sim_start_2g+0x476>
    } else if(strncmp(state,"IP GPRSACT",10)==0) {
        // get an IP address
        sim_tx(cmd7,strlen(cmd7));
		sim_read(sim_rxbuf,cmd7,15,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,".",15,sizeof(sim_rxbuf))==0) { // response is the ipadress
            return -9;
    3d18:	89 ef       	ldi	r24, 0xF9	; 249
    3d1a:	07 c0       	rjmp	.+14     	; 0x3d2a <sim_start_2g+0x476>
			sim_read(sim_rxbuf,cmd8,70,sizeof(sim_rxbuf)); // read echo
            if(sim_read(sim_rxbuf,"OK\r\n",70,sizeof(sim_rxbuf))==0) {
                retries++;
            } else break;
        }
        if(retries>3) return -10;
    3d1c:	88 ef       	ldi	r24, 0xF8	; 248
    3d1e:	05 c0       	rjmp	.+10     	; 0x3d2a <sim_start_2g+0x476>
		sim_read(sim_rxbuf,cmd9_shut,40,sizeof(sim_rxbuf)); // read echo
		wdt_reset();
		delay_ms(500);
		sim_read(sim_rxbuf,"SHUT OK\r\n",40,sizeof(sim_rxbuf));
		return -11;
	} else return -12;
    3d20:	87 ef       	ldi	r24, 0xF7	; 247

    return ret_state;
}
    3d22:	03 c0       	rjmp	.+6      	; 0x3d2a <sim_start_2g+0x476>
    3d24:	86 ef       	ldi	r24, 0xF6	; 246
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <sim_start_2g+0x476>
    3d28:	84 ef       	ldi	r24, 0xF4	; 244
    3d2a:	cc 5d       	subi	r28, 0xDC	; 220
    3d2c:	de 4f       	sbci	r29, 0xFE	; 254
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	ff 90       	pop	r15
    3d42:	ef 90       	pop	r14
    3d44:	df 90       	pop	r13
    3d46:	cf 90       	pop	r12
    3d48:	bf 90       	pop	r11
    3d4a:	08 95       	ret

00003d4c <sim_send_2g_msg>:

int8_t sim_send_2g_msg(const char *msg, uint16_t size)
{
    3d4c:	cf 92       	push	r12
    3d4e:	df 92       	push	r13
    3d50:	ef 92       	push	r14
    3d52:	ff 92       	push	r15
    3d54:	0f 93       	push	r16
    3d56:	1f 93       	push	r17
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
    3d60:	c0 58       	subi	r28, 0x80	; 128
    3d62:	d1 40       	sbci	r29, 0x01	; 1
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	7c 01       	movw	r14, r24
    3d70:	6b 01       	movw	r12, r22
	char *cmd3_para_cid ="AT+HTTPPARA=\"CID\",1\r";
	char *cmd4_para_url ="AT+HTTPPARA=\"URL\",\"";
	char *cmd5_action   ="AT+HTTPACTION=0\r";
	char *cmd6_status   ="AT+HTTPSTATUS?\r";
	
    delay_ms(500);
    3d72:	60 e7       	ldi	r22, 0x70	; 112
    3d74:	7e e5       	ldi	r23, 0x5E	; 94
    3d76:	89 e0       	ldi	r24, 0x09	; 9
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    wdt_reset();
    3d7e:	a8 95       	wdr
    sim_tx(cmd1_init,strlen(cmd1_init));
    3d80:	6c e0       	ldi	r22, 0x0C	; 12
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	82 e4       	ldi	r24, 0x42	; 66
    3d86:	98 e0       	ldi	r25, 0x08	; 8
    3d88:	f7 d9       	rcall	.-3090   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd1_init,15,sizeof(sim_rxbuf)); // read echo
    3d8a:	20 e8       	ldi	r18, 0x80	; 128
    3d8c:	31 e0       	ldi	r19, 0x01	; 1
    3d8e:	4f e0       	ldi	r20, 0x0F	; 15
    3d90:	50 e0       	ldi	r21, 0x00	; 0
    3d92:	62 e4       	ldi	r22, 0x42	; 66
    3d94:	78 e0       	ldi	r23, 0x08	; 8
    3d96:	ce 01       	movw	r24, r28
    3d98:	01 96       	adiw	r24, 0x01	; 1
    3d9a:	c8 d8       	rcall	.-3696   	; 0x2f2c <sim_read>
    if(sim_read(sim_rxbuf,"OK\r\n",15,sizeof(sim_rxbuf))==0) {
    3d9c:	20 e8       	ldi	r18, 0x80	; 128
    3d9e:	31 e0       	ldi	r19, 0x01	; 1
    3da0:	4f e0       	ldi	r20, 0x0F	; 15
    3da2:	50 e0       	ldi	r21, 0x00	; 0
    3da4:	6f ea       	ldi	r22, 0xAF	; 175
    3da6:	76 e0       	ldi	r23, 0x06	; 6
    3da8:	ce 01       	movw	r24, r28
    3daa:	01 96       	adiw	r24, 0x01	; 1
    3dac:	bf d8       	rcall	.-3714   	; 0x2f2c <sim_read>
    3dae:	89 2b       	or	r24, r25
		// reason of failure could be unterminated HTTP. Terminate it:
		sim_rxflush();
    3db0:	89 f4       	brne	.+34     	; 0x3dd4 <sim_send_2g_msg+0x88>
		sim_tx(cmd2_term,strlen(cmd2_term));
    3db2:	98 d8       	rcall	.-3792   	; 0x2ee4 <sim_rxflush>
    3db4:	6c e0       	ldi	r22, 0x0C	; 12
    3db6:	70 e0       	ldi	r23, 0x00	; 0
    3db8:	8f e4       	ldi	r24, 0x4F	; 79
    3dba:	98 e0       	ldi	r25, 0x08	; 8
		sim_read(sim_rxbuf,"OK\r\n",40,sizeof(sim_rxbuf));
    3dbc:	dd d9       	rcall	.-3142   	; 0x3178 <sim_tx>
    3dbe:	20 e8       	ldi	r18, 0x80	; 128
    3dc0:	31 e0       	ldi	r19, 0x01	; 1
    3dc2:	48 e2       	ldi	r20, 0x28	; 40
    3dc4:	50 e0       	ldi	r21, 0x00	; 0
    3dc6:	6f ea       	ldi	r22, 0xAF	; 175
    3dc8:	76 e0       	ldi	r23, 0x06	; 6
    3dca:	ce 01       	movw	r24, r28
    3dcc:	01 96       	adiw	r24, 0x01	; 1
        ret= -2;
        return ret;
    3dce:	ae d8       	rcall	.-3748   	; 0x2f2c <sim_read>
    3dd0:	8e ef       	ldi	r24, 0xFE	; 254
    }

    retries=0;
    while(retries<4) {
        sim_tx(cmd3_para_cid,strlen(cmd3_para_cid));
    3dd2:	de c0       	rjmp	.+444    	; 0x3f90 <sim_send_2g_msg+0x244>
    3dd4:	10 e0       	ldi	r17, 0x00	; 0
    3dd6:	64 e1       	ldi	r22, 0x14	; 20
    3dd8:	70 e0       	ldi	r23, 0x00	; 0
    3dda:	8c e5       	ldi	r24, 0x5C	; 92
    3ddc:	98 e0       	ldi	r25, 0x08	; 8
		sim_read(sim_rxbuf,"AT+HTTPPARA=",20,sizeof(sim_rxbuf)); // read echo
    3dde:	cc d9       	rcall	.-3176   	; 0x3178 <sim_tx>
    3de0:	20 e8       	ldi	r18, 0x80	; 128
    3de2:	31 e0       	ldi	r19, 0x01	; 1
    3de4:	44 e1       	ldi	r20, 0x14	; 20
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	61 e7       	ldi	r22, 0x71	; 113
    3dea:	78 e0       	ldi	r23, 0x08	; 8
    3dec:	ce 01       	movw	r24, r28
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
    3dee:	01 96       	adiw	r24, 0x01	; 1
    3df0:	9d d8       	rcall	.-3782   	; 0x2f2c <sim_read>
    3df2:	20 e8       	ldi	r18, 0x80	; 128
    3df4:	31 e0       	ldi	r19, 0x01	; 1
    3df6:	44 e1       	ldi	r20, 0x14	; 20
    3df8:	50 e0       	ldi	r21, 0x00	; 0
    3dfa:	6f ea       	ldi	r22, 0xAF	; 175
    3dfc:	76 e0       	ldi	r23, 0x06	; 6
    3dfe:	ce 01       	movw	r24, r28
    3e00:	01 96       	adiw	r24, 0x01	; 1
    3e02:	94 d8       	rcall	.-3800   	; 0x2f2c <sim_read>
        ret= -2;
        return ret;
    }

    retries=0;
    while(retries<4) {
    3e04:	89 2b       	or	r24, r25
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
        ret = -3;
    3e06:	09 f0       	breq	.+2      	; 0x3e0a <sim_send_2g_msg+0xbe>
        goto sim_send_2g_msg_exit;
    }

    retries=0;
    while(retries<4) {
        sim_tx(cmd4_para_url,strlen(cmd4_para_url));
    3e08:	bb c0       	rjmp	.+374    	; 0x3f80 <sim_send_2g_msg+0x234>
    3e0a:	1f 5f       	subi	r17, 0xFF	; 255
    3e0c:	14 30       	cpi	r17, 0x04	; 4
    3e0e:	19 f7       	brne	.-58     	; 0x3dd6 <sim_send_2g_msg+0x8a>
    3e10:	0d ef       	ldi	r16, 0xFD	; 253
        sim_tx(msg,size); // send prepared command+msg
    3e12:	85 c0       	rjmp	.+266    	; 0x3f1e <sim_send_2g_msg+0x1d2>
    3e14:	63 e1       	ldi	r22, 0x13	; 19
    3e16:	70 e0       	ldi	r23, 0x00	; 0
    3e18:	8e e7       	ldi	r24, 0x7E	; 126
        sim_tx("\"\r",2); // end of command
    3e1a:	98 e0       	ldi	r25, 0x08	; 8
    3e1c:	ad d9       	rcall	.-3238   	; 0x3178 <sim_tx>
    3e1e:	b6 01       	movw	r22, r12
    3e20:	c7 01       	movw	r24, r14
    3e22:	aa d9       	rcall	.-3244   	; 0x3178 <sim_tx>
		sim_read(sim_rxbuf,"AT+HTTPPARA=",20,sizeof(sim_rxbuf)); // read echo
    3e24:	62 e0       	ldi	r22, 0x02	; 2
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	82 ef       	ldi	r24, 0xF2	; 242
    3e2a:	96 e0       	ldi	r25, 0x06	; 6
    3e2c:	a5 d9       	rcall	.-3254   	; 0x3178 <sim_tx>
    3e2e:	20 e8       	ldi	r18, 0x80	; 128
    3e30:	31 e0       	ldi	r19, 0x01	; 1
    3e32:	44 e1       	ldi	r20, 0x14	; 20
    3e34:	50 e0       	ldi	r21, 0x00	; 0
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
    3e36:	61 e7       	ldi	r22, 0x71	; 113
    3e38:	78 e0       	ldi	r23, 0x08	; 8
    3e3a:	ce 01       	movw	r24, r28
    3e3c:	01 96       	adiw	r24, 0x01	; 1
    3e3e:	76 d8       	rcall	.-3860   	; 0x2f2c <sim_read>
    3e40:	20 e8       	ldi	r18, 0x80	; 128
    3e42:	31 e0       	ldi	r19, 0x01	; 1
    3e44:	44 e1       	ldi	r20, 0x14	; 20
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	6f ea       	ldi	r22, 0xAF	; 175
    3e4a:	76 e0       	ldi	r23, 0x06	; 6
    3e4c:	ce 01       	movw	r24, r28
            retries++;
    3e4e:	01 96       	adiw	r24, 0x01	; 1
        ret = -3;
        goto sim_send_2g_msg_exit;
    }

    retries=0;
    while(retries<4) {
    3e50:	6d d8       	rcall	.-3878   	; 0x2f2c <sim_read>
    3e52:	89 2b       	or	r24, r25
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
        ret = -3;
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <sim_send_2g_msg+0x10c>
        goto sim_send_2g_msg_exit;
    }

    retries=0;
    while(retries<4) {
        sim_tx(cmd5_action,strlen(cmd5_action));
    3e56:	98 c0       	rjmp	.+304    	; 0x3f88 <sim_send_2g_msg+0x23c>
    3e58:	1f 5f       	subi	r17, 0xFF	; 255
    3e5a:	14 30       	cpi	r17, 0x04	; 4
    3e5c:	d9 f6       	brne	.-74     	; 0x3e14 <sim_send_2g_msg+0xc8>
    3e5e:	0d ef       	ldi	r16, 0xFD	; 253
    3e60:	5e c0       	rjmp	.+188    	; 0x3f1e <sim_send_2g_msg+0x1d2>
		sim_read(sim_rxbuf,cmd5_action,20,sizeof(sim_rxbuf)); // read echo
    3e62:	60 e1       	ldi	r22, 0x10	; 16
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	82 e9       	ldi	r24, 0x92	; 146
    3e68:	98 e0       	ldi	r25, 0x08	; 8
    3e6a:	86 d9       	rcall	.-3316   	; 0x3178 <sim_tx>
    3e6c:	20 e8       	ldi	r18, 0x80	; 128
    3e6e:	31 e0       	ldi	r19, 0x01	; 1
    3e70:	44 e1       	ldi	r20, 0x14	; 20
    3e72:	50 e0       	ldi	r21, 0x00	; 0
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
    3e74:	62 e9       	ldi	r22, 0x92	; 146
    3e76:	78 e0       	ldi	r23, 0x08	; 8
    3e78:	ce 01       	movw	r24, r28
    3e7a:	01 96       	adiw	r24, 0x01	; 1
    3e7c:	57 d8       	rcall	.-3922   	; 0x2f2c <sim_read>
    3e7e:	20 e8       	ldi	r18, 0x80	; 128
    3e80:	31 e0       	ldi	r19, 0x01	; 1
    3e82:	44 e1       	ldi	r20, 0x14	; 20
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	6f ea       	ldi	r22, 0xAF	; 175
    3e88:	76 e0       	ldi	r23, 0x06	; 6
    3e8a:	ce 01       	movw	r24, r28
            retries++;
    3e8c:	01 96       	adiw	r24, 0x01	; 1
        ret = -3;
        goto sim_send_2g_msg_exit;
    }

    retries=0;
    while(retries<4) {
    3e8e:	4e d8       	rcall	.-3940   	; 0x2f2c <sim_read>
    3e90:	89 2b       	or	r24, r25
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
        ret = -4;
    3e92:	29 f4       	brne	.+10     	; 0x3e9e <sim_send_2g_msg+0x152>
    3e94:	1f 5f       	subi	r17, 0xFF	; 255
		sim_read(sim_rxbuf,cmd5_action,20,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
    3e96:	14 30       	cpi	r17, 0x04	; 4
    3e98:	21 f7       	brne	.-56     	; 0x3e62 <sim_send_2g_msg+0x116>
        ret = -4;
        goto sim_send_2g_msg_exit;
    }

    delay_ms(500);
    3e9a:	0c ef       	ldi	r16, 0xFC	; 252
    3e9c:	40 c0       	rjmp	.+128    	; 0x3f1e <sim_send_2g_msg+0x1d2>
    3e9e:	14 30       	cpi	r17, 0x04	; 4
    3ea0:	b8 f5       	brcc	.+110    	; 0x3f10 <sim_send_2g_msg+0x1c4>
    3ea2:	60 e7       	ldi	r22, 0x70	; 112
    wdt_reset();
    3ea4:	7e e5       	ldi	r23, 0x5E	; 94
    3ea6:	89 e0       	ldi	r24, 0x09	; 9

    // wait until URL is sent
    waiting=15;
    while(waiting) {
        delay_ms(500);
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    3eae:	a8 95       	wdr
    3eb0:	1e e0       	ldi	r17, 0x0E	; 14
        sim_tx(cmd6_status,strlen(cmd6_status));
    3eb2:	60 e7       	ldi	r22, 0x70	; 112
    3eb4:	7e e5       	ldi	r23, 0x5E	; 94
    3eb6:	89 e0       	ldi	r24, 0x09	; 9
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
		// response is: AT+HTTPSTATUS?\r\r\n+HTTPSTATUS: GET,0,0,0\r\n\r\nOK\r\n
		sim_read(sim_rxbuf,cmd6_status,40,sizeof(sim_rxbuf)); // read echo
    3ebe:	6f e0       	ldi	r22, 0x0F	; 15
    3ec0:	70 e0       	ldi	r23, 0x00	; 0
    3ec2:	83 ea       	ldi	r24, 0xA3	; 163
    3ec4:	98 e0       	ldi	r25, 0x08	; 8
    3ec6:	58 d9       	rcall	.-3408   	; 0x3178 <sim_tx>
    3ec8:	20 e8       	ldi	r18, 0x80	; 128
    3eca:	31 e0       	ldi	r19, 0x01	; 1
    3ecc:	48 e2       	ldi	r20, 0x28	; 40
    3ece:	50 e0       	ldi	r21, 0x00	; 0
        if(sim_read(sim_rxbuf,"OK\r\n",40,sizeof(sim_rxbuf))==0) {
    3ed0:	63 ea       	ldi	r22, 0xA3	; 163
    3ed2:	78 e0       	ldi	r23, 0x08	; 8
    3ed4:	ce 01       	movw	r24, r28
    3ed6:	01 96       	adiw	r24, 0x01	; 1
    3ed8:	29 d8       	rcall	.-4014   	; 0x2f2c <sim_read>
    3eda:	20 e8       	ldi	r18, 0x80	; 128
    3edc:	31 e0       	ldi	r19, 0x01	; 1
    3ede:	48 e2       	ldi	r20, 0x28	; 40
    3ee0:	50 e0       	ldi	r21, 0x00	; 0
    3ee2:	6f ea       	ldi	r22, 0xAF	; 175
    3ee4:	76 e0       	ldi	r23, 0x06	; 6
    3ee6:	ce 01       	movw	r24, r28
            waiting--;
            continue;
        }
		if(strstr(sim_rxbuf,"GET,0,0,0")==NULL) { // response should become 0,0,0		
    3ee8:	01 96       	adiw	r24, 0x01	; 1
    3eea:	20 d8       	rcall	.-4032   	; 0x2f2c <sim_read>
    3eec:	89 2b       	or	r24, r25
    3eee:	41 f0       	breq	.+16     	; 0x3f00 <sim_send_2g_msg+0x1b4>
    3ef0:	63 eb       	ldi	r22, 0xB3	; 179
    3ef2:	78 e0       	ldi	r23, 0x08	; 8
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	01 96       	adiw	r24, 0x01	; 1
    3ef8:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strstr>
            waiting--;
            continue;
        } else break;
    }
    if(waiting==0) ret=-5;
    3efc:	89 2b       	or	r24, r25
    3efe:	21 f4       	brne	.+8      	; 0x3f08 <sim_send_2g_msg+0x1bc>
    3f00:	11 50       	subi	r17, 0x01	; 1
    3f02:	b8 f6       	brcc	.-82     	; 0x3eb2 <sim_send_2g_msg+0x166>
    3f04:	0b ef       	ldi	r16, 0xFB	; 251
    3f06:	0b c0       	rjmp	.+22     	; 0x3f1e <sim_send_2g_msg+0x1d2>
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
        ret = -4;
    3f08:	1f 3f       	cpi	r17, 0xFF	; 255
    3f0a:	21 f4       	brne	.+8      	; 0x3f14 <sim_send_2g_msg+0x1c8>

int8_t sim_send_2g_msg(const char *msg, uint16_t size)
{
	char sim_rxbuf[384];
    uint8_t retries;
    int8_t ret=0;
    3f0c:	0b ef       	ldi	r16, 0xFB	; 251
    3f0e:	07 c0       	rjmp	.+14     	; 0x3f1e <sim_send_2g_msg+0x1d2>
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
        ret = -3;
    3f10:	0c ef       	ldi	r16, 0xFC	; 252
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
        ret = -3;
    3f12:	05 c0       	rjmp	.+10     	; 0x3f1e <sim_send_2g_msg+0x1d2>
        } else break;
    }
    if(waiting==0) ret=-5;
sim_send_2g_msg_exit:
    waiting=15;
	delay_ms(500);
    3f14:	00 e0       	ldi	r16, 0x00	; 0
    3f16:	03 c0       	rjmp	.+6      	; 0x3f1e <sim_send_2g_msg+0x1d2>
    3f18:	0d ef       	ldi	r16, 0xFD	; 253
    3f1a:	01 c0       	rjmp	.+2      	; 0x3f1e <sim_send_2g_msg+0x1d2>
    3f1c:	0d ef       	ldi	r16, 0xFD	; 253
    3f1e:	60 e7       	ldi	r22, 0x70	; 112
	wdt_reset();
    3f20:	7e e5       	ldi	r23, 0x5E	; 94
	sim_rxflush();
    3f22:	89 e0       	ldi	r24, 0x09	; 9
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    while(waiting) {
        sim_tx(cmd2_term,strlen(cmd2_term));
    3f2a:	a8 95       	wdr
    3f2c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <sim_rxflush>
    3f30:	1f e0       	ldi	r17, 0x0F	; 15
    3f32:	6c e0       	ldi	r22, 0x0C	; 12
		sim_read(sim_rxbuf,cmd2_term,40,sizeof(sim_rxbuf)); // read echo
    3f34:	70 e0       	ldi	r23, 0x00	; 0
    3f36:	8f e4       	ldi	r24, 0x4F	; 79
    3f38:	98 e0       	ldi	r25, 0x08	; 8
    3f3a:	1e d9       	rcall	.-3524   	; 0x3178 <sim_tx>
    3f3c:	20 e8       	ldi	r18, 0x80	; 128
    3f3e:	31 e0       	ldi	r19, 0x01	; 1
    3f40:	48 e2       	ldi	r20, 0x28	; 40
    3f42:	50 e0       	ldi	r21, 0x00	; 0
    3f44:	6f e4       	ldi	r22, 0x4F	; 79
    3f46:	78 e0       	ldi	r23, 0x08	; 8
        if(sim_read(sim_rxbuf,"OK\r\n",40,sizeof(sim_rxbuf)) > 0) {
    3f48:	ce 01       	movw	r24, r28
    3f4a:	01 96       	adiw	r24, 0x01	; 1
    3f4c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    3f50:	20 e8       	ldi	r18, 0x80	; 128
    3f52:	31 e0       	ldi	r19, 0x01	; 1
    3f54:	48 e2       	ldi	r20, 0x28	; 40
    3f56:	50 e0       	ldi	r21, 0x00	; 0
    3f58:	6f ea       	ldi	r22, 0xAF	; 175
    3f5a:	76 e0       	ldi	r23, 0x06	; 6
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	01 96       	adiw	r24, 0x01	; 1
            break;
        }
        waiting--;
        delay_ms(100);
    3f60:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    3f64:	89 2b       	or	r24, r25
    3f66:	51 f4       	brne	.+20     	; 0x3f7c <sim_send_2g_msg+0x230>
    3f68:	60 eb       	ldi	r22, 0xB0	; 176
    3f6a:	7f ed       	ldi	r23, 0xDF	; 223
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
sim_send_2g_msg_exit:
    waiting=15;
	delay_ms(500);
	wdt_reset();
	sim_rxflush();
    while(waiting) {
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
            break;
        }
        waiting--;
        delay_ms(100);
    }
    return ret;
    3f70:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    3f74:	11 50       	subi	r17, 0x01	; 1
    3f76:	e9 f6       	brne	.-70     	; 0x3f32 <sim_send_2g_msg+0x1e6>
		sim_read(sim_rxbuf,"AT+HTTPPARA=",20,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
    3f78:	80 2f       	mov	r24, r16
    3f7a:	0a c0       	rjmp	.+20     	; 0x3f90 <sim_send_2g_msg+0x244>
    3f7c:	80 2f       	mov	r24, r16
    3f7e:	08 c0       	rjmp	.+16     	; 0x3f90 <sim_send_2g_msg+0x244>
		sim_read(sim_rxbuf,"AT+HTTPPARA=",20,sizeof(sim_rxbuf)); // read echo
        if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0) {
            retries++;
        } else break;
    }
    if(retries>3) {
    3f80:	14 30       	cpi	r17, 0x04	; 4
    3f82:	50 f6       	brcc	.-108    	; 0x3f18 <sim_send_2g_msg+0x1cc>
    3f84:	10 e0       	ldi	r17, 0x00	; 0
    3f86:	46 cf       	rjmp	.-372    	; 0x3e14 <sim_send_2g_msg+0xc8>
        }
        waiting--;
        delay_ms(100);
    }
    return ret;
}
    3f88:	14 30       	cpi	r17, 0x04	; 4
    3f8a:	40 f6       	brcc	.-112    	; 0x3f1c <sim_send_2g_msg+0x1d0>
    3f8c:	10 e0       	ldi	r17, 0x00	; 0
    3f8e:	69 cf       	rjmp	.-302    	; 0x3e62 <sim_send_2g_msg+0x116>
    3f90:	c0 58       	subi	r28, 0x80	; 128
    3f92:	de 4f       	sbci	r29, 0xFE	; 254
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	1f 91       	pop	r17
    3fa4:	0f 91       	pop	r16
    3fa6:	ff 90       	pop	r15
    3fa8:	ef 90       	pop	r14
    3faa:	df 90       	pop	r13
    3fac:	cf 90       	pop	r12
    3fae:	08 95       	ret

00003fb0 <sim_stop_2g>:

void sim_stop_2g(void)
{
    3fb0:	1f 93       	push	r17
    3fb2:	cf 93       	push	r28
    3fb4:	df 93       	push	r29
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
    3fba:	c0 54       	subi	r28, 0x40	; 64
    3fbc:	d1 09       	sbc	r29, r1
    3fbe:	0f b6       	in	r0, 0x3f	; 63
    3fc0:	f8 94       	cli
    3fc2:	de bf       	out	0x3e, r29	; 62
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	cd bf       	out	0x3d, r28	; 61
    3fc8:	1a e0       	ldi	r17, 0x0A	; 10
    uint8_t waiting=10;
	char *cmd1_sapbr="AT+SAPBR=0,1\r";
	char *cmd2_shut="AT+CIPSHUT\r";

    while(waiting) {
		wdt_reset();
    3fca:	a8 95       	wdr
        sim_tx(cmd1_sapbr,strlen(cmd1_sapbr));
    3fcc:	6d e0       	ldi	r22, 0x0D	; 13
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	8d eb       	ldi	r24, 0xBD	; 189
    3fd2:	98 e0       	ldi	r25, 0x08	; 8
    3fd4:	d1 d8       	rcall	.-3678   	; 0x3178 <sim_tx>
		sim_read(sim_rxbuf,cmd1_sapbr,40,sizeof(sim_rxbuf)); // read echo
    3fd6:	20 e4       	ldi	r18, 0x40	; 64
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	48 e2       	ldi	r20, 0x28	; 40
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	6d eb       	ldi	r22, 0xBD	; 189
    3fe0:	78 e0       	ldi	r23, 0x08	; 8
    3fe2:	ce 01       	movw	r24, r28
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
        if(sim_read(sim_rxbuf,"OK\r\n",40,sizeof(sim_rxbuf)) > 0) {
    3fea:	20 e4       	ldi	r18, 0x40	; 64
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	48 e2       	ldi	r20, 0x28	; 40
    3ff0:	50 e0       	ldi	r21, 0x00	; 0
    3ff2:	6f ea       	ldi	r22, 0xAF	; 175
    3ff4:	76 e0       	ldi	r23, 0x06	; 6
    3ff6:	ce 01       	movw	r24, r28
    3ff8:	01 96       	adiw	r24, 0x01	; 1
    3ffa:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    3ffe:	89 2b       	or	r24, r25
    4000:	41 f4       	brne	.+16     	; 0x4012 <sim_stop_2g+0x62>
            break;
        }
        waiting--;
        delay_ms(100);
    4002:	60 eb       	ldi	r22, 0xB0	; 176
    4004:	7f ed       	ldi	r23, 0xDF	; 223
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    400e:	11 50       	subi	r17, 0x01	; 1
	char sim_rxbuf[64];
    uint8_t waiting=10;
	char *cmd1_sapbr="AT+SAPBR=0,1\r";
	char *cmd2_shut="AT+CIPSHUT\r";

    while(waiting) {
    4010:	e1 f6       	brne	.-72     	; 0x3fca <sim_stop_2g+0x1a>
            break;
        }
        waiting--;
        delay_ms(100);
    }
    sim_tx(cmd2_shut,strlen(cmd2_shut));
    4012:	6b e0       	ldi	r22, 0x0B	; 11
    4014:	70 e0       	ldi	r23, 0x00	; 0
    4016:	8c e2       	ldi	r24, 0x2C	; 44
    4018:	98 e0       	ldi	r25, 0x08	; 8
    401a:	ae d8       	rcall	.-3748   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd2_shut,40,sizeof(sim_rxbuf)); // read echo
    401c:	20 e4       	ldi	r18, 0x40	; 64
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	48 e2       	ldi	r20, 0x28	; 40
    4022:	50 e0       	ldi	r21, 0x00	; 0
    4024:	6c e2       	ldi	r22, 0x2C	; 44
    4026:	78 e0       	ldi	r23, 0x08	; 8
    4028:	ce 01       	movw	r24, r28
    402a:	01 96       	adiw	r24, 0x01	; 1
    402c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
	wdt_reset();
    4030:	a8 95       	wdr
	delay_ms(500);
    4032:	60 e7       	ldi	r22, 0x70	; 112
    4034:	7e e5       	ldi	r23, 0x5E	; 94
    4036:	89 e0       	ldi	r24, 0x09	; 9
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	sim_read(sim_rxbuf,"SHUT OK\r\n",40,sizeof(sim_rxbuf));
    403e:	20 e4       	ldi	r18, 0x40	; 64
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	48 e2       	ldi	r20, 0x28	; 40
    4044:	50 e0       	ldi	r21, 0x00	; 0
    4046:	68 e3       	ldi	r22, 0x38	; 56
    4048:	78 e0       	ldi	r23, 0x08	; 8
    404a:	ce 01       	movw	r24, r28
    404c:	01 96       	adiw	r24, 0x01	; 1
    404e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
}
    4052:	c0 5c       	subi	r28, 0xC0	; 192
    4054:	df 4f       	sbci	r29, 0xFF	; 255
    4056:	0f b6       	in	r0, 0x3f	; 63
    4058:	f8 94       	cli
    405a:	de bf       	out	0x3e, r29	; 62
    405c:	0f be       	out	0x3f, r0	; 63
    405e:	cd bf       	out	0x3d, r28	; 61
    4060:	df 91       	pop	r29
    4062:	cf 91       	pop	r28
    4064:	1f 91       	pop	r17
    4066:	08 95       	ret

00004068 <sim_read_CREG>:

int sim_read_CREG(void)
{
    4068:	cf 93       	push	r28
    406a:	df 93       	push	r29
    406c:	cd b7       	in	r28, 0x3d	; 61
    406e:	de b7       	in	r29, 0x3e	; 62
    4070:	c2 54       	subi	r28, 0x42	; 66
    4072:	d1 09       	sbc	r29, r1
    4074:	0f b6       	in	r0, 0x3f	; 63
    4076:	f8 94       	cli
    4078:	de bf       	out	0x3e, r29	; 62
    407a:	0f be       	out	0x3f, r0	; 63
    407c:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[64];
    char *ptr;
    int found,stat;
	char *cmd="AT+CREG?\r";

    sim_tx(cmd,strlen(cmd));
    407e:	69 e0       	ldi	r22, 0x09	; 9
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	8b ec       	ldi	r24, 0xCB	; 203
    4084:	98 e0       	ldi	r25, 0x08	; 8
    4086:	78 d8       	rcall	.-3856   	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    4088:	20 e4       	ldi	r18, 0x40	; 64
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	4a e0       	ldi	r20, 0x0A	; 10
    408e:	50 e0       	ldi	r21, 0x00	; 0
    4090:	6b ec       	ldi	r22, 0xCB	; 203
    4092:	78 e0       	ldi	r23, 0x08	; 8
    4094:	ce 01       	movw	r24, r28
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    if(sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf))==0)
    409c:	20 e4       	ldi	r18, 0x40	; 64
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	4a e0       	ldi	r20, 0x0A	; 10
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	6f ea       	ldi	r22, 0xAF	; 175
    40a6:	76 e0       	ldi	r23, 0x06	; 6
    40a8:	ce 01       	movw	r24, r28
    40aa:	01 96       	adiw	r24, 0x01	; 1
    40ac:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    40b0:	89 2b       	or	r24, r25
    40b2:	71 f1       	breq	.+92     	; 0x4110 <__stack+0x11>
        return -1;

    // response looks like: +CREG: 0,1\r\nOK
    ptr=sim_rxbuf;
    found=sscanf(ptr,"\r\n+CREG: 0,%d",&stat);
    40b4:	ce 01       	movw	r24, r28
    40b6:	8f 5b       	subi	r24, 0xBF	; 191
    40b8:	9f 4f       	sbci	r25, 0xFF	; 255
    40ba:	9f 93       	push	r25
    40bc:	8f 93       	push	r24
    40be:	85 ed       	ldi	r24, 0xD5	; 213
    40c0:	98 e0       	ldi	r25, 0x08	; 8
    40c2:	9f 93       	push	r25
    40c4:	8f 93       	push	r24
    40c6:	ce 01       	movw	r24, r28
    40c8:	01 96       	adiw	r24, 0x01	; 1
    40ca:	9f 93       	push	r25
    40cc:	8f 93       	push	r24
    40ce:	0e 94 67 2c 	call	0x58ce	; 0x58ce <sscanf>
    if(found==1) {
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	0f 90       	pop	r0
    40dc:	0f 90       	pop	r0
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	d1 f4       	brne	.+52     	; 0x4116 <__stack+0x17>
        printf("CREG:%d\n",stat);
    40e2:	23 96       	adiw	r28, 0x03	; 3
    40e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    40e6:	23 97       	sbiw	r28, 0x03	; 3
    40e8:	8f 93       	push	r24
    40ea:	22 96       	adiw	r28, 0x02	; 2
    40ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    40ee:	22 97       	sbiw	r28, 0x02	; 2
    40f0:	8f 93       	push	r24
    40f2:	83 ee       	ldi	r24, 0xE3	; 227
    40f4:	98 e0       	ldi	r25, 0x08	; 8
    40f6:	9f 93       	push	r25
    40f8:	8f 93       	push	r24
    40fa:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
        return stat;
    40fe:	23 96       	adiw	r28, 0x03	; 3
    4100:	8e ad       	ldd	r24, Y+62	; 0x3e
    4102:	9f ad       	ldd	r25, Y+63	; 0x3f
    4104:	23 97       	sbiw	r28, 0x03	; 3
    4106:	0f 90       	pop	r0
    4108:	0f 90       	pop	r0
    410a:	0f 90       	pop	r0
    410c:	0f 90       	pop	r0
    410e:	05 c0       	rjmp	.+10     	; 0x411a <__stack+0x1b>
	char *cmd="AT+CREG?\r";

    sim_tx(cmd,strlen(cmd));
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    if(sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf))==0)
        return -1;
    4110:	8f ef       	ldi	r24, 0xFF	; 255
    4112:	9f ef       	ldi	r25, 0xFF	; 255
    4114:	02 c0       	rjmp	.+4      	; 0x411a <__stack+0x1b>
    ptr=sim_rxbuf;
    found=sscanf(ptr,"\r\n+CREG: 0,%d",&stat);
    if(found==1) {
        printf("CREG:%d\n",stat);
        return stat;
    } else return -1;
    4116:	8f ef       	ldi	r24, 0xFF	; 255
    4118:	9f ef       	ldi	r25, 0xFF	; 255
}
    411a:	ce 5b       	subi	r28, 0xBE	; 190
    411c:	df 4f       	sbci	r29, 0xFF	; 255
    411e:	0f b6       	in	r0, 0x3f	; 63
    4120:	f8 94       	cli
    4122:	de bf       	out	0x3e, r29	; 62
    4124:	0f be       	out	0x3f, r0	; 63
    4126:	cd bf       	out	0x3d, r28	; 61
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	08 95       	ret

0000412e <sim_set_flowcontrol>:

uint8_t sim_set_flowcontrol(void)
{
    412e:	cf 93       	push	r28
    4130:	df 93       	push	r29
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
    4136:	a0 97       	sbiw	r28, 0x20	; 32
    4138:	0f b6       	in	r0, 0x3f	; 63
    413a:	f8 94       	cli
    413c:	de bf       	out	0x3e, r29	; 62
    413e:	0f be       	out	0x3f, r0	; 63
    4140:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	char *cmd1="AT+IFC=2,2\r";
	char *cmd2="AT+CSCLK=0\r";
	char *cmd3="AT&D0\r";
	
    sim_tx(cmd1,strlen(cmd1)); // set hardware flow control
    4142:	6b e0       	ldi	r22, 0x0B	; 11
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	8c ee       	ldi	r24, 0xEC	; 236
    4148:	98 e0       	ldi	r25, 0x08	; 8
    414a:	16 d8       	rcall	.-4052   	; 0x3178 <sim_tx>
    sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf));
    414c:	20 e2       	ldi	r18, 0x20	; 32
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	4a e0       	ldi	r20, 0x0A	; 10
    4152:	50 e0       	ldi	r21, 0x00	; 0
    4154:	6f ea       	ldi	r22, 0xAF	; 175
    4156:	76 e0       	ldi	r23, 0x06	; 6
    4158:	ce 01       	movw	r24, r28
    415a:	01 96       	adiw	r24, 0x01	; 1
    415c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>

    sim_tx(cmd2,strlen(cmd2)); // do not go to sleep
    4160:	6b e0       	ldi	r22, 0x0B	; 11
    4162:	70 e0       	ldi	r23, 0x00	; 0
    4164:	88 ef       	ldi	r24, 0xF8	; 248
    4166:	98 e0       	ldi	r25, 0x08	; 8
    4168:	07 d8       	rcall	.-4082   	; 0x3178 <sim_tx>
    sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf));
    416a:	20 e2       	ldi	r18, 0x20	; 32
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	4a e0       	ldi	r20, 0x0A	; 10
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	6f ea       	ldi	r22, 0xAF	; 175
    4174:	76 e0       	ldi	r23, 0x06	; 6
    4176:	ce 01       	movw	r24, r28
    4178:	01 96       	adiw	r24, 0x01	; 1
    417a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>

    sim_tx(cmd3,strlen(cmd3)); // ignore DTR status
    417e:	66 e0       	ldi	r22, 0x06	; 6
    4180:	70 e0       	ldi	r23, 0x00	; 0
    4182:	84 e0       	ldi	r24, 0x04	; 4
    4184:	99 e0       	ldi	r25, 0x09	; 9
    4186:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
    return (uint8_t)sim_read(sim_rxbuf,"OK\r\n",10,sizeof(sim_rxbuf));
    418a:	20 e2       	ldi	r18, 0x20	; 32
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	4a e0       	ldi	r20, 0x0A	; 10
    4190:	50 e0       	ldi	r21, 0x00	; 0
    4192:	6f ea       	ldi	r22, 0xAF	; 175
    4194:	76 e0       	ldi	r23, 0x06	; 6
    4196:	ce 01       	movw	r24, r28
    4198:	01 96       	adiw	r24, 0x01	; 1
    419a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
}
    419e:	a0 96       	adiw	r28, 0x20	; 32
    41a0:	0f b6       	in	r0, 0x3f	; 63
    41a2:	f8 94       	cli
    41a4:	de bf       	out	0x3e, r29	; 62
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	cd bf       	out	0x3d, r28	; 61
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	08 95       	ret

000041b0 <sim_set_textmode>:
 * Returns:
 *  0 if error or not found "OK"
 * >0 if found "OK": means success
 */
uint8_t sim_set_textmode(void)
{
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
    41b8:	a0 97       	sbiw	r28, 0x20	; 32
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	f8 94       	cli
    41be:	de bf       	out	0x3e, r29	; 62
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	char *cmd="AT+CMGF=1\r"; 
    sim_tx(cmd,strlen(cmd)); // select text mode
    41c4:	6a e0       	ldi	r22, 0x0A	; 10
    41c6:	70 e0       	ldi	r23, 0x00	; 0
    41c8:	8b e0       	ldi	r24, 0x0B	; 11
    41ca:	99 e0       	ldi	r25, 0x09	; 9
    41cc:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
    return (uint8_t)sim_read(sim_rxbuf,"OK\r\n",5,sizeof(sim_rxbuf));
    41d0:	20 e2       	ldi	r18, 0x20	; 32
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	45 e0       	ldi	r20, 0x05	; 5
    41d6:	50 e0       	ldi	r21, 0x00	; 0
    41d8:	6f ea       	ldi	r22, 0xAF	; 175
    41da:	76 e0       	ldi	r23, 0x06	; 6
    41dc:	ce 01       	movw	r24, r28
    41de:	01 96       	adiw	r24, 0x01	; 1
    41e0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
}
    41e4:	a0 96       	adiw	r28, 0x20	; 32
    41e6:	0f b6       	in	r0, 0x3f	; 63
    41e8:	f8 94       	cli
    41ea:	de bf       	out	0x3e, r29	; 62
    41ec:	0f be       	out	0x3f, r0	; 63
    41ee:	cd bf       	out	0x3d, r28	; 61
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	08 95       	ret

000041f6 <sim_pincode_check>:
 * Returns:
 *  0 if error or not found "READY"
 * >0 if found "READY": means pincode check OK; no pending pincode
 */
uint8_t sim_pincode_check(void)
{
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	cd b7       	in	r28, 0x3d	; 61
    41fe:	de b7       	in	r29, 0x3e	; 62
    4200:	a0 97       	sbiw	r28, 0x20	; 32
    4202:	0f b6       	in	r0, 0x3f	; 63
    4204:	f8 94       	cli
    4206:	de bf       	out	0x3e, r29	; 62
    4208:	0f be       	out	0x3f, r0	; 63
    420a:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	uint16_t len;
	char *cmd="AT+CPIN?\r";
	
    sim_tx(cmd,strlen(cmd));
    420c:	69 e0       	ldi	r22, 0x09	; 9
    420e:	70 e0       	ldi	r23, 0x00	; 0
    4210:	86 e1       	ldi	r24, 0x16	; 22
    4212:	99 e0       	ldi	r25, 0x09	; 9
    4214:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
	delay_ms(500);
    4218:	60 e7       	ldi	r22, 0x70	; 112
    421a:	7e e5       	ldi	r23, 0x5E	; 94
    421c:	89 e0       	ldi	r24, 0x09	; 9
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	wdt_reset();	
    4224:	a8 95       	wdr
    len=sim_read(sim_rxbuf,"READY",30,sizeof(sim_rxbuf));
    4226:	20 e2       	ldi	r18, 0x20	; 32
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	4e e1       	ldi	r20, 0x1E	; 30
    422c:	50 e0       	ldi	r21, 0x00	; 0
    422e:	60 e2       	ldi	r22, 0x20	; 32
    4230:	79 e0       	ldi	r23, 0x09	; 9
    4232:	ce 01       	movw	r24, r28
    4234:	01 96       	adiw	r24, 0x01	; 1
    4236:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    423a:	18 2f       	mov	r17, r24
	sim_rxflush();
    423c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <sim_rxflush>
	return (uint8_t)len;
}
    4240:	81 2f       	mov	r24, r17
    4242:	a0 96       	adiw	r28, 0x20	; 32
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	1f 91       	pop	r17
    4254:	08 95       	ret

00004256 <sim_has_bluetooth>:

// --------------------
// Bluetooth functions:
// --------------------
uint8_t sim_has_bluetooth(void)
{
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	cd b7       	in	r28, 0x3d	; 61
    425c:	de b7       	in	r29, 0x3e	; 62
    425e:	ec 97       	sbiw	r28, 0x3c	; 60
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[60];
	char *ptr;
	char *cmd="AT+CGMR\r"; // read firmware version. ends with "_BT" if has bluetooth
	
	sim_tx(cmd,strlen(cmd));
    426a:	68 e0       	ldi	r22, 0x08	; 8
    426c:	70 e0       	ldi	r23, 0x00	; 0
    426e:	86 e2       	ldi	r24, 0x26	; 38
    4270:	99 e0       	ldi	r25, 0x09	; 9
    4272:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
	delay_ms(500);
    4276:	60 e7       	ldi	r22, 0x70	; 112
    4278:	7e e5       	ldi	r23, 0x5E	; 94
    427a:	89 e0       	ldi	r24, 0x09	; 9
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	wdt_reset();
    4282:	a8 95       	wdr
	if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0)
    4284:	2c e3       	ldi	r18, 0x3C	; 60
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	44 e1       	ldi	r20, 0x14	; 20
    428a:	50 e0       	ldi	r21, 0x00	; 0
    428c:	6f ea       	ldi	r22, 0xAF	; 175
    428e:	76 e0       	ldi	r23, 0x06	; 6
    4290:	ce 01       	movw	r24, r28
    4292:	01 96       	adiw	r24, 0x01	; 1
    4294:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    4298:	89 2b       	or	r24, r25
    429a:	59 f0       	breq	.+22     	; 0x42b2 <sim_has_bluetooth+0x5c>
	    return 0;
	
	ptr=sim_rxbuf;
	if(strstr(ptr,"BT")!=NULL) {
    429c:	6f e2       	ldi	r22, 0x2F	; 47
    429e:	79 e0       	ldi	r23, 0x09	; 9
    42a0:	ce 01       	movw	r24, r28
    42a2:	01 96       	adiw	r24, 0x01	; 1
    42a4:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strstr>
	
	sim_tx(cmd,strlen(cmd));
	delay_ms(500);
	wdt_reset();
	if(sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf))==0)
	    return 0;
    42a8:	21 e0       	ldi	r18, 0x01	; 1
    42aa:	89 2b       	or	r24, r25
    42ac:	19 f4       	brne	.+6      	; 0x42b4 <sim_has_bluetooth+0x5e>
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	01 c0       	rjmp	.+2      	; 0x42b4 <sim_has_bluetooth+0x5e>
    42b2:	20 e0       	ldi	r18, 0x00	; 0
	if(strstr(ptr,"BT")!=NULL) {
		return 1;
	} else {
		return 0;
	}
}
    42b4:	82 2f       	mov	r24, r18
    42b6:	ec 96       	adiw	r28, 0x3c	; 60
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	df 91       	pop	r29
    42c4:	cf 91       	pop	r28
    42c6:	08 95       	ret

000042c8 <sim_read_bluetooth_status>:


int sim_read_bluetooth_status(void)
{
    42c8:	0f 93       	push	r16
    42ca:	1f 93       	push	r17
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	ee 97       	sbiw	r28, 0x3e	; 62
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	f8 94       	cli
    42da:	de bf       	out	0x3e, r29	; 62
    42dc:	0f be       	out	0x3f, r0	; 63
    42de:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[60];
	char *ptr;
	int found,stat;
	char *cmd="AT+BTSTATUS?\r";

	sim_tx(cmd,strlen(cmd));
    42e0:	6d e0       	ldi	r22, 0x0D	; 13
    42e2:	70 e0       	ldi	r23, 0x00	; 0
    42e4:	82 e3       	ldi	r24, 0x32	; 50
    42e6:	99 e0       	ldi	r25, 0x09	; 9
    42e8:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    42ec:	2c e3       	ldi	r18, 0x3C	; 60
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	4a e0       	ldi	r20, 0x0A	; 10
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	62 e3       	ldi	r22, 0x32	; 50
    42f6:	79 e0       	ldi	r23, 0x09	; 9
    42f8:	8e 01       	movw	r16, r28
    42fa:	0f 5f       	subi	r16, 0xFF	; 255
    42fc:	1f 4f       	sbci	r17, 0xFF	; 255
    42fe:	c8 01       	movw	r24, r16
    4300:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
	sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf));
    4304:	2c e3       	ldi	r18, 0x3C	; 60
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	44 e1       	ldi	r20, 0x14	; 20
    430a:	50 e0       	ldi	r21, 0x00	; 0
    430c:	6f ea       	ldi	r22, 0xAF	; 175
    430e:	76 e0       	ldi	r23, 0x06	; 6
    4310:	c8 01       	movw	r24, r16
    4312:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>

	// response looks like: +BTSTATUS: 5\r\nOK
	ptr=sim_rxbuf;
	found=sscanf(ptr,"\r\n+BTSTATUS: %d",&stat);
    4316:	ce 01       	movw	r24, r28
    4318:	cd 96       	adiw	r24, 0x3d	; 61
    431a:	9f 93       	push	r25
    431c:	8f 93       	push	r24
    431e:	80 e4       	ldi	r24, 0x40	; 64
    4320:	99 e0       	ldi	r25, 0x09	; 9
    4322:	9f 93       	push	r25
    4324:	8f 93       	push	r24
    4326:	1f 93       	push	r17
    4328:	0f 93       	push	r16
    432a:	0e 94 67 2c 	call	0x58ce	; 0x58ce <sscanf>
    432e:	8c 01       	movw	r16, r24
	sim_rxflush();
    4330:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <sim_rxflush>
	if(found==1) {
    4334:	0f 90       	pop	r0
    4336:	0f 90       	pop	r0
    4338:	0f 90       	pop	r0
    433a:	0f 90       	pop	r0
    433c:	0f 90       	pop	r0
    433e:	0f 90       	pop	r0
    4340:	01 30       	cpi	r16, 0x01	; 1
    4342:	11 05       	cpc	r17, r1
    4344:	89 f4       	brne	.+34     	; 0x4368 <sim_read_bluetooth_status+0xa0>
		printf("BTSTATUS:%d\n",stat);
    4346:	8e ad       	ldd	r24, Y+62	; 0x3e
    4348:	8f 93       	push	r24
    434a:	8d ad       	ldd	r24, Y+61	; 0x3d
    434c:	8f 93       	push	r24
    434e:	80 e5       	ldi	r24, 0x50	; 80
    4350:	99 e0       	ldi	r25, 0x09	; 9
    4352:	9f 93       	push	r25
    4354:	8f 93       	push	r24
    4356:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
		return stat;
    435a:	8d ad       	ldd	r24, Y+61	; 0x3d
    435c:	9e ad       	ldd	r25, Y+62	; 0x3e
    435e:	0f 90       	pop	r0
    4360:	0f 90       	pop	r0
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	02 c0       	rjmp	.+4      	; 0x436c <sim_read_bluetooth_status+0xa4>
	} else return -1;
    4368:	8f ef       	ldi	r24, 0xFF	; 255
    436a:	9f ef       	ldi	r25, 0xFF	; 255
}
    436c:	ee 96       	adiw	r28, 0x3e	; 62
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	df 91       	pop	r29
    437a:	cf 91       	pop	r28
    437c:	1f 91       	pop	r17
    437e:	0f 91       	pop	r16
    4380:	08 95       	ret

00004382 <sim_bluetooth_power_on>:

uint8_t sim_bluetooth_power_on(void)
{
    4382:	cf 93       	push	r28
    4384:	df 93       	push	r29
    4386:	cd b7       	in	r28, 0x3d	; 61
    4388:	de b7       	in	r29, 0x3e	; 62
    438a:	a0 97       	sbiw	r28, 0x20	; 32
    438c:	0f b6       	in	r0, 0x3f	; 63
    438e:	f8 94       	cli
    4390:	de bf       	out	0x3e, r29	; 62
    4392:	0f be       	out	0x3f, r0	; 63
    4394:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	char *cmd="AT+BTPOWER=1\r";
	printf("sim_bluetooth_power_on\n");	
    4396:	8d e5       	ldi	r24, 0x5D	; 93
    4398:	99 e0       	ldi	r25, 0x09	; 9
    439a:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
	sim_tx(cmd,strlen(cmd)); // power on BT
    439e:	6d e0       	ldi	r22, 0x0D	; 13
    43a0:	70 e0       	ldi	r23, 0x00	; 0
    43a2:	84 e7       	ldi	r24, 0x74	; 116
    43a4:	99 e0       	ldi	r25, 0x09	; 9
    43a6:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    43aa:	20 e2       	ldi	r18, 0x20	; 32
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	4a e0       	ldi	r20, 0x0A	; 10
    43b0:	50 e0       	ldi	r21, 0x00	; 0
    43b2:	64 e7       	ldi	r22, 0x74	; 116
    43b4:	79 e0       	ldi	r23, 0x09	; 9
    43b6:	ce 01       	movw	r24, r28
    43b8:	01 96       	adiw	r24, 0x01	; 1
    43ba:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
	wdt_reset();
    43be:	a8 95       	wdr
	delay_ms(500);
    43c0:	60 e7       	ldi	r22, 0x70	; 112
    43c2:	7e e5       	ldi	r23, 0x5E	; 94
    43c4:	89 e0       	ldi	r24, 0x09	; 9
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	wdt_reset();
    43cc:	a8 95       	wdr
	delay_ms(500);
    43ce:	60 e7       	ldi	r22, 0x70	; 112
    43d0:	7e e5       	ldi	r23, 0x5E	; 94
    43d2:	89 e0       	ldi	r24, 0x09	; 9
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	wdt_reset();
    43da:	a8 95       	wdr
	delay_ms(500);
    43dc:	60 e7       	ldi	r22, 0x70	; 112
    43de:	7e e5       	ldi	r23, 0x5E	; 94
    43e0:	89 e0       	ldi	r24, 0x09	; 9
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	wdt_reset();
    43e8:	a8 95       	wdr
	return (uint8_t)sim_read(sim_rxbuf,"OK\r\n",40,sizeof(sim_rxbuf));
    43ea:	20 e2       	ldi	r18, 0x20	; 32
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	48 e2       	ldi	r20, 0x28	; 40
    43f0:	50 e0       	ldi	r21, 0x00	; 0
    43f2:	6f ea       	ldi	r22, 0xAF	; 175
    43f4:	76 e0       	ldi	r23, 0x06	; 6
    43f6:	ce 01       	movw	r24, r28
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
}
    43fe:	a0 96       	adiw	r28, 0x20	; 32
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	f8 94       	cli
    4404:	de bf       	out	0x3e, r29	; 62
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	cd bf       	out	0x3d, r28	; 61
    440a:	df 91       	pop	r29
    440c:	cf 91       	pop	r28
    440e:	08 95       	ret

00004410 <sim_bluetooth_power_off>:

uint8_t sim_bluetooth_power_off(void)
{
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	a0 97       	sbiw	r28, 0x20	; 32
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	f8 94       	cli
    441e:	de bf       	out	0x3e, r29	; 62
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	char *cmd="AT+BTPOWER=0\r"; // power off BT
	printf("sim_stop_bluetooth\n");
    4424:	82 e8       	ldi	r24, 0x82	; 130
    4426:	99 e0       	ldi	r25, 0x09	; 9
    4428:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
	sim_tx(cmd,strlen(cmd));
    442c:	6d e0       	ldi	r22, 0x0D	; 13
    442e:	70 e0       	ldi	r23, 0x00	; 0
    4430:	85 e9       	ldi	r24, 0x95	; 149
    4432:	99 e0       	ldi	r25, 0x09	; 9
    4434:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    4438:	20 e2       	ldi	r18, 0x20	; 32
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	4a e0       	ldi	r20, 0x0A	; 10
    443e:	50 e0       	ldi	r21, 0x00	; 0
    4440:	65 e9       	ldi	r22, 0x95	; 149
    4442:	79 e0       	ldi	r23, 0x09	; 9
    4444:	ce 01       	movw	r24, r28
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
	wdt_reset();
    444c:	a8 95       	wdr
	delay_ms(500);
    444e:	60 e7       	ldi	r22, 0x70	; 112
    4450:	7e e5       	ldi	r23, 0x5E	; 94
    4452:	89 e0       	ldi	r24, 0x09	; 9
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
	return (uint8_t)sim_read(sim_rxbuf,"OK\r\n",40,sizeof(sim_rxbuf));
    445a:	20 e2       	ldi	r18, 0x20	; 32
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	48 e2       	ldi	r20, 0x28	; 40
    4460:	50 e0       	ldi	r21, 0x00	; 0
    4462:	6f ea       	ldi	r22, 0xAF	; 175
    4464:	76 e0       	ldi	r23, 0x06	; 6
    4466:	ce 01       	movw	r24, r28
    4468:	01 96       	adiw	r24, 0x01	; 1
    446a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
}
    446e:	a0 96       	adiw	r28, 0x20	; 32
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	f8 94       	cli
    4474:	de bf       	out	0x3e, r29	; 62
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	08 95       	ret

00004480 <sim_set_bluetooth>:

uint8_t sim_set_bluetooth(void)
{
    4480:	0f 93       	push	r16
    4482:	1f 93       	push	r17
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
    448c:	e2 97       	sbiw	r28, 0x32	; 50
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	f8 94       	cli
    4492:	de bf       	out	0x3e, r29	; 62
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	cd bf       	out	0x3d, r28	; 61
	char *bthostname =          "Kamworks_SHS";
	char *cmd_btpaircfg = "AT+BTPAIRCFG=1,0000\r"; // sets the pairing mode to 1 with pincode="0000"
	char *cmd_btsppcfg = "AT+BTSPPCFG=MC,0\r"; // do not support multiconnections
	char *found_ptr=NULL;
	
	sim_tx(cmd_gethost,strlen(cmd_gethost)); // get BT hostname
    4498:	6b e0       	ldi	r22, 0x0B	; 11
    449a:	70 e0       	ldi	r23, 0x00	; 0
    449c:	83 ea       	ldi	r24, 0xA3	; 163
    449e:	99 e0       	ldi	r25, 0x09	; 9
    44a0:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd_gethost,10,sizeof(sim_rxbuf)); // read echo
    44a4:	22 e3       	ldi	r18, 0x32	; 50
    44a6:	30 e0       	ldi	r19, 0x00	; 0
    44a8:	4a e0       	ldi	r20, 0x0A	; 10
    44aa:	50 e0       	ldi	r21, 0x00	; 0
    44ac:	63 ea       	ldi	r22, 0xA3	; 163
    44ae:	79 e0       	ldi	r23, 0x09	; 9
    44b0:	ce 01       	movw	r24, r28
    44b2:	01 96       	adiw	r24, 0x01	; 1
    44b4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
	sim_read(sim_rxbuf,"OK\r\n",20,sizeof(sim_rxbuf));
    44b8:	22 e3       	ldi	r18, 0x32	; 50
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	44 e1       	ldi	r20, 0x14	; 20
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	6f ea       	ldi	r22, 0xAF	; 175
    44c2:	76 e0       	ldi	r23, 0x06	; 6
    44c4:	ce 01       	movw	r24, r28
    44c6:	01 96       	adiw	r24, 0x01	; 1
    44c8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
	// response looks like: +BTHOST: Kamworks_SHS,38:1c:4a:98:b4:24\r\n\r\nOK
	found_ptr = strstr(sim_rxbuf,bthostname);
    44cc:	6f ea       	ldi	r22, 0xAF	; 175
    44ce:	79 e0       	ldi	r23, 0x09	; 9
    44d0:	ce 01       	movw	r24, r28
    44d2:	01 96       	adiw	r24, 0x01	; 1
    44d4:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <strstr>
    44d8:	8c 01       	movw	r16, r24
	sim_rxflush();
    44da:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <sim_rxflush>
	if(found_ptr != NULL) {
    44de:	01 2b       	or	r16, r17
    44e0:	29 f0       	breq	.+10     	; 0x44ec <sim_set_bluetooth+0x6c>
		printf("sim_set_bluetooth: bthost already set\n");
    44e2:	8c eb       	ldi	r24, 0xBC	; 188
    44e4:	99 e0       	ldi	r25, 0x09	; 9
    44e6:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
    44ea:	36 c0       	rjmp	.+108    	; 0x4558 <sim_set_bluetooth+0xd8>
		} else {
		printf("sim_set_bluetooth: setting up\n");
    44ec:	82 ee       	ldi	r24, 0xE2	; 226
    44ee:	99 e0       	ldi	r25, 0x09	; 9
    44f0:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
		sim_tx(cmd_sethost,strlen(cmd_sethost)); // set BT hostname
    44f4:	67 e1       	ldi	r22, 0x17	; 23
    44f6:	70 e0       	ldi	r23, 0x00	; 0
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	9a e0       	ldi	r25, 0x0A	; 10
    44fc:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
		sim_read(sim_rxbuf,"OK\r\n",5,sizeof(sim_rxbuf));
    4500:	22 e3       	ldi	r18, 0x32	; 50
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	45 e0       	ldi	r20, 0x05	; 5
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	6f ea       	ldi	r22, 0xAF	; 175
    450a:	76 e0       	ldi	r23, 0x06	; 6
    450c:	ce 01       	movw	r24, r28
    450e:	01 96       	adiw	r24, 0x01	; 1
    4510:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
		
		sim_tx(cmd_btsppcfg,strlen(cmd_btsppcfg)); // disable multiconnections
    4514:	61 e1       	ldi	r22, 0x11	; 17
    4516:	70 e0       	ldi	r23, 0x00	; 0
    4518:	88 e1       	ldi	r24, 0x18	; 24
    451a:	9a e0       	ldi	r25, 0x0A	; 10
    451c:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
		sim_read(sim_rxbuf,"OK\r\n",5,sizeof(sim_rxbuf));
    4520:	22 e3       	ldi	r18, 0x32	; 50
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	45 e0       	ldi	r20, 0x05	; 5
    4526:	50 e0       	ldi	r21, 0x00	; 0
    4528:	6f ea       	ldi	r22, 0xAF	; 175
    452a:	76 e0       	ldi	r23, 0x06	; 6
    452c:	ce 01       	movw	r24, r28
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
		
		sim_tx(cmd_btpaircfg,strlen(cmd_btpaircfg)); // set BT pairing mode and pincode (needs bt reboot)
    4534:	64 e1       	ldi	r22, 0x14	; 20
    4536:	70 e0       	ldi	r23, 0x00	; 0
    4538:	8a e2       	ldi	r24, 0x2A	; 42
    453a:	9a e0       	ldi	r25, 0x0A	; 10
    453c:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
		sim_read(sim_rxbuf,"OK\r\n",5,sizeof(sim_rxbuf));
    4540:	22 e3       	ldi	r18, 0x32	; 50
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	45 e0       	ldi	r20, 0x05	; 5
    4546:	50 e0       	ldi	r21, 0x00	; 0
    4548:	6f ea       	ldi	r22, 0xAF	; 175
    454a:	76 e0       	ldi	r23, 0x06	; 6
    454c:	ce 01       	movw	r24, r28
    454e:	01 96       	adiw	r24, 0x01	; 1
    4550:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
		sim_rxflush();
    4554:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <sim_rxflush>
	}
	return 1;
}
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	e2 96       	adiw	r28, 0x32	; 50
    455c:	0f b6       	in	r0, 0x3f	; 63
    455e:	f8 94       	cli
    4560:	de bf       	out	0x3e, r29	; 62
    4562:	0f be       	out	0x3f, r0	; 63
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	08 95       	ret

00004570 <sim_start_bluetooth>:


void sim_start_bluetooth(void)
{
	printf("sim_start_bluetooth\n");
    4570:	8f e3       	ldi	r24, 0x3F	; 63
    4572:	9a e0       	ldi	r25, 0x0A	; 10
    4574:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
	sysval.bluetooth_status=sim_read_bluetooth_status();
    4578:	a7 de       	rcall	.-690    	; 0x42c8 <sim_read_bluetooth_status>
    457a:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <sysval+0xa2>
	if(sysval.bluetooth_status==0) {
		sim_set_bluetooth();
		sim_bluetooth_power_on();		
    457e:	81 11       	cpse	r24, r1
    4580:	0c c0       	rjmp	.+24     	; 0x459a <sim_start_bluetooth+0x2a>
	    delay_ms(500);
    4582:	7e df       	rcall	.-260    	; 0x4480 <sim_set_bluetooth>
    4584:	fe de       	rcall	.-516    	; 0x4382 <sim_bluetooth_power_on>
    4586:	60 e7       	ldi	r22, 0x70	; 112
    4588:	7e e5       	ldi	r23, 0x5E	; 94
    458a:	89 e0       	ldi	r24, 0x09	; 9
	    wdt_reset();	
    458c:	90 e0       	ldi	r25, 0x00	; 0
	    sysval.bluetooth_status=sim_read_bluetooth_status();
    458e:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
    4592:	a8 95       	wdr
    4594:	99 de       	rcall	.-718    	; 0x42c8 <sim_read_bluetooth_status>
	}
	printf("Bluetooth status=%d\n",sysval.bluetooth_status);
    4596:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <sysval+0xa2>
    459a:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <sysval+0xa2>
    459e:	1f 92       	push	r1
    45a0:	8f 93       	push	r24
    45a2:	83 e5       	ldi	r24, 0x53	; 83
    45a4:	9a e0       	ldi	r25, 0x0A	; 10
    45a6:	9f 93       	push	r25
    45a8:	8f 93       	push	r24
}
    45aa:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	08 95       	ret

000045b8 <sim_bluetooth_connect>:

int sim_bluetooth_connect(void)
{
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	cd b7       	in	r28, 0x3d	; 61
    45be:	de b7       	in	r29, 0x3e	; 62
    45c0:	a0 97       	sbiw	r28, 0x20	; 32
    45c2:	0f b6       	in	r0, 0x3f	; 63
    45c4:	f8 94       	cli
    45c6:	de bf       	out	0x3e, r29	; 62
    45c8:	0f be       	out	0x3f, r0	; 63
    45ca:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[32];
	char *cmd="AT+BTACPT=1\r"; // accept connection
	printf("sim_bluetooth_connect\n");
    45cc:	88 e6       	ldi	r24, 0x68	; 104
    45ce:	9a e0       	ldi	r25, 0x0A	; 10
    45d0:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
	sim_tx(cmd,strlen(cmd));
    45d4:	6c e0       	ldi	r22, 0x0C	; 12
    45d6:	70 e0       	ldi	r23, 0x00	; 0
    45d8:	8e e7       	ldi	r24, 0x7E	; 126
    45da:	9a e0       	ldi	r25, 0x0A	; 10
    45dc:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
	sim_read(sim_rxbuf,cmd,10,sizeof(sim_rxbuf)); // read echo
    45e0:	20 e2       	ldi	r18, 0x20	; 32
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	4a e0       	ldi	r20, 0x0A	; 10
    45e6:	50 e0       	ldi	r21, 0x00	; 0
    45e8:	6e e7       	ldi	r22, 0x7E	; 126
    45ea:	7a e0       	ldi	r23, 0x0A	; 10
    45ec:	ce 01       	movw	r24, r28
    45ee:	01 96       	adiw	r24, 0x01	; 1
    45f0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
	return (uint8_t)sim_read(sim_rxbuf,"OK\r\n",40,sizeof(sim_rxbuf));
    45f4:	20 e2       	ldi	r18, 0x20	; 32
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	48 e2       	ldi	r20, 0x28	; 40
    45fa:	50 e0       	ldi	r21, 0x00	; 0
    45fc:	6f ea       	ldi	r22, 0xAF	; 175
    45fe:	76 e0       	ldi	r23, 0x06	; 6
    4600:	ce 01       	movw	r24, r28
    4602:	01 96       	adiw	r24, 0x01	; 1
    4604:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
}
    4608:	99 27       	eor	r25, r25
    460a:	a0 96       	adiw	r28, 0x20	; 32
    460c:	0f b6       	in	r0, 0x3f	; 63
    460e:	f8 94       	cli
    4610:	de bf       	out	0x3e, r29	; 62
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	cd bf       	out	0x3d, r28	; 61
    4616:	df 91       	pop	r29
    4618:	cf 91       	pop	r28
    461a:	08 95       	ret

0000461c <sim_bluetooth_read>:

char * sim_bluetooth_read(char *sim_rxbuf, uint16_t maxlen)
{
    461c:	cf 92       	push	r12
    461e:	df 92       	push	r13
    4620:	ef 92       	push	r14
    4622:	ff 92       	push	r15
    4624:	0f 93       	push	r16
    4626:	1f 93       	push	r17
    4628:	cf 93       	push	r28
    462a:	df 93       	push	r29
    462c:	cd b7       	in	r28, 0x3d	; 61
    462e:	de b7       	in	r29, 0x3e	; 62
    4630:	2a 97       	sbiw	r28, 0x0a	; 10
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	de bf       	out	0x3e, r29	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	cd bf       	out	0x3d, r28	; 61
    463c:	e8 2e       	mov	r14, r24
    463e:	f9 2e       	mov	r15, r25
    4640:	6b 01       	movw	r12, r22
	char *sim_bufptr=NULL;
	char *ptr;
	char c;
	uint8_t match;
	int found,bt_ch,bt_len;
	const char *expect[] = { "+BTSPPDATA:", 
    4642:	86 e0       	ldi	r24, 0x06	; 6
    4644:	ee e0       	ldi	r30, 0x0E	; 14
    4646:	f1 e0       	ldi	r31, 0x01	; 1
    4648:	de 01       	movw	r26, r28
    464a:	15 96       	adiw	r26, 0x05	; 5
    464c:	01 90       	ld	r0, Z+
    464e:	0d 92       	st	X+, r0
    4650:	8a 95       	dec	r24
    4652:	e1 f7       	brne	.-8      	; 0x464c <sim_bluetooth_read+0x30>
		                     "+BTDISCONN:",
							 "+BTCONNECT" };
    wdt_reset();
    4654:	a8 95       	wdr
    sim_bufptr=sim_read_multi(sim_rxbuf, expect, 3, 10,maxlen);
    4656:	8b 01       	movw	r16, r22
    4658:	2a e0       	ldi	r18, 0x0A	; 10
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	43 e0       	ldi	r20, 0x03	; 3
    465e:	50 e0       	ldi	r21, 0x00	; 0
    4660:	be 01       	movw	r22, r28
    4662:	6b 5f       	subi	r22, 0xFB	; 251
    4664:	7f 4f       	sbci	r23, 0xFF	; 255
    4666:	8e 2d       	mov	r24, r14
    4668:	0e 94 18 18 	call	0x3030	; 0x3030 <sim_read_multi>
    466c:	8c 01       	movw	r16, r24
	if(sim_bufptr==NULL) return NULL;
    466e:	00 97       	sbiw	r24, 0x00	; 0
    4670:	09 f4       	brne	.+2      	; 0x4674 <sim_bluetooth_read+0x58>
    4672:	80 c0       	rjmp	.+256    	; 0x4774 <sim_bluetooth_read+0x158>
	
	printf("sim_bluetooth_read:%s\n",sim_bufptr);
    4674:	1f 93       	push	r17
    4676:	8f 93       	push	r24
    4678:	8b e8       	ldi	r24, 0x8B	; 139
    467a:	9a e0       	ldi	r25, 0x0A	; 10
    467c:	9f 93       	push	r25
    467e:	8f 93       	push	r24
    4680:	0e 94 a1 2b 	call	0x5742	; 0x5742 <printf>
	
	if(strncasecmp(expect[2],sim_rxbuf,strlen(expect[2])) == 0) {
    4684:	89 85       	ldd	r24, Y+9	; 0x09
    4686:	9a 85       	ldd	r25, Y+10	; 0x0a
    4688:	fc 01       	movw	r30, r24
    468a:	01 90       	ld	r0, Z+
    468c:	00 20       	and	r0, r0
    468e:	e9 f7       	brne	.-6      	; 0x468a <sim_bluetooth_read+0x6e>
    4690:	31 97       	sbiw	r30, 0x01	; 1
    4692:	af 01       	movw	r20, r30
    4694:	48 1b       	sub	r20, r24
    4696:	59 0b       	sbc	r21, r25
    4698:	6e 2d       	mov	r22, r14
    469a:	7f 2d       	mov	r23, r15
    469c:	f5 d7       	rcall	.+4074   	; 0x5688 <strncasecmp>
    469e:	0f 90       	pop	r0
    46a0:	0f 90       	pop	r0
    46a2:	0f 90       	pop	r0
    46a4:	0f 90       	pop	r0
    46a6:	89 2b       	or	r24, r25
    46a8:	89 f4       	brne	.+34     	; 0x46cc <sim_bluetooth_read+0xb0>
		sim_rxflush();
    46aa:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <sim_rxflush>
		if(sysval.bluetooth_connected==0) {
    46ae:	80 91 60 10 	lds	r24, 0x1060	; 0x801060 <sysval+0xa1>
    46b2:	81 11       	cpse	r24, r1
		    sim_bluetooth_connect();
    46b4:	62 c0       	rjmp	.+196    	; 0x477a <sim_bluetooth_read+0x15e>
		    sysval.bluetooth_connected = 1;
    46b6:	80 df       	rcall	.-256    	; 0x45b8 <sim_bluetooth_connect>
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	80 93 60 10 	sts	0x1060, r24	; 0x801060 <sysval+0xa1>
		    printf("sim_bluetooth_read: connect!\n");
    46be:	82 ea       	ldi	r24, 0xA2	; 162
    46c0:	9a e0       	ldi	r25, 0x0A	; 10
    46c2:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
		}
		return NULL;
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	90 e0       	ldi	r25, 0x00	; 0
	} else if(strncasecmp(expect[1],sim_bufptr,strlen(expect[1])) == 0) {
    46ca:	62 c0       	rjmp	.+196    	; 0x4790 <sim_bluetooth_read+0x174>
    46cc:	8f 81       	ldd	r24, Y+7	; 0x07
    46ce:	98 85       	ldd	r25, Y+8	; 0x08
    46d0:	fc 01       	movw	r30, r24
    46d2:	01 90       	ld	r0, Z+
    46d4:	00 20       	and	r0, r0
    46d6:	e9 f7       	brne	.-6      	; 0x46d2 <sim_bluetooth_read+0xb6>
    46d8:	31 97       	sbiw	r30, 0x01	; 1
    46da:	af 01       	movw	r20, r30
    46dc:	48 1b       	sub	r20, r24
    46de:	59 0b       	sbc	r21, r25
    46e0:	b8 01       	movw	r22, r16
    46e2:	d2 d7       	rcall	.+4004   	; 0x5688 <strncasecmp>
    46e4:	89 2b       	or	r24, r25
		sim_rxflush();
    46e6:	59 f4       	brne	.+22     	; 0x46fe <sim_bluetooth_read+0xe2>
    46e8:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <sim_rxflush>
		sysval.bluetooth_connected = 0;
    46ec:	10 92 60 10 	sts	0x1060, r1	; 0x801060 <sysval+0xa1>
		printf("sim_bluetooth_read: disconnect!\n");
    46f0:	8f eb       	ldi	r24, 0xBF	; 191
    46f2:	9a e0       	ldi	r25, 0x0A	; 10
    46f4:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <puts>
		return NULL;
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	90 e0       	ldi	r25, 0x00	; 0
	}	
	if(sim_read(sim_rxbuf,"\r\n",7,maxlen) == 0) return NULL;
    46fc:	49 c0       	rjmp	.+146    	; 0x4790 <sim_bluetooth_read+0x174>
    46fe:	96 01       	movw	r18, r12
    4700:	47 e0       	ldi	r20, 0x07	; 7
    4702:	50 e0       	ldi	r21, 0x00	; 0
    4704:	65 e4       	ldi	r22, 0x45	; 69
    4706:	7b e0       	ldi	r23, 0x0B	; 11
    4708:	8e 2d       	mov	r24, r14
    470a:	9f 2d       	mov	r25, r15
    470c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    4710:	89 2b       	or	r24, r25
	
	sim_bufptr=sim_rxbuf;
	
	// response looks like: +CREG: 0,1\r\nOK
	ptr=sim_rxbuf;
	found=sscanf(ptr,"%d,%d",&bt_ch,&bt_len);
    4712:	b1 f1       	breq	.+108    	; 0x4780 <sim_bluetooth_read+0x164>
    4714:	ce 01       	movw	r24, r28
    4716:	03 96       	adiw	r24, 0x03	; 3
    4718:	9f 93       	push	r25
    471a:	8f 93       	push	r24
    471c:	02 97       	sbiw	r24, 0x02	; 2
    471e:	9f 93       	push	r25
    4720:	8f 93       	push	r24
    4722:	8e e1       	ldi	r24, 0x1E	; 30
    4724:	97 e0       	ldi	r25, 0x07	; 7
    4726:	9f 93       	push	r25
    4728:	8f 93       	push	r24
    472a:	ff 92       	push	r15
    472c:	ef 92       	push	r14
    472e:	0e 94 67 2c 	call	0x58ce	; 0x58ce <sscanf>
	if(found!=2) {
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	02 97       	sbiw	r24, 0x02	; 2
    473e:	19 f5       	brne	.+70     	; 0x4786 <sim_bluetooth_read+0x16a>
    4740:	ee 2d       	mov	r30, r14
    4742:	ff 2d       	mov	r31, r15
    4744:	30 e0       	ldi	r19, 0x00	; 0
		return NULL;
	}
	
	match=0;
	while((c=*sim_bufptr) != '\r') {
		if(c==',') match++;
    4746:	06 c0       	rjmp	.+12     	; 0x4754 <sim_bluetooth_read+0x138>
    4748:	2c 32       	cpi	r18, 0x2C	; 44
    474a:	09 f4       	brne	.+2      	; 0x474e <sim_bluetooth_read+0x132>
		sim_bufptr++;
    474c:	3f 5f       	subi	r19, 0xFF	; 255
		if(match==2) break;
    474e:	df 01       	movw	r26, r30
    4750:	32 30       	cpi	r19, 0x02	; 2
    4752:	31 f0       	breq	.+12     	; 0x4760 <sim_bluetooth_read+0x144>
    4754:	8e 2f       	mov	r24, r30
	if(found!=2) {
		return NULL;
	}
	
	match=0;
	while((c=*sim_bufptr) != '\r') {
    4756:	9f 2f       	mov	r25, r31
    4758:	21 91       	ld	r18, Z+
    475a:	2d 30       	cpi	r18, 0x0D	; 13
    475c:	a9 f7       	brne	.-22     	; 0x4748 <sim_bluetooth_read+0x12c>
		if(match==2) break;
	}
	
	// remove "\r\n" after message:
	ptr=sim_bufptr;
	while((c=*ptr) != '\r') {
    475e:	18 c0       	rjmp	.+48     	; 0x4790 <sim_bluetooth_read+0x174>
    4760:	80 81       	ld	r24, Z
    4762:	8d 30       	cpi	r24, 0x0D	; 13
    4764:	99 f0       	breq	.+38     	; 0x478c <sim_bluetooth_read+0x170>
    4766:	31 96       	adiw	r30, 0x01	; 1
    4768:	81 91       	ld	r24, Z+
    476a:	8d 30       	cpi	r24, 0x0D	; 13
	}
	
	match=0;
	while((c=*sim_bufptr) != '\r') {
		if(c==',') match++;
		sim_bufptr++;
    476c:	e9 f7       	brne	.-6      	; 0x4768 <sim_bluetooth_read+0x14c>
    476e:	8a 2f       	mov	r24, r26
    4770:	9b 2f       	mov	r25, r27
	const char *expect[] = { "+BTSPPDATA:", 
		                     "+BTDISCONN:",
							 "+BTCONNECT" };
    wdt_reset();
    sim_bufptr=sim_read_multi(sim_rxbuf, expect, 3, 10,maxlen);
	if(sim_bufptr==NULL) return NULL;
    4772:	0e c0       	rjmp	.+28     	; 0x4790 <sim_bluetooth_read+0x174>
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
		if(sysval.bluetooth_connected==0) {
		    sim_bluetooth_connect();
		    sysval.bluetooth_connected = 1;
		    printf("sim_bluetooth_read: connect!\n");
		}
		return NULL;
    4778:	0b c0       	rjmp	.+22     	; 0x4790 <sim_bluetooth_read+0x174>
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	90 e0       	ldi	r25, 0x00	; 0
		sim_rxflush();
		sysval.bluetooth_connected = 0;
		printf("sim_bluetooth_read: disconnect!\n");
		return NULL;
	}	
	if(sim_read(sim_rxbuf,"\r\n",7,maxlen) == 0) return NULL;
    477e:	08 c0       	rjmp	.+16     	; 0x4790 <sim_bluetooth_read+0x174>
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	90 e0       	ldi	r25, 0x00	; 0
	
	// response looks like: +CREG: 0,1\r\nOK
	ptr=sim_rxbuf;
	found=sscanf(ptr,"%d,%d",&bt_ch,&bt_len);
	if(found!=2) {
		return NULL;
    4784:	05 c0       	rjmp	.+10     	; 0x4790 <sim_bluetooth_read+0x174>
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	match=0;
	while((c=*sim_bufptr) != '\r') {
		if(c==',') match++;
		sim_bufptr++;
    478a:	02 c0       	rjmp	.+4      	; 0x4790 <sim_bluetooth_read+0x174>
    478c:	8e 2f       	mov	r24, r30
			break;
		}
		ptr++;
	}
	return sim_bufptr;
}
    478e:	9b 2f       	mov	r25, r27
    4790:	2a 96       	adiw	r28, 0x0a	; 10
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	df 91       	pop	r29
    479e:	cf 91       	pop	r28
    47a0:	1f 91       	pop	r17
    47a2:	0f 91       	pop	r16
    47a4:	ff 90       	pop	r15
    47a6:	ef 90       	pop	r14
    47a8:	df 90       	pop	r13
    47aa:	cf 90       	pop	r12
    47ac:	08 95       	ret

000047ae <sim_bluetooth_write>:

uint8_t sim_bluetooth_write(const char *msg, uint16_t size)
{
    47ae:	2f 92       	push	r2
    47b0:	3f 92       	push	r3
    47b2:	4f 92       	push	r4
    47b4:	5f 92       	push	r5
    47b6:	6f 92       	push	r6
    47b8:	7f 92       	push	r7
    47ba:	8f 92       	push	r8
    47bc:	9f 92       	push	r9
    47be:	af 92       	push	r10
    47c0:	bf 92       	push	r11
    47c2:	cf 92       	push	r12
    47c4:	df 92       	push	r13
    47c6:	ef 92       	push	r14
    47c8:	ff 92       	push	r15
    47ca:	0f 93       	push	r16
    47cc:	1f 93       	push	r17
    47ce:	cf 93       	push	r28
    47d0:	df 93       	push	r29
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	c2 5a       	subi	r28, 0xA2	; 162
    47d8:	d1 09       	sbc	r29, r1
    47da:	0f b6       	in	r0, 0x3f	; 63
    47dc:	f8 94       	cli
    47de:	de bf       	out	0x3e, r29	; 62
    47e0:	0f be       	out	0x3f, r0	; 63
    47e2:	cd bf       	out	0x3d, r28	; 61
	char sim_rxbuf[128], txbuf[32];
	uint8_t txlen;
	uint16_t oldidx=0,idx=0;
	
	// send line by line:
	while(idx < size) {
    47e4:	61 15       	cp	r22, r1
    47e6:	71 05       	cpc	r23, r1
    47e8:	09 f4       	brne	.+2      	; 0x47ec <sim_bluetooth_write+0x3e>
    47ea:	62 c0       	rjmp	.+196    	; 0x48b0 <sim_bluetooth_write+0x102>
    47ec:	6b 01       	movw	r12, r22
    47ee:	4c 01       	movw	r8, r24
    47f0:	7c 01       	movw	r14, r24
    47f2:	00 e0       	ldi	r16, 0x00	; 0
    47f4:	10 e0       	ldi	r17, 0x00	; 0
    47f6:	61 2c       	mov	r6, r1
    47f8:	71 2c       	mov	r7, r1
		c=msg[idx++];
		if(c=='\n') {
			txlen=sprintf(txbuf,"AT+BTSPPSEND=%d\r",idx-oldidx);
    47fa:	0f 2e       	mov	r0, r31
    47fc:	f2 e0       	ldi	r31, 0x02	; 2
    47fe:	2f 2e       	mov	r2, r31
    4800:	fb e0       	ldi	r31, 0x0B	; 11
    4802:	3f 2e       	mov	r3, r31
    4804:	f0 2d       	mov	r31, r0
    4806:	2e 01       	movw	r4, r28
    4808:	81 e8       	ldi	r24, 0x81	; 129
    480a:	48 0e       	add	r4, r24
    480c:	51 1c       	adc	r5, r1
	uint8_t txlen;
	uint16_t oldidx=0,idx=0;
	
	// send line by line:
	while(idx < size) {
		c=msg[idx++];
    480e:	0f 5f       	subi	r16, 0xFF	; 255
    4810:	1f 4f       	sbci	r17, 0xFF	; 255
    4812:	f7 01       	movw	r30, r14
    4814:	81 91       	ld	r24, Z+
    4816:	7f 01       	movw	r14, r30
		if(c=='\n') {
    4818:	8a 30       	cpi	r24, 0x0A	; 10
    481a:	09 f0       	breq	.+2      	; 0x481e <sim_bluetooth_write+0x70>
    481c:	45 c0       	rjmp	.+138    	; 0x48a8 <sim_bluetooth_write+0xfa>
			txlen=sprintf(txbuf,"AT+BTSPPSEND=%d\r",idx-oldidx);
    481e:	58 01       	movw	r10, r16
    4820:	a6 18       	sub	r10, r6
    4822:	b7 08       	sbc	r11, r7
    4824:	bf 92       	push	r11
    4826:	af 92       	push	r10
    4828:	3f 92       	push	r3
    482a:	2f 92       	push	r2
    482c:	5f 92       	push	r5
    482e:	4f 92       	push	r4
    4830:	f2 d7       	rcall	.+4068   	; 0x5816 <sprintf>
    4832:	cf 55       	subi	r28, 0x5F	; 95
    4834:	df 4f       	sbci	r29, 0xFF	; 255
    4836:	99 83       	std	Y+1, r25	; 0x01
    4838:	88 83       	st	Y, r24
    483a:	c1 5a       	subi	r28, 0xA1	; 161
    483c:	d0 40       	sbci	r29, 0x00	; 0
			printf("sim_bluetooth_write\n");
    483e:	83 e1       	ldi	r24, 0x13	; 19
    4840:	9b e0       	ldi	r25, 0x0B	; 11
    4842:	b9 d7       	rcall	.+3954   	; 0x57b6 <puts>
			sim_tx(txbuf,txlen);
    4844:	cf 55       	subi	r28, 0x5F	; 95
    4846:	df 4f       	sbci	r29, 0xFF	; 255
    4848:	68 81       	ld	r22, Y
    484a:	79 81       	ldd	r23, Y+1	; 0x01
    484c:	c1 5a       	subi	r28, 0xA1	; 161
    484e:	d0 40       	sbci	r29, 0x00	; 0
    4850:	77 27       	eor	r23, r23
    4852:	c2 01       	movw	r24, r4
    4854:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
			sim_read(sim_rxbuf,"> ",10,sizeof(sim_rxbuf)); // read prompt
    4858:	20 e8       	ldi	r18, 0x80	; 128
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	4a e0       	ldi	r20, 0x0A	; 10
    485e:	50 e0       	ldi	r21, 0x00	; 0
    4860:	67 e2       	ldi	r22, 0x27	; 39
    4862:	7b e0       	ldi	r23, 0x0B	; 11
    4864:	ce 01       	movw	r24, r28
    4866:	01 96       	adiw	r24, 0x01	; 1
    4868:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
			sim_tx(&msg[oldidx],idx-oldidx);
    486c:	b5 01       	movw	r22, r10
    486e:	c4 01       	movw	r24, r8
    4870:	86 0d       	add	r24, r6
    4872:	97 1d       	adc	r25, r7
    4874:	0e 94 bc 18 	call	0x3178	; 0x3178 <sim_tx>
			delay_ms(500);
    4878:	60 e7       	ldi	r22, 0x70	; 112
    487a:	7e e5       	ldi	r23, 0x5E	; 94
    487c:	89 e0       	ldi	r24, 0x09	; 9
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	0e 94 29 01 	call	0x252	; 0x252 <delayloop32>
			wdt_reset();
    4884:	a8 95       	wdr
			sim_read(sim_rxbuf,"SEND OK\r\n",50,sizeof(sim_rxbuf));
    4886:	20 e8       	ldi	r18, 0x80	; 128
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	42 e3       	ldi	r20, 0x32	; 50
    488c:	50 e0       	ldi	r21, 0x00	; 0
    488e:	6a e2       	ldi	r22, 0x2A	; 42
    4890:	7b e0       	ldi	r23, 0x0B	; 11
    4892:	ce 01       	movw	r24, r28
    4894:	01 96       	adiw	r24, 0x01	; 1
    4896:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sim_read>
    489a:	0f 90       	pop	r0
    489c:	0f 90       	pop	r0
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	0f 90       	pop	r0
    48a4:	0f 90       	pop	r0
			oldidx=idx;
    48a6:	38 01       	movw	r6, r16
	char sim_rxbuf[128], txbuf[32];
	uint8_t txlen;
	uint16_t oldidx=0,idx=0;
	
	// send line by line:
	while(idx < size) {
    48a8:	c0 16       	cp	r12, r16
    48aa:	d1 06       	cpc	r13, r17
    48ac:	09 f0       	breq	.+2      	; 0x48b0 <sim_bluetooth_write+0x102>
    48ae:	af cf       	rjmp	.-162    	; 0x480e <sim_bluetooth_write+0x60>
			sim_read(sim_rxbuf,"SEND OK\r\n",50,sizeof(sim_rxbuf));
			oldidx=idx;
		}
	}
	return 1;
}
    48b0:	81 e0       	ldi	r24, 0x01	; 1
    48b2:	ce 55       	subi	r28, 0x5E	; 94
    48b4:	df 4f       	sbci	r29, 0xFF	; 255
    48b6:	0f b6       	in	r0, 0x3f	; 63
    48b8:	f8 94       	cli
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	0f be       	out	0x3f, r0	; 63
    48be:	cd bf       	out	0x3d, r28	; 61
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	1f 91       	pop	r17
    48c6:	0f 91       	pop	r16
    48c8:	ff 90       	pop	r15
    48ca:	ef 90       	pop	r14
    48cc:	df 90       	pop	r13
    48ce:	cf 90       	pop	r12
    48d0:	bf 90       	pop	r11
    48d2:	af 90       	pop	r10
    48d4:	9f 90       	pop	r9
    48d6:	8f 90       	pop	r8
    48d8:	7f 90       	pop	r7
    48da:	6f 90       	pop	r6
    48dc:	5f 90       	pop	r5
    48de:	4f 90       	pop	r4
    48e0:	3f 90       	pop	r3
    48e2:	2f 90       	pop	r2
    48e4:	08 95       	ret

000048e6 <sim_stop_bluetooth>:

void sim_stop_bluetooth(void)
{
	printf("sim_stop_bluetooth\n");
    48e6:	82 e8       	ldi	r24, 0x82	; 130
    48e8:	99 e0       	ldi	r25, 0x09	; 9
    48ea:	65 d7       	rcall	.+3786   	; 0x57b6 <puts>
	if(sysval.bluetooth_connected) {
    48ec:	80 91 60 10 	lds	r24, 0x1060	; 0x801060 <sysval+0xa1>
    48f0:	88 23       	and	r24, r24
    48f2:	29 f0       	breq	.+10     	; 0x48fe <sim_stop_bluetooth+0x18>
		sim_bluetooth_write("bye, (busy 15sec)\r\n",19);
    48f4:	63 e1       	ldi	r22, 0x13	; 19
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	84 e3       	ldi	r24, 0x34	; 52
    48fa:	9b e0       	ldi	r25, 0x0B	; 11
	}
	sysval.bluetooth_connected=0;
    48fc:	58 df       	rcall	.-336    	; 0x47ae <sim_bluetooth_write>
	sysval.bluetooth_status=sim_read_bluetooth_status();
    48fe:	10 92 60 10 	sts	0x1060, r1	; 0x801060 <sysval+0xa1>
    4902:	e2 dc       	rcall	.-1596   	; 0x42c8 <sim_read_bluetooth_status>
    4904:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <sysval+0xa2>
	if(sysval.bluetooth_status==0) {
		printf("Bluetooth already off\n");
    4908:	81 11       	cpse	r24, r1
    490a:	04 c0       	rjmp	.+8      	; 0x4914 <sim_stop_bluetooth+0x2e>
		return;
    490c:	88 e4       	ldi	r24, 0x48	; 72
	}
	sim_bluetooth_power_off();
    490e:	9b e0       	ldi	r25, 0x0B	; 11
    4910:	52 c7       	rjmp	.+3748   	; 0x57b6 <puts>
	sysval.bluetooth_status=sim_read_bluetooth_status();
    4912:	08 95       	ret
    4914:	7d dd       	rcall	.-1286   	; 0x4410 <sim_bluetooth_power_off>
    4916:	d8 dc       	rcall	.-1616   	; 0x42c8 <sim_read_bluetooth_status>
    4918:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <sysval+0xa2>
	printf("Bluetooth status=%d\n",sysval.bluetooth_status);
    491c:	99 27       	eor	r25, r25
    491e:	9f 93       	push	r25
    4920:	8f 93       	push	r24
    4922:	83 e5       	ldi	r24, 0x53	; 83
    4924:	9a e0       	ldi	r25, 0x0A	; 10
    4926:	9f 93       	push	r25
    4928:	8f 93       	push	r24
    492a:	0b d7       	rcall	.+3606   	; 0x5742 <printf>
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	08 95       	ret

00004936 <task_every_second>:

/* 
 * Task for every second:
 */
void task_every_second(void)
{
    4936:	08 95       	ret

00004938 <task_every_5second>:

/*
 * Task for every 5 seconds:
 */
void task_every_5second(void)
{
    4938:	2f 92       	push	r2
    493a:	3f 92       	push	r3
    493c:	4f 92       	push	r4
    493e:	5f 92       	push	r5
    4940:	6f 92       	push	r6
    4942:	7f 92       	push	r7
    4944:	8f 92       	push	r8
    4946:	9f 92       	push	r9
    4948:	af 92       	push	r10
    494a:	bf 92       	push	r11
    494c:	cf 92       	push	r12
    494e:	df 92       	push	r13
    4950:	ef 92       	push	r14
    4952:	ff 92       	push	r15
    4954:	0f 93       	push	r16
    4956:	1f 93       	push	r17
    4958:	cf 93       	push	r28
    495a:	df 93       	push	r29
    495c:	cd b7       	in	r28, 0x3d	; 61
    495e:	de b7       	in	r29, 0x3e	; 62
    4960:	a3 97       	sbiw	r28, 0x23	; 35
    4962:	0f b6       	in	r0, 0x3f	; 63
    4964:	f8 94       	cli
    4966:	de bf       	out	0x3e, r29	; 62
    4968:	0f be       	out	0x3f, r0	; 63
    496a:	cd bf       	out	0x3d, r28	; 61
    int16_t vpv=0, icharge=0, vbatt=0, iload=0, soc=0, socc=0, temp=0;
	uint16_t ydayl=0;
    int32_t pin=0,pout=0, Ah=0;
    uint16_t dt;

    scc_monitor();
    496c:	0e 94 9f 01 	call	0x33e	; 0x33e <scc_monitor>
    4970:	90 90 54 10 	lds	r9, 0x1054	; 0x801054 <sysval+0x95>
    4974:	20 91 53 10 	lds	r18, 0x1053	; 0x801053 <sysval+0x94>
    4978:	2c 83       	std	Y+4, r18	; 0x04
    497a:	30 91 55 10 	lds	r19, 0x1055	; 0x801055 <sysval+0x96>
    497e:	f0 91 56 10 	lds	r31, 0x1056	; 0x801056 <sysval+0x97>
    4982:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <sysval+0x98>
    4986:	40 91 58 10 	lds	r20, 0x1058	; 0x801058 <sysval+0x99>
    498a:	4d 8f       	std	Y+29, r20	; 0x1d
    498c:	0f 2e       	mov	r0, r31
    498e:	ff eb       	ldi	r31, 0xBF	; 191
    4990:	ef 2e       	mov	r14, r31
    4992:	ff e0       	ldi	r31, 0x0F	; 15
    4994:	ff 2e       	mov	r15, r31
    4996:	f0 2d       	mov	r31, r0
    4998:	87 01       	movw	r16, r14
    499a:	21 2c       	mov	r2, r1
    499c:	31 2c       	mov	r3, r1
void task_every_5second(void)
{
    int s,nof_scc=0;
    int16_t vpv=0, icharge=0, vbatt=0, iload=0, soc=0, socc=0, temp=0;
	uint16_t ydayl=0;
    int32_t pin=0,pout=0, Ah=0;
    499e:	19 8e       	std	Y+25, r1	; 0x19
    49a0:	1a 8e       	std	Y+26, r1	; 0x1a
    49a2:	1b 8e       	std	Y+27, r1	; 0x1b
    49a4:	1c 8e       	std	Y+28, r1	; 0x1c
    49a6:	41 2c       	mov	r4, r1
    49a8:	51 2c       	mov	r5, r1
    49aa:	32 01       	movw	r6, r4
    49ac:	1d 8a       	std	Y+21, r1	; 0x15
    49ae:	1e 8a       	std	Y+22, r1	; 0x16
    49b0:	1f 8a       	std	Y+23, r1	; 0x17
    49b2:	18 8e       	std	Y+24, r1	; 0x18
 */
void task_every_5second(void)
{
    int s,nof_scc=0;
    int16_t vpv=0, icharge=0, vbatt=0, iload=0, soc=0, socc=0, temp=0;
	uint16_t ydayl=0;
    49b4:	1c 8a       	std	Y+20, r1	; 0x14
    49b6:	1b 8a       	std	Y+19, r1	; 0x13
 * Task for every 5 seconds:
 */
void task_every_5second(void)
{
    int s,nof_scc=0;
    int16_t vpv=0, icharge=0, vbatt=0, iload=0, soc=0, socc=0, temp=0;
    49b8:	1a 8a       	std	Y+18, r1	; 0x12
    49ba:	19 8a       	std	Y+17, r1	; 0x11
    49bc:	18 8a       	std	Y+16, r1	; 0x10
    49be:	1f 86       	std	Y+15, r1	; 0x0f
    49c0:	1e 86       	std	Y+14, r1	; 0x0e
    49c2:	1d 86       	std	Y+13, r1	; 0x0d
    49c4:	1c 86       	std	Y+12, r1	; 0x0c
    49c6:	1b 86       	std	Y+11, r1	; 0x0b
    49c8:	1a 86       	std	Y+10, r1	; 0x0a
    49ca:	19 86       	std	Y+9, r1	; 0x09
    49cc:	1e 82       	std	Y+6, r1	; 0x06
    49ce:	1d 82       	std	Y+5, r1	; 0x05
    49d0:	18 86       	std	Y+8, r1	; 0x08
    49d2:	1f 82       	std	Y+7, r1	; 0x07
/*
 * Task for every 5 seconds:
 */
void task_every_5second(void)
{
    int s,nof_scc=0;
    49d4:	1a 82       	std	Y+2, r1	; 0x02
    49d6:	19 82       	std	Y+1, r1	; 0x01
    int32_t pin=0,pout=0, Ah=0;
    uint16_t dt;

    scc_monitor();
    for(s=0;s<MAX_NOF_SCC;s++) {
		sysval.load_state &= ~(3<<(s*2)); // reset bit pair
    49d8:	0f 2e       	mov	r0, r31
    49da:	f3 e0       	ldi	r31, 0x03	; 3
    49dc:	af 2e       	mov	r10, r31
    49de:	b1 2c       	mov	r11, r1
    49e0:	f0 2d       	mov	r31, r0
            sysval.Door_open += sysval.scc_door[s];
			ydayl   += sysval.scc_ydayl[s];
        } else {
			// fill SCC values with errors or zeros:
			sysval.scc_loadstate[s] = 0x2;
			sysval.scc_solarstate[s] = 0x3;
    49e2:	2f 2f       	mov	r18, r31
    49e4:	cc 80       	ldd	r12, Y+4	; 0x04
    49e6:	83 2e       	mov	r8, r19
    int32_t pin=0,pout=0, Ah=0;
    uint16_t dt;

    scc_monitor();
    for(s=0;s<MAX_NOF_SCC;s++) {
		sysval.load_state &= ~(3<<(s*2)); // reset bit pair
    49e8:	d2 2c       	mov	r13, r2
    49ea:	a5 01       	movw	r20, r10
    49ec:	02 2c       	mov	r0, r2
    49ee:	02 c0       	rjmp	.+4      	; 0x49f4 <task_every_5second+0xbc>
    49f0:	44 0f       	add	r20, r20
    49f2:	55 1f       	adc	r21, r21
    49f4:	0a 94       	dec	r0
    49f6:	e2 f7       	brpl	.-8      	; 0x49f0 <task_every_5second+0xb8>
    49f8:	40 95       	com	r20
    49fa:	94 22       	and	r9, r20
		sysval.solar_state &= ~(3<<(s*2)); // reset bit pair
    49fc:	c4 22       	and	r12, r20
		sysval.batt_state &= ~(3<<(s*2)); // reset bit pair
    49fe:	84 22       	and	r8, r20
		sysval.sys_state &= ~(3<<(s*2)); // reset bit pair
    4a00:	24 23       	and	r18, r20
    4a02:	2b 83       	std	Y+3, r18	; 0x03
		sysval.day_state &= ~(3<<(s*2)); // reset bit pair
    4a04:	84 23       	and	r24, r20
    4a06:	8c 83       	std	Y+4, r24	; 0x04
    4a08:	f8 01       	movw	r30, r16
		
        if(sysval.scc_sysstate[s] & 0x80) { // valid SCC?
    4a0a:	84 89       	ldd	r24, Z+20	; 0x14
    4a0c:	88 23       	and	r24, r24
    4a0e:	0c f0       	brlt	.+2      	; 0x4a12 <task_every_5second+0xda>
    4a10:	90 c0       	rjmp	.+288    	; 0x4b32 <task_every_5second+0x1fa>
            nof_scc++;
    4a12:	89 81       	ldd	r24, Y+1	; 0x01
    4a14:	9a 81       	ldd	r25, Y+2	; 0x02
    4a16:	01 96       	adiw	r24, 0x01	; 1
    4a18:	9a 83       	std	Y+2, r25	; 0x02
    4a1a:	89 83       	std	Y+1, r24	; 0x01
            soc     += (int16_t)sysval.scc_soc[s];
    4a1c:	80 a5       	ldd	r24, Z+40	; 0x28
    4a1e:	ad 85       	ldd	r26, Y+13	; 0x0d
    4a20:	be 85       	ldd	r27, Y+14	; 0x0e
    4a22:	a8 0f       	add	r26, r24
    4a24:	b1 1d       	adc	r27, r1
    4a26:	be 87       	std	Y+14, r27	; 0x0e
    4a28:	ad 87       	std	Y+13, r26	; 0x0d
			socc    += (int16_t)sysval.scc_socc[s];
    4a2a:	84 a5       	ldd	r24, Z+44	; 0x2c
    4a2c:	2f 85       	ldd	r18, Y+15	; 0x0f
    4a2e:	38 89       	ldd	r19, Y+16	; 0x10
    4a30:	28 0f       	add	r18, r24
    4a32:	31 1d       	adc	r19, r1
    4a34:	38 8b       	std	Y+16, r19	; 0x10
    4a36:	2f 87       	std	Y+15, r18	; 0x0f
            temp    += (int16_t)sysval.scc_temp[s];
    4a38:	80 a9       	ldd	r24, Z+48	; 0x30
    4a3a:	49 89       	ldd	r20, Y+17	; 0x11
    4a3c:	5a 89       	ldd	r21, Y+18	; 0x12
    4a3e:	48 0f       	add	r20, r24
    4a40:	51 1d       	adc	r21, r1
    4a42:	5a 8b       	std	Y+18, r21	; 0x12
    4a44:	49 8b       	std	Y+17, r20	; 0x11
            vpv     += sysval.scc_vpv[s];
    4a46:	d7 01       	movw	r26, r14
    4a48:	dc 96       	adiw	r26, 0x3c	; 60
    4a4a:	8d 91       	ld	r24, X+
    4a4c:	9c 91       	ld	r25, X
    4a4e:	dd 97       	sbiw	r26, 0x3d	; 61
    4a50:	2f 81       	ldd	r18, Y+7	; 0x07
    4a52:	38 85       	ldd	r19, Y+8	; 0x08
    4a54:	28 0f       	add	r18, r24
    4a56:	39 1f       	adc	r19, r25
    4a58:	38 87       	std	Y+8, r19	; 0x08
    4a5a:	2f 83       	std	Y+7, r18	; 0x07
            icharge += sysval.scc_icharge[s];
    4a5c:	ac 5b       	subi	r26, 0xBC	; 188
    4a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a60:	6d 91       	ld	r22, X+
    4a62:	7c 91       	ld	r23, X
    4a64:	4d 81       	ldd	r20, Y+5	; 0x05
    4a66:	5e 81       	ldd	r21, Y+6	; 0x06
    4a68:	46 0f       	add	r20, r22
    4a6a:	57 1f       	adc	r21, r23
    4a6c:	5e 83       	std	Y+6, r21	; 0x06
    4a6e:	4d 83       	std	Y+5, r20	; 0x05
            vbatt   += sysval.scc_vbatt[s];
    4a70:	d7 01       	movw	r26, r14
    4a72:	d4 96       	adiw	r26, 0x34	; 52
    4a74:	8d 91       	ld	r24, X+
    4a76:	9c 91       	ld	r25, X
    4a78:	d5 97       	sbiw	r26, 0x35	; 53
    4a7a:	29 85       	ldd	r18, Y+9	; 0x09
    4a7c:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a7e:	28 0f       	add	r18, r24
    4a80:	39 1f       	adc	r19, r25
    4a82:	3a 87       	std	Y+10, r19	; 0x0a
    4a84:	29 87       	std	Y+9, r18	; 0x09
            iload   += sysval.scc_iload[s];
    4a86:	a7 01       	movw	r20, r14
    4a88:	44 5b       	subi	r20, 0xB4	; 180
    4a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    4a8c:	da 01       	movw	r26, r20
    4a8e:	0d 90       	ld	r0, X+
    4a90:	bc 91       	ld	r27, X
    4a92:	a0 2d       	mov	r26, r0
    4a94:	bb a3       	std	Y+35, r27	; 0x23
    4a96:	aa a3       	std	Y+34, r26	; 0x22
    4a98:	2b 85       	ldd	r18, Y+11	; 0x0b
    4a9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    4a9c:	2a 0f       	add	r18, r26
    4a9e:	3b 1f       	adc	r19, r27
    4aa0:	3c 87       	std	Y+12, r19	; 0x0c
    4aa2:	2b 87       	std	Y+11, r18	; 0x0b
            pin     += ((int32_t)sysval.scc_vbatt[s] * (int32_t)sysval.scc_icharge[s]);
    4aa4:	9c 01       	movw	r18, r24
    4aa6:	99 0f       	add	r25, r25
    4aa8:	44 0b       	sbc	r20, r20
    4aaa:	55 0b       	sbc	r21, r21
    4aac:	2e 8f       	std	Y+30, r18	; 0x1e
    4aae:	3f 8f       	std	Y+31, r19	; 0x1f
    4ab0:	48 a3       	std	Y+32, r20	; 0x20
    4ab2:	59 a3       	std	Y+33, r21	; 0x21
    4ab4:	db 01       	movw	r26, r22
    4ab6:	73 d5       	rcall	.+2790   	; 0x559e <__mulshisi3>
    4ab8:	2d 89       	ldd	r18, Y+21	; 0x15
    4aba:	3e 89       	ldd	r19, Y+22	; 0x16
    4abc:	4f 89       	ldd	r20, Y+23	; 0x17
    4abe:	58 8d       	ldd	r21, Y+24	; 0x18
    4ac0:	26 0f       	add	r18, r22
    4ac2:	37 1f       	adc	r19, r23
    4ac4:	48 1f       	adc	r20, r24
    4ac6:	59 1f       	adc	r21, r25
    4ac8:	2d 8b       	std	Y+21, r18	; 0x15
    4aca:	3e 8b       	std	Y+22, r19	; 0x16
    4acc:	4f 8b       	std	Y+23, r20	; 0x17
    4ace:	58 8f       	std	Y+24, r21	; 0x18
            pout    += ((int32_t)sysval.scc_vbatt[s] * (int32_t)sysval.scc_iload[s]);
    4ad0:	aa a1       	ldd	r26, Y+34	; 0x22
    4ad2:	bb a1       	ldd	r27, Y+35	; 0x23
    4ad4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4ad6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4ad8:	48 a1       	ldd	r20, Y+32	; 0x20
    4ada:	59 a1       	ldd	r21, Y+33	; 0x21
    4adc:	60 d5       	rcall	.+2752   	; 0x559e <__mulshisi3>
    4ade:	46 0e       	add	r4, r22
    4ae0:	57 1e       	adc	r5, r23
    4ae2:	68 1e       	adc	r6, r24
    4ae4:	79 1e       	adc	r7, r25
            Ah      += (int32_t)sysval.scc_Ah[s];
    4ae6:	d7 01       	movw	r26, r14
    4ae8:	a4 5a       	subi	r26, 0xA4	; 164
    4aea:	bf 4f       	sbci	r27, 0xFF	; 255
    4aec:	8d 91       	ld	r24, X+
    4aee:	9c 91       	ld	r25, X
    4af0:	09 2e       	mov	r0, r25
    4af2:	00 0c       	add	r0, r0
    4af4:	aa 0b       	sbc	r26, r26
    4af6:	bb 0b       	sbc	r27, r27
    4af8:	29 8d       	ldd	r18, Y+25	; 0x19
    4afa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    4afc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    4afe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    4b00:	28 0f       	add	r18, r24
    4b02:	39 1f       	adc	r19, r25
    4b04:	4a 1f       	adc	r20, r26
    4b06:	5b 1f       	adc	r21, r27
    4b08:	29 8f       	std	Y+25, r18	; 0x19
    4b0a:	3a 8f       	std	Y+26, r19	; 0x1a
    4b0c:	4b 8f       	std	Y+27, r20	; 0x1b
    4b0e:	5c 8f       	std	Y+28, r21	; 0x1c
            sysval.Door_open += sysval.scc_door[s];
    4b10:	d7 01       	movw	r26, r14
    4b12:	ac 5a       	subi	r26, 0xAC	; 172
    4b14:	bf 4f       	sbci	r27, 0xFF	; 255
    4b16:	8c 91       	ld	r24, X
    4b18:	3d 8d       	ldd	r19, Y+29	; 0x1d
    4b1a:	38 0f       	add	r19, r24
    4b1c:	3d 8f       	std	Y+29, r19	; 0x1d
			ydayl   += sysval.scc_ydayl[s];
    4b1e:	50 96       	adiw	r26, 0x10	; 16
    4b20:	8d 91       	ld	r24, X+
    4b22:	9c 91       	ld	r25, X
    4b24:	4b 89       	ldd	r20, Y+19	; 0x13
    4b26:	5c 89       	ldd	r21, Y+20	; 0x14
    4b28:	48 0f       	add	r20, r24
    4b2a:	59 1f       	adc	r21, r25
    4b2c:	5c 8b       	std	Y+20, r21	; 0x14
    4b2e:	4b 8b       	std	Y+19, r20	; 0x13
    4b30:	20 c0       	rjmp	.+64     	; 0x4b72 <task_every_5second+0x23a>
        } else {
			// fill SCC values with errors or zeros:
			sysval.scc_loadstate[s] = 0x2;
    4b32:	22 e0       	ldi	r18, 0x02	; 2
    4b34:	20 a3       	std	Z+32, r18	; 0x20
			sysval.scc_solarstate[s] = 0x3;
    4b36:	33 e0       	ldi	r19, 0x03	; 3
    4b38:	34 8f       	std	Z+28, r19	; 0x1c
			sysval.scc_battstate[s]  = 0x3;
    4b3a:	30 8f       	std	Z+24, r19	; 0x18
			sysval.scc_sysstate[s]   = 0x3;
    4b3c:	34 8b       	std	Z+20, r19	; 0x14
			sysval.scc_daystate[s]   = 0x0;
    4b3e:	14 a2       	std	Z+36, r1	; 0x24
			sysval.scc_soc[s]=0;
    4b40:	10 a6       	std	Z+40, r1	; 0x28
			sysval.scc_socc[s]=0;
    4b42:	14 a6       	std	Z+44, r1	; 0x2c
			sysval.scc_temp[s]=0;
    4b44:	10 aa       	std	Z+48, r1	; 0x30
			sysval.scc_vpv[s]=0;
    4b46:	d7 01       	movw	r26, r14
    4b48:	dd 96       	adiw	r26, 0x3d	; 61
    4b4a:	1c 92       	st	X, r1
    4b4c:	1e 92       	st	-X, r1
    4b4e:	dc 97       	sbiw	r26, 0x3c	; 60
			sysval.scc_icharge[s]=0;
    4b50:	ac 5b       	subi	r26, 0xBC	; 188
    4b52:	bf 4f       	sbci	r27, 0xFF	; 255
    4b54:	1d 92       	st	X+, r1
    4b56:	1c 92       	st	X, r1
			sysval.scc_vbatt[s]=0;
    4b58:	d7 01       	movw	r26, r14
    4b5a:	d5 96       	adiw	r26, 0x35	; 53
    4b5c:	1c 92       	st	X, r1
    4b5e:	1e 92       	st	-X, r1
    4b60:	d4 97       	sbiw	r26, 0x34	; 52
			sysval.scc_iload[s]=0;
    4b62:	a4 5b       	subi	r26, 0xB4	; 180
    4b64:	bf 4f       	sbci	r27, 0xFF	; 255
    4b66:	11 96       	adiw	r26, 0x01	; 1
    4b68:	1c 92       	st	X, r1
    4b6a:	1e 92       	st	-X, r1
			sysval.scc_ydayl[s]=0;
    4b6c:	58 96       	adiw	r26, 0x18	; 24
    4b6e:	1d 92       	st	X+, r1
    4b70:	1c 92       	st	X, r1
		}
		// SCC LOAD STATUS byte:
		// 76 54 32 10 (bit number)
		// 03 02 01 00 (SCC number)
		// fo fo fo fo (status: f=1=FAULT o=1=ON)
		sysval.load_state |= ((sysval.scc_loadstate[s]&0x3)<<(s*2)); // fill in bit pair
    4b72:	80 a1       	ldd	r24, Z+32	; 0x20
    4b74:	83 70       	andi	r24, 0x03	; 3
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	0d 2c       	mov	r0, r13
    4b7a:	02 c0       	rjmp	.+4      	; 0x4b80 <task_every_5second+0x248>
    4b7c:	88 0f       	add	r24, r24
    4b7e:	99 1f       	adc	r25, r25
    4b80:	0a 94       	dec	r0
    4b82:	e2 f7       	brpl	.-8      	; 0x4b7c <task_every_5second+0x244>
    4b84:	98 2a       	or	r9, r24

		// SCC SOLAR STATUS byte:
		sysval.solar_state |= ((sysval.scc_solarstate[s]&0x3)<<(s*2)); // fill in bit pair
    4b86:	24 8d       	ldd	r18, Z+28	; 0x1c
    4b88:	23 70       	andi	r18, 0x03	; 3
    4b8a:	30 e0       	ldi	r19, 0x00	; 0
    4b8c:	0d 2c       	mov	r0, r13
    4b8e:	02 c0       	rjmp	.+4      	; 0x4b94 <task_every_5second+0x25c>
    4b90:	22 0f       	add	r18, r18
    4b92:	33 1f       	adc	r19, r19
    4b94:	0a 94       	dec	r0
    4b96:	e2 f7       	brpl	.-8      	; 0x4b90 <task_every_5second+0x258>
    4b98:	c2 2a       	or	r12, r18
		
		// SCC BATT STATUS byte:
		sysval.batt_state |= ((sysval.scc_battstate[s]&0x3)<<(s*2)); // fill in bit pair
    4b9a:	b0 8d       	ldd	r27, Z+24	; 0x18
    4b9c:	b3 70       	andi	r27, 0x03	; 3
    4b9e:	2b 2f       	mov	r18, r27
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	0d 2c       	mov	r0, r13
    4ba4:	02 c0       	rjmp	.+4      	; 0x4baa <task_every_5second+0x272>
    4ba6:	22 0f       	add	r18, r18
    4ba8:	33 1f       	adc	r19, r19
    4baa:	0a 94       	dec	r0
    4bac:	e2 f7       	brpl	.-8      	; 0x4ba6 <task_every_5second+0x26e>
    4bae:	3f 8f       	std	Y+31, r19	; 0x1f
    4bb0:	2e 8f       	std	Y+30, r18	; 0x1e
    4bb2:	82 2a       	or	r8, r18
		//
		// SCC SYS STATUS byte:
		sysval.sys_state |= ((sysval.scc_sysstate[s]&0x3)<<(s*2)); // fill in bit pair
    4bb4:	24 89       	ldd	r18, Z+20	; 0x14
    4bb6:	23 70       	andi	r18, 0x03	; 3
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	0d 2c       	mov	r0, r13
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <task_every_5second+0x28a>
    4bbe:	22 0f       	add	r18, r18
    4bc0:	33 1f       	adc	r19, r19
    4bc2:	0a 94       	dec	r0
    4bc4:	e2 f7       	brpl	.-8      	; 0x4bbe <task_every_5second+0x286>
    4bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    4bc8:	24 2b       	or	r18, r20
		
		// SCC DAY STATUS byte:
		sysval.day_state |= ((sysval.scc_daystate[s]&0x3)<<(s*2)); // fill in bit pair
    4bca:	84 a1       	ldd	r24, Z+36	; 0x24
    4bcc:	83 70       	andi	r24, 0x03	; 3
    4bce:	90 e0       	ldi	r25, 0x00	; 0
    4bd0:	02 c0       	rjmp	.+4      	; 0x4bd6 <task_every_5second+0x29e>
    4bd2:	88 0f       	add	r24, r24
    4bd4:	99 1f       	adc	r25, r25
    4bd6:	da 94       	dec	r13
    4bd8:	e2 f7       	brpl	.-8      	; 0x4bd2 <task_every_5second+0x29a>
    4bda:	5c 81       	ldd	r21, Y+4	; 0x04
    4bdc:	85 2b       	or	r24, r21
    4bde:	92 e0       	ldi	r25, 0x02	; 2
    4be0:	29 0e       	add	r2, r25
    4be2:	31 1c       	adc	r3, r1
    4be4:	0f 5f       	subi	r16, 0xFF	; 255
    4be6:	1f 4f       	sbci	r17, 0xFF	; 255
    4be8:	a2 e0       	ldi	r26, 0x02	; 2
    4bea:	ea 0e       	add	r14, r26
    4bec:	f1 1c       	adc	r15, r1
	uint16_t ydayl=0;
    int32_t pin=0,pout=0, Ah=0;
    uint16_t dt;

    scc_monitor();
    for(s=0;s<MAX_NOF_SCC;s++) {
    4bee:	b8 e0       	ldi	r27, 0x08	; 8
    4bf0:	2b 16       	cp	r2, r27
    4bf2:	31 04       	cpc	r3, r1
    4bf4:	09 f0       	breq	.+2      	; 0x4bf8 <task_every_5second+0x2c0>
    4bf6:	f8 ce       	rjmp	.-528    	; 0x49e8 <task_every_5second+0xb0>
    4bf8:	f2 2f       	mov	r31, r18
    4bfa:	cc 82       	std	Y+4, r12	; 0x04
    4bfc:	8b 82       	std	Y+3, r8	; 0x03
    4bfe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4c00:	20 93 58 10 	sts	0x1058, r18	; 0x801058 <sysval+0x99>
    4c04:	90 92 54 10 	sts	0x1054, r9	; 0x801054 <sysval+0x95>
    4c08:	c0 92 53 10 	sts	0x1053, r12	; 0x801053 <sysval+0x94>
    4c0c:	80 92 55 10 	sts	0x1055, r8	; 0x801055 <sysval+0x96>
    4c10:	f0 93 56 10 	sts	0x1056, r31	; 0x801056 <sysval+0x97>
    4c14:	80 93 57 10 	sts	0x1057, r24	; 0x801057 <sysval+0x98>
		sysval.sys_state |= ((sysval.scc_sysstate[s]&0x3)<<(s*2)); // fill in bit pair
		
		// SCC DAY STATUS byte:
		sysval.day_state |= ((sysval.scc_daystate[s]&0x3)<<(s*2)); // fill in bit pair
    }
    sysval.SoC      = (uint8_t)(soc / nof_scc);  // average
    4c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c1c:	69 81       	ldd	r22, Y+1	; 0x01
    4c1e:	7a 81       	ldd	r23, Y+2	; 0x02
    4c20:	54 d4       	rcall	.+2216   	; 0x54ca <__divmodhi4>
    4c22:	60 93 4c 10 	sts	0x104C, r22	; 0x80104c <sysval+0x8d>
	sysval.SoCC     = (uint8_t)(socc / nof_scc);  // average
    4c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c28:	98 89       	ldd	r25, Y+16	; 0x10
    4c2a:	69 81       	ldd	r22, Y+1	; 0x01
    4c2c:	7a 81       	ldd	r23, Y+2	; 0x02
    4c2e:	4d d4       	rcall	.+2202   	; 0x54ca <__divmodhi4>
    4c30:	60 93 4d 10 	sts	0x104D, r22	; 0x80104d <sysval+0x8e>
    sysval.temp     = (uint8_t)(temp / nof_scc); // average
    4c34:	89 89       	ldd	r24, Y+17	; 0x11
    4c36:	9a 89       	ldd	r25, Y+18	; 0x12
    4c38:	69 81       	ldd	r22, Y+1	; 0x01
    4c3a:	7a 81       	ldd	r23, Y+2	; 0x02
    4c3c:	46 d4       	rcall	.+2188   	; 0x54ca <__divmodhi4>
    sysval.Vpv      = vpv   / nof_scc; // average
    4c3e:	60 93 52 10 	sts	0x1052, r22	; 0x801052 <sysval+0x93>
    4c42:	8f 81       	ldd	r24, Y+7	; 0x07
    4c44:	98 85       	ldd	r25, Y+8	; 0x08
    4c46:	69 81       	ldd	r22, Y+1	; 0x01
    4c48:	7a 81       	ldd	r23, Y+2	; 0x02
    4c4a:	3f d4       	rcall	.+2174   	; 0x54ca <__divmodhi4>
    4c4c:	70 93 34 10 	sts	0x1034, r23	; 0x801034 <sysval+0x75>
    sysval.Vbatt    = vbatt / nof_scc; // average
    4c50:	60 93 33 10 	sts	0x1033, r22	; 0x801033 <sysval+0x74>
    4c54:	89 85       	ldd	r24, Y+9	; 0x09
    4c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c58:	69 81       	ldd	r22, Y+1	; 0x01
    4c5a:	7a 81       	ldd	r23, Y+2	; 0x02
    4c5c:	36 d4       	rcall	.+2156   	; 0x54ca <__divmodhi4>
    4c5e:	70 93 36 10 	sts	0x1036, r23	; 0x801036 <sysval+0x77>
	sysval.ydayl    = ydayl / nof_scc; // average
    4c62:	60 93 35 10 	sts	0x1035, r22	; 0x801035 <sysval+0x76>
    4c66:	8b 89       	ldd	r24, Y+19	; 0x13
    4c68:	9c 89       	ldd	r25, Y+20	; 0x14
    4c6a:	69 81       	ldd	r22, Y+1	; 0x01
    4c6c:	7a 81       	ldd	r23, Y+2	; 0x02
    4c6e:	19 d4       	rcall	.+2098   	; 0x54a2 <__udivmodhi4>
    4c70:	70 93 ca 0f 	sts	0x0FCA, r23	; 0x800fca <sysval+0xb>
    4c74:	60 93 c9 0f 	sts	0x0FC9, r22	; 0x800fc9 <sysval+0xa>
	sysval.Ah       = Ah;      // sum
    4c78:	89 8d       	ldd	r24, Y+25	; 0x19
    4c7a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4c7c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4c7e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4c80:	80 93 4e 10 	sts	0x104E, r24	; 0x80104e <sysval+0x8f>
    4c84:	90 93 4f 10 	sts	0x104F, r25	; 0x80104f <sysval+0x90>
    4c88:	a0 93 50 10 	sts	0x1050, r26	; 0x801050 <sysval+0x91>
    4c8c:	b0 93 51 10 	sts	0x1051, r27	; 0x801051 <sysval+0x92>
    sysval.I_charge = icharge; // sum
    4c90:	ad 81       	ldd	r26, Y+5	; 0x05
    4c92:	be 81       	ldd	r27, Y+6	; 0x06
    4c94:	b0 93 38 10 	sts	0x1038, r27	; 0x801038 <sysval+0x79>
    4c98:	a0 93 37 10 	sts	0x1037, r26	; 0x801037 <sysval+0x78>
    sysval.I_load   = iload;   // sum
    4c9c:	2b 85       	ldd	r18, Y+11	; 0x0b
    4c9e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ca0:	30 93 3a 10 	sts	0x103A, r19	; 0x80103a <sysval+0x7b>
    4ca4:	20 93 39 10 	sts	0x1039, r18	; 0x801039 <sysval+0x7a>
    pin  += (int32_t)5000;     // integer roundoff +0.5
    pout += (int32_t)5000;     // integer roundoff +0.5
    sysval.P_in     = pin/(int32_t)10000;  // to Watt
    4ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    4caa:	7e 89       	ldd	r23, Y+22	; 0x16
    4cac:	8f 89       	ldd	r24, Y+23	; 0x17
    4cae:	98 8d       	ldd	r25, Y+24	; 0x18
    4cb0:	68 57       	subi	r22, 0x78	; 120
    4cb2:	7c 4e       	sbci	r23, 0xEC	; 236
    4cb4:	8f 4f       	sbci	r24, 0xFF	; 255
    4cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb8:	0f 2e       	mov	r0, r31
    4cba:	f0 e1       	ldi	r31, 0x10	; 16
    4cbc:	cf 2e       	mov	r12, r31
    4cbe:	f7 e2       	ldi	r31, 0x27	; 39
    4cc0:	df 2e       	mov	r13, r31
    4cc2:	e1 2c       	mov	r14, r1
    4cc4:	f1 2c       	mov	r15, r1
    4cc6:	f0 2d       	mov	r31, r0
    4cc8:	a7 01       	movw	r20, r14
    4cca:	96 01       	movw	r18, r12
    4ccc:	33 d4       	rcall	.+2150   	; 0x5534 <__divmodsi4>
    4cce:	30 93 3c 10 	sts	0x103C, r19	; 0x80103c <sysval+0x7d>
    sysval.P_out    = pout/(int32_t)10000; // to Watt	
    4cd2:	20 93 3b 10 	sts	0x103B, r18	; 0x80103b <sysval+0x7c>
    4cd6:	c3 01       	movw	r24, r6
    4cd8:	b2 01       	movw	r22, r4
    4cda:	68 57       	subi	r22, 0x78	; 120
    4cdc:	7c 4e       	sbci	r23, 0xEC	; 236
    4cde:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce2:	a7 01       	movw	r20, r14
    4ce4:	96 01       	movw	r18, r12
    4ce6:	26 d4       	rcall	.+2124   	; 0x5534 <__divmodsi4>
    4ce8:	30 93 3e 10 	sts	0x103E, r19	; 0x80103e <sysval+0x7f>
    4cec:	20 93 3d 10 	sts	0x103D, r18	; 0x80103d <sysval+0x7e>

    if(sysval.I_charge > 10) { // 0.1 A
    4cf0:	4d 81       	ldd	r20, Y+5	; 0x05
    4cf2:	5e 81       	ldd	r21, Y+6	; 0x06
    4cf4:	4b 30       	cpi	r20, 0x0B	; 11
    4cf6:	51 05       	cpc	r21, r1
        LED_CHARGING_ON();
    4cf8:	0c f0       	brlt	.+2      	; 0x4cfc <task_every_5second+0x3c4>
    }
    if(sysval.I_charge < 5) { // 0.05 A
    4cfa:	29 98       	cbi	0x05, 1	; 5
    4cfc:	80 91 37 10 	lds	r24, 0x1037	; 0x801037 <sysval+0x78>
    4d00:	90 91 38 10 	lds	r25, 0x1038	; 0x801038 <sysval+0x79>
    4d04:	05 97       	sbiw	r24, 0x05	; 5
        LED_CHARGING_OFF();
    4d06:	0c f4       	brge	.+2      	; 0x4d0a <task_every_5second+0x3d2>
    }

    if(sysval.seconds_old==0) {
    4d08:	29 9a       	sbi	0x05, 1	; 5
    4d0a:	40 91 c3 0f 	lds	r20, 0x0FC3	; 0x800fc3 <sysval+0x4>
    4d0e:	50 91 c4 0f 	lds	r21, 0x0FC4	; 0x800fc4 <sysval+0x5>
    4d12:	60 91 c5 0f 	lds	r22, 0x0FC5	; 0x800fc5 <sysval+0x6>
    4d16:	70 91 c6 0f 	lds	r23, 0x0FC6	; 0x800fc6 <sysval+0x7>
    4d1a:	41 15       	cp	r20, r1
    4d1c:	51 05       	cpc	r21, r1
    4d1e:	61 05       	cpc	r22, r1
    4d20:	71 05       	cpc	r23, r1
        dt=0;
    } else {
        dt=(uint16_t)(sysval.seconds - sysval.seconds_old);
    4d22:	39 f0       	breq	.+14     	; 0x4d32 <task_every_5second+0x3fa>
    4d24:	80 91 bf 0f 	lds	r24, 0x0FBF	; 0x800fbf <sysval>
    4d28:	90 91 c0 0f 	lds	r25, 0x0FC0	; 0x800fc0 <sysval+0x1>
    4d2c:	84 1b       	sub	r24, r20
    4d2e:	95 0b       	sbc	r25, r21
    if(sysval.I_charge < 5) { // 0.05 A
        LED_CHARGING_OFF();
    }

    if(sysval.seconds_old==0) {
        dt=0;
    4d30:	02 c0       	rjmp	.+4      	; 0x4d36 <task_every_5second+0x3fe>
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    } else {
        dt=(uint16_t)(sysval.seconds - sysval.seconds_old);
    }
    sysval.seconds_old=sysval.seconds;
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	ef eb       	ldi	r30, 0xBF	; 191
    4d38:	ff e0       	ldi	r31, 0x0F	; 15
    4d3a:	40 81       	ld	r20, Z
    4d3c:	51 81       	ldd	r21, Z+1	; 0x01
    4d3e:	62 81       	ldd	r22, Z+2	; 0x02
    4d40:	73 81       	ldd	r23, Z+3	; 0x03
    4d42:	44 83       	std	Z+4, r20	; 0x04
    4d44:	55 83       	std	Z+5, r21	; 0x05
    4d46:	66 83       	std	Z+6, r22	; 0x06
    sysval.Ws_in+=(uint32_t)(sysval.P_in * dt);
    4d48:	77 83       	std	Z+7, r23	; 0x07
    4d4a:	ef e3       	ldi	r30, 0x3F	; 63
    4d4c:	f0 e1       	ldi	r31, 0x10	; 16
    4d4e:	40 91 3b 10 	lds	r20, 0x103B	; 0x80103b <sysval+0x7c>
    4d52:	50 91 3c 10 	lds	r21, 0x103C	; 0x80103c <sysval+0x7d>
    4d56:	84 9f       	mul	r24, r20
    4d58:	90 01       	movw	r18, r0
    4d5a:	85 9f       	mul	r24, r21
    4d5c:	30 0d       	add	r19, r0
    4d5e:	94 9f       	mul	r25, r20
    4d60:	30 0d       	add	r19, r0
    4d62:	11 24       	eor	r1, r1
    4d64:	40 81       	ld	r20, Z
    4d66:	51 81       	ldd	r21, Z+1	; 0x01
    4d68:	62 81       	ldd	r22, Z+2	; 0x02
    4d6a:	73 81       	ldd	r23, Z+3	; 0x03
    4d6c:	42 0f       	add	r20, r18
    4d6e:	53 1f       	adc	r21, r19
    4d70:	61 1d       	adc	r22, r1
    4d72:	71 1d       	adc	r23, r1
    4d74:	40 83       	st	Z, r20
    4d76:	51 83       	std	Z+1, r21	; 0x01
    4d78:	62 83       	std	Z+2, r22	; 0x02
    sysval.Ws_out+=(uint32_t)(sysval.P_out * dt);
    4d7a:	73 83       	std	Z+3, r23	; 0x03
    4d7c:	40 91 3d 10 	lds	r20, 0x103D	; 0x80103d <sysval+0x7e>
    4d80:	50 91 3e 10 	lds	r21, 0x103E	; 0x80103e <sysval+0x7f>
    4d84:	84 9f       	mul	r24, r20
    4d86:	90 01       	movw	r18, r0
    4d88:	85 9f       	mul	r24, r21
    4d8a:	30 0d       	add	r19, r0
    4d8c:	94 9f       	mul	r25, r20
    4d8e:	30 0d       	add	r19, r0
    4d90:	11 24       	eor	r1, r1
    4d92:	e3 e4       	ldi	r30, 0x43	; 67
    4d94:	f0 e1       	ldi	r31, 0x10	; 16
    4d96:	80 81       	ld	r24, Z
    4d98:	91 81       	ldd	r25, Z+1	; 0x01
    4d9a:	a2 81       	ldd	r26, Z+2	; 0x02
    4d9c:	b3 81       	ldd	r27, Z+3	; 0x03
    4d9e:	82 0f       	add	r24, r18
    4da0:	93 1f       	adc	r25, r19
    4da2:	a1 1d       	adc	r26, r1
    4da4:	b1 1d       	adc	r27, r1
    4da6:	80 83       	st	Z, r24
    4da8:	91 83       	std	Z+1, r25	; 0x01
    4daa:	a2 83       	std	Z+2, r26	; 0x02

    if(sysval.Ws_quota_enabled) {
    4dac:	b3 83       	std	Z+3, r27	; 0x03
    4dae:	80 91 4b 10 	lds	r24, 0x104B	; 0x80104b <sysval+0x8c>
    4db2:	88 23       	and	r24, r24
        sysval.Ws_quota-=(int32_t)(sysval.P_out * dt);
    4db4:	11 f1       	breq	.+68     	; 0x4dfa <task_every_5second+0x4c2>
    4db6:	80 91 47 10 	lds	r24, 0x1047	; 0x801047 <sysval+0x88>
    4dba:	90 91 48 10 	lds	r25, 0x1048	; 0x801048 <sysval+0x89>
    4dbe:	a0 91 49 10 	lds	r26, 0x1049	; 0x801049 <sysval+0x8a>
    4dc2:	b0 91 4a 10 	lds	r27, 0x104A	; 0x80104a <sysval+0x8b>
    4dc6:	82 1b       	sub	r24, r18
    4dc8:	93 0b       	sbc	r25, r19
    4dca:	a1 09       	sbc	r26, r1
        if(sysval.Ws_quota <= 0) { sysval.Ws_quota=0; }
    4dcc:	b1 09       	sbc	r27, r1
    4dce:	18 16       	cp	r1, r24
    4dd0:	19 06       	cpc	r1, r25
    4dd2:	1a 06       	cpc	r1, r26
    4dd4:	1b 06       	cpc	r1, r27
    sysval.seconds_old=sysval.seconds;
    sysval.Ws_in+=(uint32_t)(sysval.P_in * dt);
    sysval.Ws_out+=(uint32_t)(sysval.P_out * dt);

    if(sysval.Ws_quota_enabled) {
        sysval.Ws_quota-=(int32_t)(sysval.P_out * dt);
    4dd6:	4c f4       	brge	.+18     	; 0x4dea <task_every_5second+0x4b2>
    4dd8:	80 93 47 10 	sts	0x1047, r24	; 0x801047 <sysval+0x88>
    4ddc:	90 93 48 10 	sts	0x1048, r25	; 0x801048 <sysval+0x89>
    4de0:	a0 93 49 10 	sts	0x1049, r26	; 0x801049 <sysval+0x8a>
    4de4:	b0 93 4a 10 	sts	0x104A, r27	; 0x80104a <sysval+0x8b>
        if(sysval.Ws_quota <= 0) { sysval.Ws_quota=0; }
    4de8:	08 c0       	rjmp	.+16     	; 0x4dfa <task_every_5second+0x4c2>
    4dea:	10 92 47 10 	sts	0x1047, r1	; 0x801047 <sysval+0x88>
    4dee:	10 92 48 10 	sts	0x1048, r1	; 0x801048 <sysval+0x89>
    4df2:	10 92 49 10 	sts	0x1049, r1	; 0x801049 <sysval+0x8a>
    4df6:	10 92 4a 10 	sts	0x104A, r1	; 0x80104a <sysval+0x8b>
    }
	scc_monitor_dump(NULL,0);
    4dfa:	60 e0       	ldi	r22, 0x00	; 0
    4dfc:	70 e0       	ldi	r23, 0x00	; 0
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	0e 94 15 03 	call	0x62a	; 0x62a <scc_monitor_dump>
}
    4e06:	a3 96       	adiw	r28, 0x23	; 35
    4e08:	0f b6       	in	r0, 0x3f	; 63
    4e0a:	f8 94       	cli
    4e0c:	de bf       	out	0x3e, r29	; 62
    4e0e:	0f be       	out	0x3f, r0	; 63
    4e10:	cd bf       	out	0x3d, r28	; 61
    4e12:	df 91       	pop	r29
    4e14:	cf 91       	pop	r28
    4e16:	1f 91       	pop	r17
    4e18:	0f 91       	pop	r16
    4e1a:	ff 90       	pop	r15
    4e1c:	ef 90       	pop	r14
    4e1e:	df 90       	pop	r13
    4e20:	cf 90       	pop	r12
    4e22:	bf 90       	pop	r11
    4e24:	af 90       	pop	r10
    4e26:	9f 90       	pop	r9
    4e28:	8f 90       	pop	r8
    4e2a:	7f 90       	pop	r7
    4e2c:	6f 90       	pop	r6
    4e2e:	5f 90       	pop	r5
    4e30:	4f 90       	pop	r4
    4e32:	3f 90       	pop	r3
    4e34:	2f 90       	pop	r2
    4e36:	08 95       	ret

00004e38 <sysstate2str>:

char sysstate2str(uint8_t si)
{
	uint8_t ss = (sysval.sys_state>>(si*2))&3;
	switch(ss) {
    4e38:	20 91 56 10 	lds	r18, 0x1056	; 0x801056 <sysval+0x97>
    4e3c:	30 e0       	ldi	r19, 0x00	; 0
    4e3e:	88 0f       	add	r24, r24
    4e40:	02 c0       	rjmp	.+4      	; 0x4e46 <sysstate2str+0xe>
    4e42:	35 95       	asr	r19
    4e44:	27 95       	ror	r18
    4e46:	8a 95       	dec	r24
    4e48:	e2 f7       	brpl	.-8      	; 0x4e42 <sysstate2str+0xa>
    4e4a:	23 70       	andi	r18, 0x03	; 3
    4e4c:	21 30       	cpi	r18, 0x01	; 1
    4e4e:	21 f0       	breq	.+8      	; 0x4e58 <sysstate2str+0x20>
    4e50:	48 f0       	brcs	.+18     	; 0x4e64 <sysstate2str+0x2c>
    4e52:	22 30       	cpi	r18, 0x02	; 2
    4e54:	19 f0       	breq	.+6      	; 0x4e5c <sysstate2str+0x24>
    4e56:	04 c0       	rjmp	.+8      	; 0x4e60 <sysstate2str+0x28>
		case 0:  return 'I'; // INIT
		case 1:  return 'W'; // WAIT
    4e58:	87 e5       	ldi	r24, 0x57	; 87
    4e5a:	08 95       	ret
		case 2:  return 'C'; // CHARGE
    4e5c:	83 e4       	ldi	r24, 0x43	; 67
    4e5e:	08 95       	ret
		default: return 'e'; // ERROR
    4e60:	85 e6       	ldi	r24, 0x65	; 101
    4e62:	08 95       	ret

char sysstate2str(uint8_t si)
{
	uint8_t ss = (sysval.sys_state>>(si*2))&3;
	switch(ss) {
		case 0:  return 'I'; // INIT
    4e64:	89 e4       	ldi	r24, 0x49	; 73
		case 1:  return 'W'; // WAIT
		case 2:  return 'C'; // CHARGE
		default: return 'e'; // ERROR
	}
}
    4e66:	08 95       	ret

00004e68 <solarstate2str>:
char solarstate2str(uint8_t si)
{
	uint8_t ss = (sysval.solar_state>>(si*2))&3;
	switch(ss) {
    4e68:	20 91 53 10 	lds	r18, 0x1053	; 0x801053 <sysval+0x94>
    4e6c:	30 e0       	ldi	r19, 0x00	; 0
    4e6e:	88 0f       	add	r24, r24
    4e70:	02 c0       	rjmp	.+4      	; 0x4e76 <solarstate2str+0xe>
    4e72:	35 95       	asr	r19
    4e74:	27 95       	ror	r18
    4e76:	8a 95       	dec	r24
    4e78:	e2 f7       	brpl	.-8      	; 0x4e72 <solarstate2str+0xa>
    4e7a:	23 70       	andi	r18, 0x03	; 3
    4e7c:	21 30       	cpi	r18, 0x01	; 1
    4e7e:	21 f0       	breq	.+8      	; 0x4e88 <solarstate2str+0x20>
    4e80:	48 f0       	brcs	.+18     	; 0x4e94 <solarstate2str+0x2c>
    4e82:	22 30       	cpi	r18, 0x02	; 2
    4e84:	19 f0       	breq	.+6      	; 0x4e8c <solarstate2str+0x24>
    4e86:	04 c0       	rjmp	.+8      	; 0x4e90 <solarstate2str+0x28>
		case 0:  return 'O'; // OK
		case 1:  return 'L'; // LOW
    4e88:	8c e4       	ldi	r24, 0x4C	; 76
    4e8a:	08 95       	ret
		case 2:  return 'H'; // TOO HIGH
    4e8c:	88 e4       	ldi	r24, 0x48	; 72
    4e8e:	08 95       	ret
		default: return 'x'; // NOT AVAIL
    4e90:	88 e7       	ldi	r24, 0x78	; 120
    4e92:	08 95       	ret
}
char solarstate2str(uint8_t si)
{
	uint8_t ss = (sysval.solar_state>>(si*2))&3;
	switch(ss) {
		case 0:  return 'O'; // OK
    4e94:	8f e4       	ldi	r24, 0x4F	; 79
		case 1:  return 'L'; // LOW
		case 2:  return 'H'; // TOO HIGH
		default: return 'x'; // NOT AVAIL
	}
}
    4e96:	08 95       	ret

00004e98 <loadstate2str>:
char loadstate2str(uint8_t si)
{
	// fo fo fo fo (status: f=1=FAULT o=1=ON)
	
	uint8_t ss = (sysval.load_state>>(si*2))&3;
	switch(ss) {
    4e98:	20 91 54 10 	lds	r18, 0x1054	; 0x801054 <sysval+0x95>
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	88 0f       	add	r24, r24
    4ea0:	02 c0       	rjmp	.+4      	; 0x4ea6 <loadstate2str+0xe>
    4ea2:	35 95       	asr	r19
    4ea4:	27 95       	ror	r18
    4ea6:	8a 95       	dec	r24
    4ea8:	e2 f7       	brpl	.-8      	; 0x4ea2 <loadstate2str+0xa>
    4eaa:	23 70       	andi	r18, 0x03	; 3
    4eac:	21 30       	cpi	r18, 0x01	; 1
    4eae:	21 f0       	breq	.+8      	; 0x4eb8 <loadstate2str+0x20>
    4eb0:	48 f0       	brcs	.+18     	; 0x4ec4 <loadstate2str+0x2c>
    4eb2:	22 30       	cpi	r18, 0x02	; 2
    4eb4:	19 f0       	breq	.+6      	; 0x4ebc <loadstate2str+0x24>
    4eb6:	04 c0       	rjmp	.+8      	; 0x4ec0 <loadstate2str+0x28>
		case 0:  return '0'; // OFF
		case 1:  return '1'; // ON
    4eb8:	81 e3       	ldi	r24, 0x31	; 49
    4eba:	08 95       	ret
		case 2:  return 'f'; // FAULT, OFF
    4ebc:	86 e6       	ldi	r24, 0x66	; 102
    4ebe:	08 95       	ret
		default: return 'F'; // FAULT, ON
    4ec0:	86 e4       	ldi	r24, 0x46	; 70
    4ec2:	08 95       	ret
{
	// fo fo fo fo (status: f=1=FAULT o=1=ON)
	
	uint8_t ss = (sysval.load_state>>(si*2))&3;
	switch(ss) {
		case 0:  return '0'; // OFF
    4ec4:	80 e3       	ldi	r24, 0x30	; 48
		case 1:  return '1'; // ON
		case 2:  return 'f'; // FAULT, OFF
		default: return 'F'; // FAULT, ON
	}
}
    4ec6:	08 95       	ret

00004ec8 <daystate2str>:
char daystate2str(uint8_t si)
{
	// dp dp dp dp (status: d=1=DAY p=1=PM)
	
	uint8_t ss = (sysval.day_state>>(si*2))&3;
	switch(ss) {
    4ec8:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <sysval+0x98>
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	88 0f       	add	r24, r24
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <daystate2str+0xe>
    4ed2:	35 95       	asr	r19
    4ed4:	27 95       	ror	r18
    4ed6:	8a 95       	dec	r24
    4ed8:	e2 f7       	brpl	.-8      	; 0x4ed2 <daystate2str+0xa>
    4eda:	23 70       	andi	r18, 0x03	; 3
    4edc:	22 30       	cpi	r18, 0x02	; 2
    4ede:	30 f0       	brcs	.+12     	; 0x4eec <daystate2str+0x24>
    4ee0:	22 30       	cpi	r18, 0x02	; 2
    4ee2:	11 f4       	brne	.+4      	; 0x4ee8 <daystate2str+0x20>
		case 0:  return 'z'; // NIGHT
		case 1:  return 'z'; // NIGHT
		case 2:  return 'A'; // DAY, AM
    4ee4:	81 e4       	ldi	r24, 0x41	; 65
    4ee6:	08 95       	ret
		default: return 'P'; // DAY, PM
    4ee8:	80 e5       	ldi	r24, 0x50	; 80
    4eea:	08 95       	ret
{
	// dp dp dp dp (status: d=1=DAY p=1=PM)
	
	uint8_t ss = (sysval.day_state>>(si*2))&3;
	switch(ss) {
		case 0:  return 'z'; // NIGHT
    4eec:	8a e7       	ldi	r24, 0x7A	; 122
		case 1:  return 'z'; // NIGHT
		case 2:  return 'A'; // DAY, AM
		default: return 'P'; // DAY, PM
	}
}
    4eee:	08 95       	ret

00004ef0 <task_soc_dump>:

uint16_t task_soc_dump(char *output_buf)
{
    4ef0:	cf 92       	push	r12
    4ef2:	df 92       	push	r13
    4ef4:	ef 92       	push	r14
    4ef6:	ff 92       	push	r15
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	8c 01       	movw	r16, r24
	uint16_t len=0;
	len=sprintf(output_buf,   "\r\nSoC  Vpv  Icharge  Vbatt  Iload temp  Pin Pout  Ws_in  Ws_out  uptime\r\n");
    4f02:	8a e4       	ldi	r24, 0x4A	; 74
    4f04:	ee e5       	ldi	r30, 0x5E	; 94
    4f06:	fb e0       	ldi	r31, 0x0B	; 11
    4f08:	d8 01       	movw	r26, r16
    4f0a:	01 90       	ld	r0, Z+
    4f0c:	0d 92       	st	X+, r0
    4f0e:	8a 95       	dec	r24
    4f10:	e1 f7       	brne	.-8      	; 0x4f0a <task_soc_dump+0x1a>
	len+=sprintf(&output_buf[len],"%3d ",sysval.SoC);
    4f12:	0f 2e       	mov	r0, r31
    4f14:	ff eb       	ldi	r31, 0xBF	; 191
    4f16:	ef 2e       	mov	r14, r31
    4f18:	ff e0       	ldi	r31, 0x0F	; 15
    4f1a:	ff 2e       	mov	r15, r31
    4f1c:	f0 2d       	mov	r31, r0
    4f1e:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <sysval+0x8d>
    4f22:	1f 92       	push	r1
    4f24:	8f 93       	push	r24
    4f26:	80 ee       	ldi	r24, 0xE0	; 224
    4f28:	91 e0       	ldi	r25, 0x01	; 1
    4f2a:	9f 93       	push	r25
    4f2c:	8f 93       	push	r24
    4f2e:	c8 01       	movw	r24, r16
    4f30:	87 5b       	subi	r24, 0xB7	; 183
    4f32:	9f 4f       	sbci	r25, 0xFF	; 255
    4f34:	9f 93       	push	r25
    4f36:	8f 93       	push	r24
    4f38:	6e d4       	rcall	.+2268   	; 0x5816 <sprintf>
    4f3a:	ec 01       	movw	r28, r24
    4f3c:	c7 5b       	subi	r28, 0xB7	; 183
    4f3e:	df 4f       	sbci	r29, 0xFF	; 255
	len+=sprintf(&output_buf[len]," %4d ",sysval.Vpv);
    4f40:	e3 e3       	ldi	r30, 0x33	; 51
    4f42:	f0 e1       	ldi	r31, 0x10	; 16
    4f44:	81 81       	ldd	r24, Z+1	; 0x01
    4f46:	8f 93       	push	r24
    4f48:	80 81       	ld	r24, Z
    4f4a:	8f 93       	push	r24
    4f4c:	0f 2e       	mov	r0, r31
    4f4e:	f8 ee       	ldi	r31, 0xE8	; 232
    4f50:	cf 2e       	mov	r12, r31
    4f52:	f1 e0       	ldi	r31, 0x01	; 1
    4f54:	df 2e       	mov	r13, r31
    4f56:	f0 2d       	mov	r31, r0
    4f58:	df 92       	push	r13
    4f5a:	cf 92       	push	r12
    4f5c:	c8 01       	movw	r24, r16
    4f5e:	8c 0f       	add	r24, r28
    4f60:	9d 1f       	adc	r25, r29
    4f62:	9f 93       	push	r25
    4f64:	8f 93       	push	r24
    4f66:	57 d4       	rcall	.+2222   	; 0x5816 <sprintf>
    4f68:	c8 0f       	add	r28, r24
    4f6a:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len]," %4d ",sysval.I_charge);
    4f6c:	e7 e3       	ldi	r30, 0x37	; 55
    4f6e:	f0 e1       	ldi	r31, 0x10	; 16
    4f70:	81 81       	ldd	r24, Z+1	; 0x01
    4f72:	8f 93       	push	r24
    4f74:	80 81       	ld	r24, Z
    4f76:	8f 93       	push	r24
    4f78:	df 92       	push	r13
    4f7a:	cf 92       	push	r12
    4f7c:	c8 01       	movw	r24, r16
    4f7e:	8c 0f       	add	r24, r28
    4f80:	9d 1f       	adc	r25, r29
    4f82:	9f 93       	push	r25
    4f84:	8f 93       	push	r24
    4f86:	47 d4       	rcall	.+2190   	; 0x5816 <sprintf>
    4f88:	c8 0f       	add	r28, r24
    4f8a:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len],"    %4d ",sysval.Vbatt);
    4f8c:	e5 e3       	ldi	r30, 0x35	; 53
    4f8e:	f0 e1       	ldi	r31, 0x10	; 16
    4f90:	81 81       	ldd	r24, Z+1	; 0x01
    4f92:	8f 93       	push	r24
    4f94:	80 81       	ld	r24, Z
    4f96:	8f 93       	push	r24
    4f98:	85 ee       	ldi	r24, 0xE5	; 229
    4f9a:	91 e0       	ldi	r25, 0x01	; 1
    4f9c:	9f 93       	push	r25
    4f9e:	8f 93       	push	r24
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	8c 0f       	add	r24, r28
    4fa4:	9d 1f       	adc	r25, r29
    4fa6:	9f 93       	push	r25
    4fa8:	8f 93       	push	r24
    4faa:	35 d4       	rcall	.+2154   	; 0x5816 <sprintf>
    4fac:	c8 0f       	add	r28, r24
    4fae:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len]," %4d ",sysval.I_load);
    4fb0:	e9 e3       	ldi	r30, 0x39	; 57
    4fb2:	f0 e1       	ldi	r31, 0x10	; 16
    4fb4:	81 81       	ldd	r24, Z+1	; 0x01
    4fb6:	8f 93       	push	r24
    4fb8:	80 81       	ld	r24, Z
    4fba:	8f 93       	push	r24
    4fbc:	df 92       	push	r13
    4fbe:	cf 92       	push	r12
    4fc0:	c8 01       	movw	r24, r16
    4fc2:	8c 0f       	add	r24, r28
    4fc4:	9d 1f       	adc	r25, r29
    4fc6:	9f 93       	push	r25
    4fc8:	8f 93       	push	r24
    4fca:	25 d4       	rcall	.+2122   	; 0x5816 <sprintf>
    4fcc:	c8 0f       	add	r28, r24
    4fce:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len],"   %2d ",sysval.temp);
    4fd0:	80 91 52 10 	lds	r24, 0x1052	; 0x801052 <sysval+0x93>
    4fd4:	1f 92       	push	r1
    4fd6:	8f 93       	push	r24
    4fd8:	8f ee       	ldi	r24, 0xEF	; 239
    4fda:	91 e0       	ldi	r25, 0x01	; 1
    4fdc:	9f 93       	push	r25
    4fde:	8f 93       	push	r24
    4fe0:	c8 01       	movw	r24, r16
    4fe2:	8c 0f       	add	r24, r28
    4fe4:	9d 1f       	adc	r25, r29
    4fe6:	9f 93       	push	r25
    4fe8:	8f 93       	push	r24
    4fea:	15 d4       	rcall	.+2090   	; 0x5816 <sprintf>
    4fec:	c8 0f       	add	r28, r24
    4fee:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len]," %3d ",sysval.P_in);
    4ff0:	2d b7       	in	r18, 0x3d	; 61
    4ff2:	3e b7       	in	r19, 0x3e	; 62
    4ff4:	2c 5d       	subi	r18, 0xDC	; 220
    4ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff8:	0f b6       	in	r0, 0x3f	; 63
    4ffa:	f8 94       	cli
    4ffc:	3e bf       	out	0x3e, r19	; 62
    4ffe:	0f be       	out	0x3f, r0	; 63
    5000:	2d bf       	out	0x3d, r18	; 61
    5002:	eb e3       	ldi	r30, 0x3B	; 59
    5004:	f0 e1       	ldi	r31, 0x10	; 16
    5006:	81 81       	ldd	r24, Z+1	; 0x01
    5008:	8f 93       	push	r24
    500a:	80 81       	ld	r24, Z
    500c:	8f 93       	push	r24
    500e:	0f 2e       	mov	r0, r31
    5010:	ff ed       	ldi	r31, 0xDF	; 223
    5012:	cf 2e       	mov	r12, r31
    5014:	f1 e0       	ldi	r31, 0x01	; 1
    5016:	df 2e       	mov	r13, r31
    5018:	f0 2d       	mov	r31, r0
    501a:	df 92       	push	r13
    501c:	cf 92       	push	r12
    501e:	c8 01       	movw	r24, r16
    5020:	8c 0f       	add	r24, r28
    5022:	9d 1f       	adc	r25, r29
    5024:	9f 93       	push	r25
    5026:	8f 93       	push	r24
    5028:	f6 d3       	rcall	.+2028   	; 0x5816 <sprintf>
    502a:	c8 0f       	add	r28, r24
    502c:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len]," %3d ",sysval.P_out);
    502e:	ed e3       	ldi	r30, 0x3D	; 61
    5030:	f0 e1       	ldi	r31, 0x10	; 16
    5032:	81 81       	ldd	r24, Z+1	; 0x01
    5034:	8f 93       	push	r24
    5036:	80 81       	ld	r24, Z
    5038:	8f 93       	push	r24
    503a:	df 92       	push	r13
    503c:	cf 92       	push	r12
    503e:	c8 01       	movw	r24, r16
    5040:	8c 0f       	add	r24, r28
    5042:	9d 1f       	adc	r25, r29
    5044:	9f 93       	push	r25
    5046:	8f 93       	push	r24
    5048:	e6 d3       	rcall	.+1996   	; 0x5816 <sprintf>
    504a:	c8 0f       	add	r28, r24
    504c:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len]," %5ld ",sysval.Ws_in);
    504e:	ef e3       	ldi	r30, 0x3F	; 63
    5050:	f0 e1       	ldi	r31, 0x10	; 16
    5052:	83 81       	ldd	r24, Z+3	; 0x03
    5054:	8f 93       	push	r24
    5056:	82 81       	ldd	r24, Z+2	; 0x02
    5058:	8f 93       	push	r24
    505a:	81 81       	ldd	r24, Z+1	; 0x01
    505c:	8f 93       	push	r24
    505e:	80 81       	ld	r24, Z
    5060:	8f 93       	push	r24
    5062:	0f 2e       	mov	r0, r31
    5064:	f8 ea       	ldi	r31, 0xA8	; 168
    5066:	cf 2e       	mov	r12, r31
    5068:	fb e0       	ldi	r31, 0x0B	; 11
    506a:	df 2e       	mov	r13, r31
    506c:	f0 2d       	mov	r31, r0
    506e:	df 92       	push	r13
    5070:	cf 92       	push	r12
    5072:	c8 01       	movw	r24, r16
    5074:	8c 0f       	add	r24, r28
    5076:	9d 1f       	adc	r25, r29
    5078:	9f 93       	push	r25
    507a:	8f 93       	push	r24
    507c:	cc d3       	rcall	.+1944   	; 0x5816 <sprintf>
    507e:	c8 0f       	add	r28, r24
    5080:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len]," %5ld ",sysval.Ws_out);	
    5082:	e3 e4       	ldi	r30, 0x43	; 67
    5084:	f0 e1       	ldi	r31, 0x10	; 16
    5086:	83 81       	ldd	r24, Z+3	; 0x03
    5088:	8f 93       	push	r24
    508a:	82 81       	ldd	r24, Z+2	; 0x02
    508c:	8f 93       	push	r24
    508e:	81 81       	ldd	r24, Z+1	; 0x01
    5090:	8f 93       	push	r24
    5092:	80 81       	ld	r24, Z
    5094:	8f 93       	push	r24
    5096:	df 92       	push	r13
    5098:	cf 92       	push	r12
    509a:	c8 01       	movw	r24, r16
    509c:	8c 0f       	add	r24, r28
    509e:	9d 1f       	adc	r25, r29
    50a0:	9f 93       	push	r25
    50a2:	8f 93       	push	r24
    50a4:	b8 d3       	rcall	.+1904   	; 0x5816 <sprintf>
    50a6:	c8 0f       	add	r28, r24
    50a8:	d9 1f       	adc	r29, r25
	len+=sprintf(&output_buf[len]," %6ld ",sysval.seconds);
    50aa:	f7 01       	movw	r30, r14
    50ac:	83 81       	ldd	r24, Z+3	; 0x03
    50ae:	8f 93       	push	r24
    50b0:	82 81       	ldd	r24, Z+2	; 0x02
    50b2:	8f 93       	push	r24
    50b4:	81 81       	ldd	r24, Z+1	; 0x01
    50b6:	8f 93       	push	r24
    50b8:	80 81       	ld	r24, Z
    50ba:	8f 93       	push	r24
    50bc:	8f ea       	ldi	r24, 0xAF	; 175
    50be:	9b e0       	ldi	r25, 0x0B	; 11
    50c0:	9f 93       	push	r25
    50c2:	8f 93       	push	r24
    50c4:	c8 01       	movw	r24, r16
    50c6:	8c 0f       	add	r24, r28
    50c8:	9d 1f       	adc	r25, r29
    50ca:	9f 93       	push	r25
    50cc:	8f 93       	push	r24
    50ce:	a3 d3       	rcall	.+1862   	; 0x5816 <sprintf>
    50d0:	8c 0f       	add	r24, r28
    50d2:	9d 1f       	adc	r25, r29
	len+=sprintf(&output_buf[len],"\r\n");
    50d4:	d8 01       	movw	r26, r16
    50d6:	a8 0f       	add	r26, r24
    50d8:	b9 1f       	adc	r27, r25
    50da:	2d e0       	ldi	r18, 0x0D	; 13
    50dc:	3a e0       	ldi	r19, 0x0A	; 10
    50de:	11 96       	adiw	r26, 0x01	; 1
    50e0:	3c 93       	st	X, r19
    50e2:	2e 93       	st	-X, r18
    50e4:	12 96       	adiw	r26, 0x02	; 2
    50e6:	1c 92       	st	X, r1
	return len;
    50e8:	2d b7       	in	r18, 0x3d	; 61
    50ea:	3e b7       	in	r19, 0x3e	; 62
    50ec:	2c 5d       	subi	r18, 0xDC	; 220
    50ee:	3f 4f       	sbci	r19, 0xFF	; 255
    50f0:	0f b6       	in	r0, 0x3f	; 63
    50f2:	f8 94       	cli
    50f4:	3e bf       	out	0x3e, r19	; 62
    50f6:	0f be       	out	0x3f, r0	; 63
    50f8:	2d bf       	out	0x3d, r18	; 61
}
    50fa:	02 96       	adiw	r24, 0x02	; 2
    50fc:	df 91       	pop	r29
    50fe:	cf 91       	pop	r28
    5100:	1f 91       	pop	r17
    5102:	0f 91       	pop	r16
    5104:	ff 90       	pop	r15
    5106:	ef 90       	pop	r14
    5108:	df 90       	pop	r13
    510a:	cf 90       	pop	r12
    510c:	08 95       	ret

0000510e <task_set_load>:

void task_set_load(uint8_t onoff)
{
    scc_set_load(onoff);
    510e:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <scc_set_load>
    5112:	08 95       	ret

00005114 <task_cal_temp>:
}

void task_cal_temp(uint8_t temp)
{
	scc_cal_temp(temp);
    5114:	0c 94 77 07 	jmp	0xeee	; 0xeee <scc_cal_temp>
    5118:	08 95       	ret

0000511a <task_cal_batt>:
}

void task_cal_batt(int8_t offset)
{
    scc_cal_batt(offset);
    511a:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <scc_cal_batt>
    511e:	08 95       	ret

00005120 <task_set_ah_batt>:
}

void task_set_ah_batt(int8_t ah)
{
    scc_set_ah_batt(ah);
    5120:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <scc_set_ah_batt>
    5124:	08 95       	ret

00005126 <task_start_equalize>:
}

void task_start_equalize(void)
{
	scc_start_equalize();
    5126:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <scc_start_equalize>
    512a:	08 95       	ret

0000512c <task_every_minute>:

/*
 * Task for every minute:
 */
void task_every_minute(void)
{
    512c:	8f 92       	push	r8
    512e:	9f 92       	push	r9
    5130:	af 92       	push	r10
    5132:	bf 92       	push	r11
    5134:	cf 92       	push	r12
    5136:	df 92       	push	r13
    5138:	ef 92       	push	r14
    513a:	ff 92       	push	r15
	scc_read_battery();
    513c:	0e 94 c4 07 	call	0xf88	; 0xf88 <scc_read_battery>
	
    /*
     * Display Quota if enabled:
     */
    if(sysval.Ws_quota_enabled) {
    5140:	80 91 4b 10 	lds	r24, 0x104B	; 0x80104b <sysval+0x8c>
    5144:	88 23       	and	r24, r24
    5146:	79 f1       	breq	.+94     	; 0x51a6 <task_every_minute+0x7a>
        // display Quota
        uint8_t tmp8 = quota_to_percent((uint16_t)(sysval.Ws_quota/3600),
               (uint16_t)(eeprom_read_dword(&EEPROM_ADDR_Ws_quota)/3600));
    5148:	88 ef       	ldi	r24, 0xF8	; 248
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	0e 94 78 32 	call	0x64f0	; 0x64f0 <eeprom_read_dword>
    /*
     * Display Quota if enabled:
     */
    if(sysval.Ws_quota_enabled) {
        // display Quota
        uint8_t tmp8 = quota_to_percent((uint16_t)(sysval.Ws_quota/3600),
    5150:	0f 2e       	mov	r0, r31
    5152:	f0 e1       	ldi	r31, 0x10	; 16
    5154:	cf 2e       	mov	r12, r31
    5156:	fe e0       	ldi	r31, 0x0E	; 14
    5158:	df 2e       	mov	r13, r31
    515a:	e1 2c       	mov	r14, r1
    515c:	f1 2c       	mov	r15, r1
    515e:	f0 2d       	mov	r31, r0
    5160:	a7 01       	movw	r20, r14
    5162:	96 01       	movw	r18, r12
    5164:	c5 d1       	rcall	.+906    	; 0x54f0 <__udivmodsi4>
    5166:	49 01       	movw	r8, r18
    5168:	5a 01       	movw	r10, r20
    516a:	60 91 47 10 	lds	r22, 0x1047	; 0x801047 <sysval+0x88>
    516e:	70 91 48 10 	lds	r23, 0x1048	; 0x801048 <sysval+0x89>
    5172:	80 91 49 10 	lds	r24, 0x1049	; 0x801049 <sysval+0x8a>
    5176:	90 91 4a 10 	lds	r25, 0x104A	; 0x80104a <sysval+0x8b>
    517a:	a7 01       	movw	r20, r14
    517c:	96 01       	movw	r18, r12
    517e:	da d1       	rcall	.+948    	; 0x5534 <__divmodsi4>
    5180:	b4 01       	movw	r22, r8
    5182:	c9 01       	movw	r24, r18
    5184:	0e 94 36 01 	call	0x26c	; 0x26c <quota_to_percent>
               (uint16_t)(eeprom_read_dword(&EEPROM_ADDR_Ws_quota)/3600));
        if(tmp8 < 20) {
    5188:	84 31       	cpi	r24, 0x14	; 20
    518a:	20 f4       	brcc	.+8      	; 0x5194 <task_every_minute+0x68>
            LED_100PERCENT_OFF();
    518c:	28 9a       	sbi	0x05, 0	; 5
            LED_60PERCENT_OFF();
    518e:	2a 9a       	sbi	0x05, 2	; 5
            LED_30PERCENT_ON();
    5190:	2b 98       	cbi	0x05, 3	; 5
    5192:	09 c0       	rjmp	.+18     	; 0x51a6 <task_every_minute+0x7a>
        } else if(tmp8 <= 80) {
    5194:	81 35       	cpi	r24, 0x51	; 81
    5196:	20 f4       	brcc	.+8      	; 0x51a0 <task_every_minute+0x74>
            LED_100PERCENT_OFF();
    5198:	28 9a       	sbi	0x05, 0	; 5
            LED_60PERCENT_ON();
    519a:	2a 98       	cbi	0x05, 2	; 5
            LED_30PERCENT_OFF();
    519c:	2b 9a       	sbi	0x05, 3	; 5
    519e:	03 c0       	rjmp	.+6      	; 0x51a6 <task_every_minute+0x7a>
        } else {
            LED_100PERCENT_ON();
    51a0:	28 98       	cbi	0x05, 0	; 5
            LED_60PERCENT_OFF();
    51a2:	2a 9a       	sbi	0x05, 2	; 5
            LED_30PERCENT_OFF();
    51a4:	2b 9a       	sbi	0x05, 3	; 5
        }
    }
}
    51a6:	ff 90       	pop	r15
    51a8:	ef 90       	pop	r14
    51aa:	df 90       	pop	r13
    51ac:	cf 90       	pop	r12
    51ae:	bf 90       	pop	r11
    51b0:	af 90       	pop	r10
    51b2:	9f 90       	pop	r9
    51b4:	8f 90       	pop	r8
    51b6:	08 95       	ret

000051b8 <task_hourly>:

/*
 * Task for every hour:
*/
void task_hourly(void)
{
    51b8:	cf 93       	push	r28
    uint8_t sreg;
    sreg=SREG; cli();
    51ba:	cf b7       	in	r28, 0x3f	; 63
    51bc:	f8 94       	cli
    eeprom_update_dword(&EEPROM_ADDR_secondsMeter,sysval.seconds);
    51be:	40 91 bf 0f 	lds	r20, 0x0FBF	; 0x800fbf <sysval>
    51c2:	50 91 c0 0f 	lds	r21, 0x0FC0	; 0x800fc0 <sysval+0x1>
    51c6:	60 91 c1 0f 	lds	r22, 0x0FC1	; 0x800fc1 <sysval+0x2>
    51ca:	70 91 c2 0f 	lds	r23, 0x0FC2	; 0x800fc2 <sysval+0x3>
    51ce:	8d ee       	ldi	r24, 0xED	; 237
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	0e 94 a3 32 	call	0x6546	; 0x6546 <eeprom_update_dword>
    SREG=sreg;
    51d6:	cf bf       	out	0x3f, r28	; 63

    sreg=SREG; cli();
    51d8:	cf b7       	in	r28, 0x3f	; 63
    51da:	f8 94       	cli
    eeprom_update_dword(&EEPROM_ADDR_Ws_in,sysval.Ws_in);
    51dc:	40 91 3f 10 	lds	r20, 0x103F	; 0x80103f <sysval+0x80>
    51e0:	50 91 40 10 	lds	r21, 0x1040	; 0x801040 <sysval+0x81>
    51e4:	60 91 41 10 	lds	r22, 0x1041	; 0x801041 <sysval+0x82>
    51e8:	70 91 42 10 	lds	r23, 0x1042	; 0x801042 <sysval+0x83>
    51ec:	89 ee       	ldi	r24, 0xE9	; 233
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	0e 94 a3 32 	call	0x6546	; 0x6546 <eeprom_update_dword>
    SREG=sreg;
    51f4:	cf bf       	out	0x3f, r28	; 63

    sreg=SREG; cli();
    51f6:	cf b7       	in	r28, 0x3f	; 63
    51f8:	f8 94       	cli
    eeprom_update_dword(&EEPROM_ADDR_Ws_out,sysval.Ws_out);
    51fa:	40 91 43 10 	lds	r20, 0x1043	; 0x801043 <sysval+0x84>
    51fe:	50 91 44 10 	lds	r21, 0x1044	; 0x801044 <sysval+0x85>
    5202:	60 91 45 10 	lds	r22, 0x1045	; 0x801045 <sysval+0x86>
    5206:	70 91 46 10 	lds	r23, 0x1046	; 0x801046 <sysval+0x87>
    520a:	85 ee       	ldi	r24, 0xE5	; 229
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	0e 94 a3 32 	call	0x6546	; 0x6546 <eeprom_update_dword>
    SREG=sreg;
    5212:	cf bf       	out	0x3f, r28	; 63
}
    5214:	cf 91       	pop	r28
    5216:	08 95       	ret

00005218 <task_daily>:
 * Task for a new day:
 */
void task_daily(void)
{
    // new quota for the new day
    sysval.Ws_quota  = (int32_t)eeprom_read_dword(&EEPROM_ADDR_Ws_quota);
    5218:	88 ef       	ldi	r24, 0xF8	; 248
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	0e 94 78 32 	call	0x64f0	; 0x64f0 <eeprom_read_dword>
    5220:	60 93 47 10 	sts	0x1047, r22	; 0x801047 <sysval+0x88>
    5224:	70 93 48 10 	sts	0x1048, r23	; 0x801048 <sysval+0x89>
    5228:	80 93 49 10 	sts	0x1049, r24	; 0x801049 <sysval+0x8a>
    522c:	90 93 4a 10 	sts	0x104A, r25	; 0x80104a <sysval+0x8b>
    5230:	08 95       	ret

00005232 <twi_init>:
{
    /* Initialize TWI */
    //TWBR = 0xff; 
    //TWBR = 0x80; 
    //TWBR = 0x40; 
    TWBR = 0x20; 
    5232:	80 e2       	ldi	r24, 0x20	; 32
    5234:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

    //TWSR = 0x3; // (measured) when TWBR=0xff SCL=220 Hz
    TWSR = 0x2;  // (measured) when TWBR=0xff SCL=910Hz,when TWBR=0x80 SCL=1818Hz,when TWBR=0x40 SCL=3636Hz
    5238:	82 e0       	ldi	r24, 0x02	; 2
    523a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    523e:	08 95       	ret

00005240 <twi_write_one>:
                 //            when TWBR=0x20 SCL=7143Hz
}


int twi_write_one(uint8_t slave_addr, uint8_t data)
{
    5240:	cf 93       	push	r28
    5242:	df 93       	push	r29
         return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

    /* send SLA+W */
    TWDR = (slave_addr<<1);
    5244:	88 0f       	add	r24, r24
    5246:	7a e0       	ldi	r23, 0x0A	; 10

begin:
    //printf("enter\n\r");

    /* Note [15] */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    5248:	ec eb       	ldi	r30, 0xBC	; 188
    524a:	f0 e0       	ldi	r31, 0x00	; 0
    while ((TWCR & _BV(TWINT)) == 0) { 
       // printf("twi_timeout=%d\n\r",twi_timeout);
        if(twi_timeout==0) { goto error; } 
    } /* wait for transmission */
    //printf("1\n\r");
    switch ((twst = TW_STATUS)) {
    524c:	a9 eb       	ldi	r26, 0xB9	; 185
    524e:	b0 e0       	ldi	r27, 0x00	; 0

begin:
    //printf("enter\n\r");

    /* Note [15] */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    5250:	34 ea       	ldi	r19, 0xA4	; 164
         return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

    /* send SLA+W */
    TWDR = (slave_addr<<1);
    5252:	cb eb       	ldi	r28, 0xBB	; 187
    5254:	d0 e0       	ldi	r29, 0x00	; 0
    TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    5256:	54 e8       	ldi	r21, 0x84	; 132
begin:
    //printf("enter\n\r");

    /* Note [15] */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    twi_timeout=TWI_TIMEOUT;
    5258:	48 e0       	ldi	r20, 0x08	; 8
    525a:	24 2f       	mov	r18, r20
    525c:	03 c0       	rjmp	.+6      	; 0x5264 <twi_write_one+0x24>
    525e:	71 50       	subi	r23, 0x01	; 1
{
    uint8_t n = 0;
    int rv = 0;

restart:
    if (n++ >= MAX_ITER) goto error;//return -1;
    5260:	09 f4       	brne	.+2      	; 0x5264 <twi_write_one+0x24>
    5262:	47 c0       	rjmp	.+142    	; 0x52f2 <twi_write_one+0xb2>

begin:
    //printf("enter\n\r");

    /* Note [15] */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    5264:	30 83       	st	Z, r19
    twi_timeout=TWI_TIMEOUT;
    5266:	20 93 62 10 	sts	0x1062, r18	; 0x801062 <twi_timeout>
    while ((TWCR & _BV(TWINT)) == 0) { 
    526a:	05 c0       	rjmp	.+10     	; 0x5276 <twi_write_one+0x36>
       // printf("twi_timeout=%d\n\r",twi_timeout);
        if(twi_timeout==0) { goto error; } 
    526c:	90 91 62 10 	lds	r25, 0x1062	; 0x801062 <twi_timeout>
    5270:	99 23       	and	r25, r25
    5272:	09 f4       	brne	.+2      	; 0x5276 <twi_write_one+0x36>
    5274:	41 c0       	rjmp	.+130    	; 0x52f8 <twi_write_one+0xb8>
    //printf("enter\n\r");

    /* Note [15] */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    twi_timeout=TWI_TIMEOUT;
    while ((TWCR & _BV(TWINT)) == 0) { 
    5276:	90 81       	ld	r25, Z
    5278:	99 23       	and	r25, r25
    527a:	c4 f7       	brge	.-16     	; 0x526c <twi_write_one+0x2c>
       // printf("twi_timeout=%d\n\r",twi_timeout);
        if(twi_timeout==0) { goto error; } 
    } /* wait for transmission */
    //printf("1\n\r");
    switch ((twst = TW_STATUS)) {
    527c:	9c 91       	ld	r25, X
    527e:	98 7f       	andi	r25, 0xF8	; 248
    5280:	90 93 63 10 	sts	0x1063, r25	; 0x801063 <twst>
    5284:	90 31       	cpi	r25, 0x10	; 16
    5286:	29 f0       	breq	.+10     	; 0x5292 <twi_write_one+0x52>
    5288:	98 33       	cpi	r25, 0x38	; 56
    528a:	61 f3       	breq	.-40     	; 0x5264 <twi_write_one+0x24>
    528c:	98 30       	cpi	r25, 0x08	; 8
    528e:	09 f0       	breq	.+2      	; 0x5292 <twi_write_one+0x52>
    5290:	45 c0       	rjmp	.+138    	; 0x531c <twi_write_one+0xdc>
         return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

    /* send SLA+W */
    TWDR = (slave_addr<<1);
    5292:	88 83       	st	Y, r24
    TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    5294:	50 83       	st	Z, r21
    twi_timeout=TWI_TIMEOUT;
    5296:	20 93 62 10 	sts	0x1062, r18	; 0x801062 <twi_timeout>
    while ((TWCR & _BV(TWINT)) == 0) { if(twi_timeout==0) { goto error; } } /* wait for transmission */
    529a:	04 c0       	rjmp	.+8      	; 0x52a4 <twi_write_one+0x64>
    529c:	90 91 62 10 	lds	r25, 0x1062	; 0x801062 <twi_timeout>
    52a0:	99 23       	and	r25, r25
    52a2:	69 f1       	breq	.+90     	; 0x52fe <twi_write_one+0xbe>
    52a4:	90 81       	ld	r25, Z
    52a6:	99 23       	and	r25, r25
    52a8:	cc f7       	brge	.-14     	; 0x529c <twi_write_one+0x5c>
    //printf("2\n\r");
    switch ((twst = TW_STATUS)) {
    52aa:	9c 91       	ld	r25, X
    52ac:	98 7f       	andi	r25, 0xF8	; 248
    52ae:	90 93 63 10 	sts	0x1063, r25	; 0x801063 <twst>
    52b2:	90 32       	cpi	r25, 0x20	; 32
    52b4:	a1 f2       	breq	.-88     	; 0x525e <twi_write_one+0x1e>
    52b6:	98 33       	cpi	r25, 0x38	; 56
    52b8:	a9 f2       	breq	.-86     	; 0x5264 <twi_write_one+0x24>
    52ba:	98 31       	cpi	r25, 0x18	; 24
    52bc:	19 f5       	brne	.+70     	; 0x5304 <twi_write_one+0xc4>
         goto error;		/* must send stop condition */
    }

    

    TWDR = data; 
    52be:	68 83       	st	Y, r22
    TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transm */
    52c0:	50 83       	st	Z, r21
    twi_timeout=TWI_TIMEOUT;
    52c2:	40 93 62 10 	sts	0x1062, r20	; 0x801062 <twi_timeout>
    while ((TWCR & _BV(TWINT)) == 0) { if(twi_timeout==0) { goto error; } } /* wait for transmission */
    52c6:	04 c0       	rjmp	.+8      	; 0x52d0 <twi_write_one+0x90>
    52c8:	90 91 62 10 	lds	r25, 0x1062	; 0x801062 <twi_timeout>
    52cc:	99 23       	and	r25, r25
    52ce:	e9 f0       	breq	.+58     	; 0x530a <twi_write_one+0xca>
    52d0:	90 81       	ld	r25, Z
    52d2:	99 23       	and	r25, r25
    52d4:	cc f7       	brge	.-14     	; 0x52c8 <twi_write_one+0x88>
    //printf("3\n\r");
    switch ((twst = TW_STATUS)) {
    52d6:	9c 91       	ld	r25, X
    52d8:	98 7f       	andi	r25, 0xF8	; 248
    52da:	90 93 63 10 	sts	0x1063, r25	; 0x801063 <twst>
    52de:	90 33       	cpi	r25, 0x30	; 48
    52e0:	b9 f0       	breq	.+46     	; 0x5310 <twi_write_one+0xd0>
    52e2:	98 33       	cpi	r25, 0x38	; 56
    52e4:	09 f4       	brne	.+2      	; 0x52e8 <twi_write_one+0xa8>
    52e6:	be cf       	rjmp	.-132    	; 0x5264 <twi_write_one+0x24>
    52e8:	98 32       	cpi	r25, 0x28	; 40
    52ea:	91 f0       	breq	.+36     	; 0x5310 <twi_write_one+0xd0>

    return rv;

error:
    //printf("error\n\r");
    rv = -1;
    52ec:	8f ef       	ldi	r24, 0xFF	; 255
    52ee:	9f ef       	ldi	r25, 0xFF	; 255
    52f0:	11 c0       	rjmp	.+34     	; 0x5314 <twi_write_one+0xd4>
    52f2:	8f ef       	ldi	r24, 0xFF	; 255
    52f4:	9f ef       	ldi	r25, 0xFF	; 255
    52f6:	0e c0       	rjmp	.+28     	; 0x5314 <twi_write_one+0xd4>
    52f8:	8f ef       	ldi	r24, 0xFF	; 255
    52fa:	9f ef       	ldi	r25, 0xFF	; 255
    52fc:	0b c0       	rjmp	.+22     	; 0x5314 <twi_write_one+0xd4>
    52fe:	8f ef       	ldi	r24, 0xFF	; 255
    5300:	9f ef       	ldi	r25, 0xFF	; 255
    5302:	08 c0       	rjmp	.+16     	; 0x5314 <twi_write_one+0xd4>
    5304:	8f ef       	ldi	r24, 0xFF	; 255
    5306:	9f ef       	ldi	r25, 0xFF	; 255
    5308:	05 c0       	rjmp	.+10     	; 0x5314 <twi_write_one+0xd4>
    530a:	8f ef       	ldi	r24, 0xFF	; 255
    530c:	9f ef       	ldi	r25, 0xFF	; 255
    530e:	02 c0       	rjmp	.+4      	; 0x5314 <twi_write_one+0xd4>


int twi_write_one(uint8_t slave_addr, uint8_t data)
{
    uint8_t n = 0;
    int rv = 0;
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	90 e0       	ldi	r25, 0x00	; 0
        goto error;		/* must send stop condition */
    }
    
quit:
    //printf("stop\n\r");
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    5314:	24 e9       	ldi	r18, 0x94	; 148
    5316:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    return rv;
    531a:	02 c0       	rjmp	.+4      	; 0x5320 <twi_write_one+0xe0>

       case TW_MT_ARB_LOST:
         goto begin;

       default:
         return -1;		/* error: not in start condition */
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	9f ef       	ldi	r25, 0xFF	; 255

error:
    //printf("error\n\r");
    rv = -1;
    goto quit;
}
    5320:	df 91       	pop	r29
    5322:	cf 91       	pop	r28
    5324:	08 95       	ret

00005326 <twi_read_small>:



int twi_read_small( int len, uint8_t *buf, uint8_t slave_addr)
{
    5326:	cf 92       	push	r12
    5328:	df 92       	push	r13
    532a:	ef 92       	push	r14
    532c:	ff 92       	push	r15
    532e:	0f 93       	push	r16
    5330:	1f 93       	push	r17
    5332:	cf 93       	push	r28
    5334:	df 93       	push	r29
    5336:	6c 01       	movw	r12, r24
         return -1;                /* error: not in start condition */
                                   /* NB: do /not/ send stop condition */
    }

    /* send SLA+R */
    TWDR = (slave_addr<<1) | 1;
    5338:	44 0f       	add	r20, r20
    533a:	41 60       	ori	r20, 0x01	; 1
    uint8_t twcr;
    int rv = 0;


begin:
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    533c:	ec eb       	ldi	r30, 0xBC	; 188
    533e:	f0 e0       	ldi	r31, 0x00	; 0
    twi_timeout=TWI_TIMEOUT;
    while ((TWCR & _BV(TWINT)) == 0) { if(twi_timeout==0) { goto error; } } /* wait for transmission */
    switch ((twst = TW_STATUS)) {
    5340:	c9 eb       	ldi	r28, 0xB9	; 185
    5342:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t twcr;
    int rv = 0;


begin:
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    5344:	84 ea       	ldi	r24, 0xA4	; 164
    twi_timeout=TWI_TIMEOUT;
    5346:	28 e0       	ldi	r18, 0x08	; 8
         return -1;                /* error: not in start condition */
                                   /* NB: do /not/ send stop condition */
    }

    /* send SLA+R */
    TWDR = (slave_addr<<1) | 1;
    5348:	0b eb       	ldi	r16, 0xBB	; 187
    534a:	10 e0       	ldi	r17, 0x00	; 0
    TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    534c:	34 e8       	ldi	r19, 0x84	; 132
    uint8_t twcr;
    int rv = 0;


begin:
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    534e:	80 83       	st	Z, r24
    twi_timeout=TWI_TIMEOUT;
    5350:	20 93 62 10 	sts	0x1062, r18	; 0x801062 <twi_timeout>
    while ((TWCR & _BV(TWINT)) == 0) { if(twi_timeout==0) { goto error; } } /* wait for transmission */
    5354:	05 c0       	rjmp	.+10     	; 0x5360 <twi_read_small+0x3a>
    5356:	90 91 62 10 	lds	r25, 0x1062	; 0x801062 <twi_timeout>
    535a:	99 23       	and	r25, r25
    535c:	09 f4       	brne	.+2      	; 0x5360 <twi_read_small+0x3a>
    535e:	67 c0       	rjmp	.+206    	; 0x542e <twi_read_small+0x108>
    5360:	90 81       	ld	r25, Z
    5362:	99 23       	and	r25, r25
    5364:	c4 f7       	brge	.-16     	; 0x5356 <twi_read_small+0x30>
    switch ((twst = TW_STATUS)) {
    5366:	98 81       	ld	r25, Y
    5368:	98 7f       	andi	r25, 0xF8	; 248
    536a:	90 93 63 10 	sts	0x1063, r25	; 0x801063 <twst>
    536e:	90 31       	cpi	r25, 0x10	; 16
    5370:	29 f0       	breq	.+10     	; 0x537c <twi_read_small+0x56>
    5372:	98 33       	cpi	r25, 0x38	; 56
    5374:	61 f3       	breq	.-40     	; 0x534e <twi_read_small+0x28>
    5376:	98 30       	cpi	r25, 0x08	; 8
    5378:	09 f0       	breq	.+2      	; 0x537c <twi_read_small+0x56>
    537a:	70 c0       	rjmp	.+224    	; 0x545c <twi_read_small+0x136>
         return -1;                /* error: not in start condition */
                                   /* NB: do /not/ send stop condition */
    }

    /* send SLA+R */
    TWDR = (slave_addr<<1) | 1;
    537c:	d8 01       	movw	r26, r16
    537e:	4c 93       	st	X, r20
    TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    5380:	30 83       	st	Z, r19
    twi_timeout=TWI_TIMEOUT;
    5382:	20 93 62 10 	sts	0x1062, r18	; 0x801062 <twi_timeout>
    while ((TWCR & _BV(TWINT)) == 0) { if(twi_timeout==0) { goto error; } } /* wait for transmission */
    5386:	05 c0       	rjmp	.+10     	; 0x5392 <twi_read_small+0x6c>
    5388:	90 91 62 10 	lds	r25, 0x1062	; 0x801062 <twi_timeout>
    538c:	99 23       	and	r25, r25
    538e:	09 f4       	brne	.+2      	; 0x5392 <twi_read_small+0x6c>
    5390:	51 c0       	rjmp	.+162    	; 0x5434 <twi_read_small+0x10e>
    5392:	90 81       	ld	r25, Z
    5394:	99 23       	and	r25, r25
    5396:	c4 f7       	brge	.-16     	; 0x5388 <twi_read_small+0x62>
    switch ((twst = TW_STATUS)) {
    5398:	98 81       	ld	r25, Y
    539a:	98 7f       	andi	r25, 0xF8	; 248
    539c:	90 93 63 10 	sts	0x1063, r25	; 0x801063 <twst>
    53a0:	90 34       	cpi	r25, 0x40	; 64
    53a2:	41 f0       	breq	.+16     	; 0x53b4 <twi_read_small+0x8e>
    53a4:	98 34       	cpi	r25, 0x48	; 72
    53a6:	09 f4       	brne	.+2      	; 0x53aa <twi_read_small+0x84>
    53a8:	48 c0       	rjmp	.+144    	; 0x543a <twi_read_small+0x114>
    53aa:	98 33       	cpi	r25, 0x38	; 56
    53ac:	81 f2       	breq	.-96     	; 0x534e <twi_read_small+0x28>
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

    return rv;

error:
    rv = -1;
    53ae:	2f ef       	ldi	r18, 0xFF	; 255
    53b0:	3f ef       	ldi	r19, 0xFF	; 255
    53b2:	4e c0       	rjmp	.+156    	; 0x5450 <twi_read_small+0x12a>
      default:
        goto error;
    }


    for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    53b4:	1c 14       	cp	r1, r12
    53b6:	1d 04       	cpc	r1, r13
    53b8:	0c f0       	brlt	.+2      	; 0x53bc <twi_read_small+0x96>
    53ba:	42 c0       	rjmp	.+132    	; 0x5440 <twi_read_small+0x11a>
    53bc:	46 2f       	mov	r20, r22
    53be:	57 2f       	mov	r21, r23
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	94 ec       	ldi	r25, 0xC4	; 196
         len > 0;
         len--)
    {
        if (len == 1) twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
    53c6:	0f 2e       	mov	r0, r31
    53c8:	f4 e8       	ldi	r31, 0x84	; 132
    53ca:	ef 2e       	mov	r14, r31
    53cc:	f0 2d       	mov	r31, r0

        TWCR = twcr;		/* clear int to start transmission */
    53ce:	ec eb       	ldi	r30, 0xBC	; 188
    53d0:	f0 e0       	ldi	r31, 0x00	; 0
        twi_timeout=TWI_TIMEOUT;
    53d2:	68 94       	set
    53d4:	ff 24       	eor	r15, r15
    53d6:	f3 f8       	bld	r15, 3
        while ((TWCR & _BV(TWINT)) == 0) { if(twi_timeout==0) { goto error; } } /* wait for transmission */
        switch ((twst = TW_STATUS)) {
    53d8:	09 eb       	ldi	r16, 0xB9	; 185
    53da:	10 e0       	ldi	r17, 0x00	; 0
  	  case TW_MR_DATA_NACK:
	    len = 0;		/* force end of loop */
	    /* FALLTHROUGH */
	  case TW_MR_DATA_ACK:
	    *buf++ = TWDR;
    53dc:	6b eb       	ldi	r22, 0xBB	; 187
    53de:	70 e0       	ldi	r23, 0x00	; 0
    53e0:	ea 01       	movw	r28, r20

    for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
         len > 0;
         len--)
    {
        if (len == 1) twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
    53e2:	b1 e0       	ldi	r27, 0x01	; 1
    53e4:	cb 16       	cp	r12, r27
    53e6:	d1 04       	cpc	r13, r1
    53e8:	09 f4       	brne	.+2      	; 0x53ec <twi_read_small+0xc6>
    53ea:	9e 2d       	mov	r25, r14

        TWCR = twcr;		/* clear int to start transmission */
    53ec:	90 83       	st	Z, r25
        twi_timeout=TWI_TIMEOUT;
    53ee:	f0 92 62 10 	sts	0x1062, r15	; 0x801062 <twi_timeout>
        while ((TWCR & _BV(TWINT)) == 0) { if(twi_timeout==0) { goto error; } } /* wait for transmission */
    53f2:	04 c0       	rjmp	.+8      	; 0x53fc <twi_read_small+0xd6>
    53f4:	80 91 62 10 	lds	r24, 0x1062	; 0x801062 <twi_timeout>
    53f8:	88 23       	and	r24, r24
    53fa:	29 f1       	breq	.+74     	; 0x5446 <twi_read_small+0x120>
    53fc:	80 81       	ld	r24, Z
    53fe:	88 23       	and	r24, r24
    5400:	cc f7       	brge	.-14     	; 0x53f4 <twi_read_small+0xce>
        switch ((twst = TW_STATUS)) {
    5402:	d8 01       	movw	r26, r16
    5404:	8c 91       	ld	r24, X
    5406:	88 7f       	andi	r24, 0xF8	; 248
    5408:	80 93 63 10 	sts	0x1063, r24	; 0x801063 <twst>
    540c:	80 35       	cpi	r24, 0x50	; 80
    540e:	19 f0       	breq	.+6      	; 0x5416 <twi_read_small+0xf0>
    5410:	88 35       	cpi	r24, 0x58	; 88
    5412:	39 f1       	breq	.+78     	; 0x5462 <twi_read_small+0x13c>
    5414:	1b c0       	rjmp	.+54     	; 0x544c <twi_read_small+0x126>
  	  case TW_MR_DATA_NACK:
	    len = 0;		/* force end of loop */
	    /* FALLTHROUGH */
	  case TW_MR_DATA_ACK:
	    *buf++ = TWDR;
    5416:	db 01       	movw	r26, r22
    5418:	8c 91       	ld	r24, X
    541a:	88 83       	st	Y, r24
    541c:	4f 5f       	subi	r20, 0xFF	; 255
    541e:	5f 4f       	sbci	r21, 0xFF	; 255
	    rv++;
    5420:	2f 5f       	subi	r18, 0xFF	; 255
    5422:	3f 4f       	sbci	r19, 0xFF	; 255
    }


    for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
         len > 0;
         len--)
    5424:	b1 e0       	ldi	r27, 0x01	; 1
    5426:	cb 1a       	sub	r12, r27
    5428:	d1 08       	sbc	r13, r1
      default:
        goto error;
    }


    for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    542a:	d1 f6       	brne	.-76     	; 0x53e0 <twi_read_small+0xba>
    542c:	11 c0       	rjmp	.+34     	; 0x5450 <twi_read_small+0x12a>
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

    return rv;

error:
    rv = -1;
    542e:	2f ef       	ldi	r18, 0xFF	; 255
    5430:	3f ef       	ldi	r19, 0xFF	; 255
    5432:	0e c0       	rjmp	.+28     	; 0x5450 <twi_read_small+0x12a>
    5434:	2f ef       	ldi	r18, 0xFF	; 255
    5436:	3f ef       	ldi	r19, 0xFF	; 255
    5438:	0b c0       	rjmp	.+22     	; 0x5450 <twi_read_small+0x12a>


int twi_read_small( int len, uint8_t *buf, uint8_t slave_addr)
{
    uint8_t twcr;
    int rv = 0;
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	08 c0       	rjmp	.+16     	; 0x5450 <twi_read_small+0x12a>
      default:
        goto error;
    }


    for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    5440:	20 e0       	ldi	r18, 0x00	; 0
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	05 c0       	rjmp	.+10     	; 0x5450 <twi_read_small+0x12a>
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

    return rv;

error:
    rv = -1;
    5446:	2f ef       	ldi	r18, 0xFF	; 255
    5448:	3f ef       	ldi	r19, 0xFF	; 255
    544a:	02 c0       	rjmp	.+4      	; 0x5450 <twi_read_small+0x12a>
    544c:	2f ef       	ldi	r18, 0xFF	; 255
    544e:	3f ef       	ldi	r19, 0xFF	; 255
	}
    }
quit:

    /* Note [14] */
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    5450:	84 e9       	ldi	r24, 0x94	; 148
    5452:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    return rv;
    5456:	82 2f       	mov	r24, r18
    5458:	93 2f       	mov	r25, r19
    545a:	09 c0       	rjmp	.+18     	; 0x546e <twi_read_small+0x148>

       case TW_MT_ARB_LOST:        /* Note [9] */
         goto begin;

       default:
         return -1;                /* error: not in start condition */
    545c:	8f ef       	ldi	r24, 0xFF	; 255
    545e:	9f ef       	ldi	r25, 0xFF	; 255
    5460:	06 c0       	rjmp	.+12     	; 0x546e <twi_read_small+0x148>
        switch ((twst = TW_STATUS)) {
  	  case TW_MR_DATA_NACK:
	    len = 0;		/* force end of loop */
	    /* FALLTHROUGH */
	  case TW_MR_DATA_ACK:
	    *buf++ = TWDR;
    5462:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5466:	88 83       	st	Y, r24
	    rv++;
    5468:	2f 5f       	subi	r18, 0xFF	; 255
    546a:	3f 4f       	sbci	r19, 0xFF	; 255
    546c:	f1 cf       	rjmp	.-30     	; 0x5450 <twi_read_small+0x12a>
    return rv;

error:
    rv = -1;
    goto quit;
}
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	1f 91       	pop	r17
    5474:	0f 91       	pop	r16
    5476:	ff 90       	pop	r15
    5478:	ef 90       	pop	r14
    547a:	df 90       	pop	r13
    547c:	cf 90       	pop	r12
    547e:	08 95       	ret

00005480 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    5480:	cf 93       	push	r28
    5482:	c8 2f       	mov	r28, r24
  if (c == '\n')
    5484:	8a 30       	cpi	r24, 0x0A	; 10
    5486:	11 f4       	brne	.+4      	; 0x548c <uart_putchar+0xc>
    uart_putchar('\r', stream);
    5488:	8d e0       	ldi	r24, 0x0D	; 13
    548a:	fa df       	rcall	.-12     	; 0x5480 <uart_putchar>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    548c:	e0 ec       	ldi	r30, 0xC0	; 192
    548e:	f0 e0       	ldi	r31, 0x00	; 0
    5490:	80 81       	ld	r24, Z
    5492:	85 ff       	sbrs	r24, 5
    5494:	fd cf       	rjmp	.-6      	; 0x5490 <uart_putchar+0x10>
  UDR0 = c;
    5496:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

  return 0;
}
    549a:	80 e0       	ldi	r24, 0x00	; 0
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	cf 91       	pop	r28
    54a0:	08 95       	ret

000054a2 <__udivmodhi4>:
    54a2:	aa 1b       	sub	r26, r26
    54a4:	bb 1b       	sub	r27, r27
    54a6:	51 e1       	ldi	r21, 0x11	; 17
    54a8:	07 c0       	rjmp	.+14     	; 0x54b8 <__udivmodhi4_ep>

000054aa <__udivmodhi4_loop>:
    54aa:	aa 1f       	adc	r26, r26
    54ac:	bb 1f       	adc	r27, r27
    54ae:	a6 17       	cp	r26, r22
    54b0:	b7 07       	cpc	r27, r23
    54b2:	10 f0       	brcs	.+4      	; 0x54b8 <__udivmodhi4_ep>
    54b4:	a6 1b       	sub	r26, r22
    54b6:	b7 0b       	sbc	r27, r23

000054b8 <__udivmodhi4_ep>:
    54b8:	88 1f       	adc	r24, r24
    54ba:	99 1f       	adc	r25, r25
    54bc:	5a 95       	dec	r21
    54be:	a9 f7       	brne	.-22     	; 0x54aa <__udivmodhi4_loop>
    54c0:	80 95       	com	r24
    54c2:	90 95       	com	r25
    54c4:	bc 01       	movw	r22, r24
    54c6:	cd 01       	movw	r24, r26
    54c8:	08 95       	ret

000054ca <__divmodhi4>:
    54ca:	97 fb       	bst	r25, 7
    54cc:	07 2e       	mov	r0, r23
    54ce:	16 f4       	brtc	.+4      	; 0x54d4 <__divmodhi4+0xa>
    54d0:	00 94       	com	r0
    54d2:	06 d0       	rcall	.+12     	; 0x54e0 <__divmodhi4_neg1>
    54d4:	77 fd       	sbrc	r23, 7
    54d6:	08 d0       	rcall	.+16     	; 0x54e8 <__divmodhi4_neg2>
    54d8:	e4 df       	rcall	.-56     	; 0x54a2 <__udivmodhi4>
    54da:	07 fc       	sbrc	r0, 7
    54dc:	05 d0       	rcall	.+10     	; 0x54e8 <__divmodhi4_neg2>
    54de:	3e f4       	brtc	.+14     	; 0x54ee <__divmodhi4_exit>

000054e0 <__divmodhi4_neg1>:
    54e0:	90 95       	com	r25
    54e2:	81 95       	neg	r24
    54e4:	9f 4f       	sbci	r25, 0xFF	; 255
    54e6:	08 95       	ret

000054e8 <__divmodhi4_neg2>:
    54e8:	70 95       	com	r23
    54ea:	61 95       	neg	r22
    54ec:	7f 4f       	sbci	r23, 0xFF	; 255

000054ee <__divmodhi4_exit>:
    54ee:	08 95       	ret

000054f0 <__udivmodsi4>:
    54f0:	a1 e2       	ldi	r26, 0x21	; 33
    54f2:	1a 2e       	mov	r1, r26
    54f4:	aa 1b       	sub	r26, r26
    54f6:	bb 1b       	sub	r27, r27
    54f8:	fd 01       	movw	r30, r26
    54fa:	0d c0       	rjmp	.+26     	; 0x5516 <__udivmodsi4_ep>

000054fc <__udivmodsi4_loop>:
    54fc:	aa 1f       	adc	r26, r26
    54fe:	bb 1f       	adc	r27, r27
    5500:	ee 1f       	adc	r30, r30
    5502:	ff 1f       	adc	r31, r31
    5504:	a2 17       	cp	r26, r18
    5506:	b3 07       	cpc	r27, r19
    5508:	e4 07       	cpc	r30, r20
    550a:	f5 07       	cpc	r31, r21
    550c:	20 f0       	brcs	.+8      	; 0x5516 <__udivmodsi4_ep>
    550e:	a2 1b       	sub	r26, r18
    5510:	b3 0b       	sbc	r27, r19
    5512:	e4 0b       	sbc	r30, r20
    5514:	f5 0b       	sbc	r31, r21

00005516 <__udivmodsi4_ep>:
    5516:	66 1f       	adc	r22, r22
    5518:	77 1f       	adc	r23, r23
    551a:	88 1f       	adc	r24, r24
    551c:	99 1f       	adc	r25, r25
    551e:	1a 94       	dec	r1
    5520:	69 f7       	brne	.-38     	; 0x54fc <__udivmodsi4_loop>
    5522:	60 95       	com	r22
    5524:	70 95       	com	r23
    5526:	80 95       	com	r24
    5528:	90 95       	com	r25
    552a:	9b 01       	movw	r18, r22
    552c:	ac 01       	movw	r20, r24
    552e:	bd 01       	movw	r22, r26
    5530:	cf 01       	movw	r24, r30
    5532:	08 95       	ret

00005534 <__divmodsi4>:
    5534:	05 2e       	mov	r0, r21
    5536:	97 fb       	bst	r25, 7
    5538:	16 f4       	brtc	.+4      	; 0x553e <__divmodsi4+0xa>
    553a:	00 94       	com	r0
    553c:	0f d0       	rcall	.+30     	; 0x555c <__negsi2>
    553e:	57 fd       	sbrc	r21, 7
    5540:	05 d0       	rcall	.+10     	; 0x554c <__divmodsi4_neg2>
    5542:	d6 df       	rcall	.-84     	; 0x54f0 <__udivmodsi4>
    5544:	07 fc       	sbrc	r0, 7
    5546:	02 d0       	rcall	.+4      	; 0x554c <__divmodsi4_neg2>
    5548:	46 f4       	brtc	.+16     	; 0x555a <__divmodsi4_exit>
    554a:	08 c0       	rjmp	.+16     	; 0x555c <__negsi2>

0000554c <__divmodsi4_neg2>:
    554c:	50 95       	com	r21
    554e:	40 95       	com	r20
    5550:	30 95       	com	r19
    5552:	21 95       	neg	r18
    5554:	3f 4f       	sbci	r19, 0xFF	; 255
    5556:	4f 4f       	sbci	r20, 0xFF	; 255
    5558:	5f 4f       	sbci	r21, 0xFF	; 255

0000555a <__divmodsi4_exit>:
    555a:	08 95       	ret

0000555c <__negsi2>:
    555c:	90 95       	com	r25
    555e:	80 95       	com	r24
    5560:	70 95       	com	r23
    5562:	61 95       	neg	r22
    5564:	7f 4f       	sbci	r23, 0xFF	; 255
    5566:	8f 4f       	sbci	r24, 0xFF	; 255
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	08 95       	ret

0000556c <__umulhisi3>:
    556c:	a2 9f       	mul	r26, r18
    556e:	b0 01       	movw	r22, r0
    5570:	b3 9f       	mul	r27, r19
    5572:	c0 01       	movw	r24, r0
    5574:	a3 9f       	mul	r26, r19
    5576:	70 0d       	add	r23, r0
    5578:	81 1d       	adc	r24, r1
    557a:	11 24       	eor	r1, r1
    557c:	91 1d       	adc	r25, r1
    557e:	b2 9f       	mul	r27, r18
    5580:	70 0d       	add	r23, r0
    5582:	81 1d       	adc	r24, r1
    5584:	11 24       	eor	r1, r1
    5586:	91 1d       	adc	r25, r1
    5588:	08 95       	ret

0000558a <__muluhisi3>:
    558a:	f0 df       	rcall	.-32     	; 0x556c <__umulhisi3>
    558c:	a5 9f       	mul	r26, r21
    558e:	90 0d       	add	r25, r0
    5590:	b4 9f       	mul	r27, r20
    5592:	90 0d       	add	r25, r0
    5594:	a4 9f       	mul	r26, r20
    5596:	80 0d       	add	r24, r0
    5598:	91 1d       	adc	r25, r1
    559a:	11 24       	eor	r1, r1
    559c:	08 95       	ret

0000559e <__mulshisi3>:
    559e:	b7 ff       	sbrs	r27, 7
    55a0:	f4 cf       	rjmp	.-24     	; 0x558a <__muluhisi3>

000055a2 <__mulohisi3>:
    55a2:	f3 df       	rcall	.-26     	; 0x558a <__muluhisi3>
    55a4:	82 1b       	sub	r24, r18
    55a6:	93 0b       	sbc	r25, r19
    55a8:	08 95       	ret

000055aa <atoi>:
    55aa:	fc 01       	movw	r30, r24
    55ac:	88 27       	eor	r24, r24
    55ae:	99 27       	eor	r25, r25
    55b0:	e8 94       	clt
    55b2:	21 91       	ld	r18, Z+
    55b4:	20 32       	cpi	r18, 0x20	; 32
    55b6:	e9 f3       	breq	.-6      	; 0x55b2 <atoi+0x8>
    55b8:	29 30       	cpi	r18, 0x09	; 9
    55ba:	10 f0       	brcs	.+4      	; 0x55c0 <atoi+0x16>
    55bc:	2e 30       	cpi	r18, 0x0E	; 14
    55be:	c8 f3       	brcs	.-14     	; 0x55b2 <atoi+0x8>
    55c0:	2b 32       	cpi	r18, 0x2B	; 43
    55c2:	39 f0       	breq	.+14     	; 0x55d2 <atoi+0x28>
    55c4:	2d 32       	cpi	r18, 0x2D	; 45
    55c6:	31 f4       	brne	.+12     	; 0x55d4 <atoi+0x2a>
    55c8:	68 94       	set
    55ca:	03 c0       	rjmp	.+6      	; 0x55d2 <atoi+0x28>
    55cc:	b2 d0       	rcall	.+356    	; 0x5732 <__mulhi_const_10>
    55ce:	82 0f       	add	r24, r18
    55d0:	91 1d       	adc	r25, r1
    55d2:	21 91       	ld	r18, Z+
    55d4:	20 53       	subi	r18, 0x30	; 48
    55d6:	2a 30       	cpi	r18, 0x0A	; 10
    55d8:	c8 f3       	brcs	.-14     	; 0x55cc <atoi+0x22>
    55da:	1e f4       	brtc	.+6      	; 0x55e2 <atoi+0x38>
    55dc:	90 95       	com	r25
    55de:	81 95       	neg	r24
    55e0:	9f 4f       	sbci	r25, 0xFF	; 255
    55e2:	08 95       	ret

000055e4 <atol>:
    55e4:	1f 93       	push	r17
    55e6:	fc 01       	movw	r30, r24
    55e8:	99 27       	eor	r25, r25
    55ea:	88 27       	eor	r24, r24
    55ec:	bc 01       	movw	r22, r24
    55ee:	e8 94       	clt
    55f0:	11 91       	ld	r17, Z+
    55f2:	10 32       	cpi	r17, 0x20	; 32
    55f4:	e9 f3       	breq	.-6      	; 0x55f0 <atol+0xc>
    55f6:	19 30       	cpi	r17, 0x09	; 9
    55f8:	10 f0       	brcs	.+4      	; 0x55fe <atol+0x1a>
    55fa:	1e 30       	cpi	r17, 0x0E	; 14
    55fc:	c8 f3       	brcs	.-14     	; 0x55f0 <atol+0xc>
    55fe:	1b 32       	cpi	r17, 0x2B	; 43
    5600:	49 f0       	breq	.+18     	; 0x5614 <atol+0x30>
    5602:	1d 32       	cpi	r17, 0x2D	; 45
    5604:	41 f4       	brne	.+16     	; 0x5616 <atol+0x32>
    5606:	68 94       	set
    5608:	05 c0       	rjmp	.+10     	; 0x5614 <atol+0x30>
    560a:	7e d0       	rcall	.+252    	; 0x5708 <__mulsi_const_10>
    560c:	61 0f       	add	r22, r17
    560e:	71 1d       	adc	r23, r1
    5610:	81 1d       	adc	r24, r1
    5612:	91 1d       	adc	r25, r1
    5614:	11 91       	ld	r17, Z+
    5616:	10 53       	subi	r17, 0x30	; 48
    5618:	1a 30       	cpi	r17, 0x0A	; 10
    561a:	b8 f3       	brcs	.-18     	; 0x560a <atol+0x26>
    561c:	3e f4       	brtc	.+14     	; 0x562c <atol+0x48>
    561e:	90 95       	com	r25
    5620:	80 95       	com	r24
    5622:	70 95       	com	r23
    5624:	61 95       	neg	r22
    5626:	7f 4f       	sbci	r23, 0xFF	; 255
    5628:	8f 4f       	sbci	r24, 0xFF	; 255
    562a:	9f 4f       	sbci	r25, 0xFF	; 255
    562c:	1f 91       	pop	r17
    562e:	08 95       	ret

00005630 <isalnum>:
    5630:	91 11       	cpse	r25, r1
    5632:	06 c0       	rjmp	.+12     	; 0x5640 <__ctype_isfalse>
    5634:	80 53       	subi	r24, 0x30	; 48
    5636:	8a 50       	subi	r24, 0x0A	; 10
    5638:	10 f0       	brcs	.+4      	; 0x563e <isalnum+0xe>
    563a:	86 5c       	subi	r24, 0xC6	; 198
    563c:	06 c0       	rjmp	.+12     	; 0x564a <isalpha>
    563e:	08 95       	ret

00005640 <__ctype_isfalse>:
    5640:	99 27       	eor	r25, r25
    5642:	88 27       	eor	r24, r24

00005644 <__ctype_istrue>:
    5644:	08 95       	ret

00005646 <isupper>:
    5646:	85 fd       	sbrc	r24, 5
    5648:	fb cf       	rjmp	.-10     	; 0x5640 <__ctype_isfalse>

0000564a <isalpha>:
    564a:	80 62       	ori	r24, 0x20	; 32

0000564c <islower>:
    564c:	91 11       	cpse	r25, r1
    564e:	f8 cf       	rjmp	.-16     	; 0x5640 <__ctype_isfalse>
    5650:	81 56       	subi	r24, 0x61	; 97
    5652:	8a 51       	subi	r24, 0x1A	; 26
    5654:	e0 f7       	brcc	.-8      	; 0x564e <islower+0x2>
    5656:	08 95       	ret

00005658 <isspace>:
    5658:	91 11       	cpse	r25, r1
    565a:	f2 cf       	rjmp	.-28     	; 0x5640 <__ctype_isfalse>
    565c:	80 32       	cpi	r24, 0x20	; 32
    565e:	19 f0       	breq	.+6      	; 0x5666 <isspace+0xe>
    5660:	89 50       	subi	r24, 0x09	; 9
    5662:	85 50       	subi	r24, 0x05	; 5
    5664:	d0 f7       	brcc	.-12     	; 0x565a <isspace+0x2>
    5666:	08 95       	ret

00005668 <strcmp>:
    5668:	fb 01       	movw	r30, r22
    566a:	dc 01       	movw	r26, r24
    566c:	8d 91       	ld	r24, X+
    566e:	01 90       	ld	r0, Z+
    5670:	80 19       	sub	r24, r0
    5672:	01 10       	cpse	r0, r1
    5674:	d9 f3       	breq	.-10     	; 0x566c <strcmp+0x4>
    5676:	99 0b       	sbc	r25, r25
    5678:	08 95       	ret

0000567a <strcpy>:
    567a:	fb 01       	movw	r30, r22
    567c:	dc 01       	movw	r26, r24
    567e:	01 90       	ld	r0, Z+
    5680:	0d 92       	st	X+, r0
    5682:	00 20       	and	r0, r0
    5684:	e1 f7       	brne	.-8      	; 0x567e <strcpy+0x4>
    5686:	08 95       	ret

00005688 <strncasecmp>:
    5688:	fb 01       	movw	r30, r22
    568a:	dc 01       	movw	r26, r24
    568c:	41 50       	subi	r20, 0x01	; 1
    568e:	50 40       	sbci	r21, 0x00	; 0
    5690:	88 f0       	brcs	.+34     	; 0x56b4 <strncasecmp+0x2c>
    5692:	8d 91       	ld	r24, X+
    5694:	81 34       	cpi	r24, 0x41	; 65
    5696:	1c f0       	brlt	.+6      	; 0x569e <strncasecmp+0x16>
    5698:	8b 35       	cpi	r24, 0x5B	; 91
    569a:	0c f4       	brge	.+2      	; 0x569e <strncasecmp+0x16>
    569c:	80 5e       	subi	r24, 0xE0	; 224
    569e:	61 91       	ld	r22, Z+
    56a0:	61 34       	cpi	r22, 0x41	; 65
    56a2:	1c f0       	brlt	.+6      	; 0x56aa <strncasecmp+0x22>
    56a4:	6b 35       	cpi	r22, 0x5B	; 91
    56a6:	0c f4       	brge	.+2      	; 0x56aa <strncasecmp+0x22>
    56a8:	60 5e       	subi	r22, 0xE0	; 224
    56aa:	86 1b       	sub	r24, r22
    56ac:	61 11       	cpse	r22, r1
    56ae:	71 f3       	breq	.-36     	; 0x568c <strncasecmp+0x4>
    56b0:	99 0b       	sbc	r25, r25
    56b2:	08 95       	ret
    56b4:	88 1b       	sub	r24, r24
    56b6:	fc cf       	rjmp	.-8      	; 0x56b0 <strncasecmp+0x28>

000056b8 <strncmp>:
    56b8:	fb 01       	movw	r30, r22
    56ba:	dc 01       	movw	r26, r24
    56bc:	41 50       	subi	r20, 0x01	; 1
    56be:	50 40       	sbci	r21, 0x00	; 0
    56c0:	30 f0       	brcs	.+12     	; 0x56ce <strncmp+0x16>
    56c2:	8d 91       	ld	r24, X+
    56c4:	01 90       	ld	r0, Z+
    56c6:	80 19       	sub	r24, r0
    56c8:	19 f4       	brne	.+6      	; 0x56d0 <strncmp+0x18>
    56ca:	00 20       	and	r0, r0
    56cc:	b9 f7       	brne	.-18     	; 0x56bc <strncmp+0x4>
    56ce:	88 1b       	sub	r24, r24
    56d0:	99 0b       	sbc	r25, r25
    56d2:	08 95       	ret

000056d4 <strstr>:
    56d4:	fb 01       	movw	r30, r22
    56d6:	51 91       	ld	r21, Z+
    56d8:	55 23       	and	r21, r21
    56da:	a9 f0       	breq	.+42     	; 0x5706 <strstr+0x32>
    56dc:	bf 01       	movw	r22, r30
    56de:	dc 01       	movw	r26, r24
    56e0:	4d 91       	ld	r20, X+
    56e2:	45 17       	cp	r20, r21
    56e4:	41 11       	cpse	r20, r1
    56e6:	e1 f7       	brne	.-8      	; 0x56e0 <strstr+0xc>
    56e8:	59 f4       	brne	.+22     	; 0x5700 <strstr+0x2c>
    56ea:	cd 01       	movw	r24, r26
    56ec:	01 90       	ld	r0, Z+
    56ee:	00 20       	and	r0, r0
    56f0:	49 f0       	breq	.+18     	; 0x5704 <strstr+0x30>
    56f2:	4d 91       	ld	r20, X+
    56f4:	40 15       	cp	r20, r0
    56f6:	41 11       	cpse	r20, r1
    56f8:	c9 f3       	breq	.-14     	; 0x56ec <strstr+0x18>
    56fa:	fb 01       	movw	r30, r22
    56fc:	41 11       	cpse	r20, r1
    56fe:	ef cf       	rjmp	.-34     	; 0x56de <strstr+0xa>
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	01 97       	sbiw	r24, 0x01	; 1
    5706:	08 95       	ret

00005708 <__mulsi_const_10>:
    5708:	59 2f       	mov	r21, r25
    570a:	48 2f       	mov	r20, r24
    570c:	37 2f       	mov	r19, r23
    570e:	26 2f       	mov	r18, r22
    5710:	66 0f       	add	r22, r22
    5712:	77 1f       	adc	r23, r23
    5714:	88 1f       	adc	r24, r24
    5716:	99 1f       	adc	r25, r25
    5718:	66 0f       	add	r22, r22
    571a:	77 1f       	adc	r23, r23
    571c:	88 1f       	adc	r24, r24
    571e:	99 1f       	adc	r25, r25
    5720:	62 0f       	add	r22, r18
    5722:	73 1f       	adc	r23, r19
    5724:	84 1f       	adc	r24, r20
    5726:	95 1f       	adc	r25, r21
    5728:	66 0f       	add	r22, r22
    572a:	77 1f       	adc	r23, r23
    572c:	88 1f       	adc	r24, r24
    572e:	99 1f       	adc	r25, r25
    5730:	08 95       	ret

00005732 <__mulhi_const_10>:
    5732:	7a e0       	ldi	r23, 0x0A	; 10
    5734:	97 9f       	mul	r25, r23
    5736:	90 2d       	mov	r25, r0
    5738:	87 9f       	mul	r24, r23
    573a:	80 2d       	mov	r24, r0
    573c:	91 0d       	add	r25, r1
    573e:	11 24       	eor	r1, r1
    5740:	08 95       	ret

00005742 <printf>:
    5742:	cf 93       	push	r28
    5744:	df 93       	push	r29
    5746:	cd b7       	in	r28, 0x3d	; 61
    5748:	de b7       	in	r29, 0x3e	; 62
    574a:	ae 01       	movw	r20, r28
    574c:	4b 5f       	subi	r20, 0xFB	; 251
    574e:	5f 4f       	sbci	r21, 0xFF	; 255
    5750:	fa 01       	movw	r30, r20
    5752:	61 91       	ld	r22, Z+
    5754:	71 91       	ld	r23, Z+
    5756:	af 01       	movw	r20, r30
    5758:	80 91 66 10 	lds	r24, 0x1066	; 0x801066 <__iob+0x2>
    575c:	90 91 67 10 	lds	r25, 0x1067	; 0x801067 <__iob+0x3>
    5760:	d7 d0       	rcall	.+430    	; 0x5910 <vfprintf>
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	08 95       	ret

00005768 <printf_P>:
    5768:	0f 93       	push	r16
    576a:	1f 93       	push	r17
    576c:	cf 93       	push	r28
    576e:	df 93       	push	r29
    5770:	cd b7       	in	r28, 0x3d	; 61
    5772:	de b7       	in	r29, 0x3e	; 62
    5774:	ae 01       	movw	r20, r28
    5776:	49 5f       	subi	r20, 0xF9	; 249
    5778:	5f 4f       	sbci	r21, 0xFF	; 255
    577a:	da 01       	movw	r26, r20
    577c:	6d 91       	ld	r22, X+
    577e:	7d 91       	ld	r23, X+
    5780:	ad 01       	movw	r20, r26
    5782:	04 e6       	ldi	r16, 0x64	; 100
    5784:	10 e1       	ldi	r17, 0x10	; 16
    5786:	f8 01       	movw	r30, r16
    5788:	82 81       	ldd	r24, Z+2	; 0x02
    578a:	93 81       	ldd	r25, Z+3	; 0x03
    578c:	dc 01       	movw	r26, r24
    578e:	13 96       	adiw	r26, 0x03	; 3
    5790:	2c 91       	ld	r18, X
    5792:	13 97       	sbiw	r26, 0x03	; 3
    5794:	28 60       	ori	r18, 0x08	; 8
    5796:	13 96       	adiw	r26, 0x03	; 3
    5798:	2c 93       	st	X, r18
    579a:	ba d0       	rcall	.+372    	; 0x5910 <vfprintf>
    579c:	d8 01       	movw	r26, r16
    579e:	12 96       	adiw	r26, 0x02	; 2
    57a0:	ed 91       	ld	r30, X+
    57a2:	fc 91       	ld	r31, X
    57a4:	13 97       	sbiw	r26, 0x03	; 3
    57a6:	23 81       	ldd	r18, Z+3	; 0x03
    57a8:	27 7f       	andi	r18, 0xF7	; 247
    57aa:	23 83       	std	Z+3, r18	; 0x03
    57ac:	df 91       	pop	r29
    57ae:	cf 91       	pop	r28
    57b0:	1f 91       	pop	r17
    57b2:	0f 91       	pop	r16
    57b4:	08 95       	ret

000057b6 <puts>:
    57b6:	0f 93       	push	r16
    57b8:	1f 93       	push	r17
    57ba:	cf 93       	push	r28
    57bc:	df 93       	push	r29
    57be:	e0 91 66 10 	lds	r30, 0x1066	; 0x801066 <__iob+0x2>
    57c2:	f0 91 67 10 	lds	r31, 0x1067	; 0x801067 <__iob+0x3>
    57c6:	23 81       	ldd	r18, Z+3	; 0x03
    57c8:	21 ff       	sbrs	r18, 1
    57ca:	1b c0       	rjmp	.+54     	; 0x5802 <puts+0x4c>
    57cc:	8c 01       	movw	r16, r24
    57ce:	d0 e0       	ldi	r29, 0x00	; 0
    57d0:	c0 e0       	ldi	r28, 0x00	; 0
    57d2:	f8 01       	movw	r30, r16
    57d4:	81 91       	ld	r24, Z+
    57d6:	8f 01       	movw	r16, r30
    57d8:	60 91 66 10 	lds	r22, 0x1066	; 0x801066 <__iob+0x2>
    57dc:	70 91 67 10 	lds	r23, 0x1067	; 0x801067 <__iob+0x3>
    57e0:	db 01       	movw	r26, r22
    57e2:	18 96       	adiw	r26, 0x08	; 8
    57e4:	ed 91       	ld	r30, X+
    57e6:	fc 91       	ld	r31, X
    57e8:	19 97       	sbiw	r26, 0x09	; 9
    57ea:	88 23       	and	r24, r24
    57ec:	31 f0       	breq	.+12     	; 0x57fa <puts+0x44>
    57ee:	09 95       	icall
    57f0:	89 2b       	or	r24, r25
    57f2:	79 f3       	breq	.-34     	; 0x57d2 <puts+0x1c>
    57f4:	df ef       	ldi	r29, 0xFF	; 255
    57f6:	cf ef       	ldi	r28, 0xFF	; 255
    57f8:	ec cf       	rjmp	.-40     	; 0x57d2 <puts+0x1c>
    57fa:	8a e0       	ldi	r24, 0x0A	; 10
    57fc:	09 95       	icall
    57fe:	89 2b       	or	r24, r25
    5800:	19 f0       	breq	.+6      	; 0x5808 <puts+0x52>
    5802:	8f ef       	ldi	r24, 0xFF	; 255
    5804:	9f ef       	ldi	r25, 0xFF	; 255
    5806:	02 c0       	rjmp	.+4      	; 0x580c <puts+0x56>
    5808:	8d 2f       	mov	r24, r29
    580a:	9c 2f       	mov	r25, r28
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	1f 91       	pop	r17
    5812:	0f 91       	pop	r16
    5814:	08 95       	ret

00005816 <sprintf>:
    5816:	0f 93       	push	r16
    5818:	1f 93       	push	r17
    581a:	cf 93       	push	r28
    581c:	df 93       	push	r29
    581e:	cd b7       	in	r28, 0x3d	; 61
    5820:	de b7       	in	r29, 0x3e	; 62
    5822:	2e 97       	sbiw	r28, 0x0e	; 14
    5824:	0f b6       	in	r0, 0x3f	; 63
    5826:	f8 94       	cli
    5828:	de bf       	out	0x3e, r29	; 62
    582a:	0f be       	out	0x3f, r0	; 63
    582c:	cd bf       	out	0x3d, r28	; 61
    582e:	0d 89       	ldd	r16, Y+21	; 0x15
    5830:	1e 89       	ldd	r17, Y+22	; 0x16
    5832:	86 e0       	ldi	r24, 0x06	; 6
    5834:	8c 83       	std	Y+4, r24	; 0x04
    5836:	1a 83       	std	Y+2, r17	; 0x02
    5838:	09 83       	std	Y+1, r16	; 0x01
    583a:	8f ef       	ldi	r24, 0xFF	; 255
    583c:	9f e7       	ldi	r25, 0x7F	; 127
    583e:	9e 83       	std	Y+6, r25	; 0x06
    5840:	8d 83       	std	Y+5, r24	; 0x05
    5842:	ae 01       	movw	r20, r28
    5844:	47 5e       	subi	r20, 0xE7	; 231
    5846:	5f 4f       	sbci	r21, 0xFF	; 255
    5848:	6f 89       	ldd	r22, Y+23	; 0x17
    584a:	78 8d       	ldd	r23, Y+24	; 0x18
    584c:	ce 01       	movw	r24, r28
    584e:	01 96       	adiw	r24, 0x01	; 1
    5850:	5f d0       	rcall	.+190    	; 0x5910 <vfprintf>
    5852:	ef 81       	ldd	r30, Y+7	; 0x07
    5854:	f8 85       	ldd	r31, Y+8	; 0x08
    5856:	e0 0f       	add	r30, r16
    5858:	f1 1f       	adc	r31, r17
    585a:	10 82       	st	Z, r1
    585c:	2e 96       	adiw	r28, 0x0e	; 14
    585e:	0f b6       	in	r0, 0x3f	; 63
    5860:	f8 94       	cli
    5862:	de bf       	out	0x3e, r29	; 62
    5864:	0f be       	out	0x3f, r0	; 63
    5866:	cd bf       	out	0x3d, r28	; 61
    5868:	df 91       	pop	r29
    586a:	cf 91       	pop	r28
    586c:	1f 91       	pop	r17
    586e:	0f 91       	pop	r16
    5870:	08 95       	ret

00005872 <sprintf_P>:
    5872:	0f 93       	push	r16
    5874:	1f 93       	push	r17
    5876:	cf 93       	push	r28
    5878:	df 93       	push	r29
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
    587e:	2e 97       	sbiw	r28, 0x0e	; 14
    5880:	0f b6       	in	r0, 0x3f	; 63
    5882:	f8 94       	cli
    5884:	de bf       	out	0x3e, r29	; 62
    5886:	0f be       	out	0x3f, r0	; 63
    5888:	cd bf       	out	0x3d, r28	; 61
    588a:	0d 89       	ldd	r16, Y+21	; 0x15
    588c:	1e 89       	ldd	r17, Y+22	; 0x16
    588e:	8e e0       	ldi	r24, 0x0E	; 14
    5890:	8c 83       	std	Y+4, r24	; 0x04
    5892:	1a 83       	std	Y+2, r17	; 0x02
    5894:	09 83       	std	Y+1, r16	; 0x01
    5896:	8f ef       	ldi	r24, 0xFF	; 255
    5898:	9f e7       	ldi	r25, 0x7F	; 127
    589a:	9e 83       	std	Y+6, r25	; 0x06
    589c:	8d 83       	std	Y+5, r24	; 0x05
    589e:	ae 01       	movw	r20, r28
    58a0:	47 5e       	subi	r20, 0xE7	; 231
    58a2:	5f 4f       	sbci	r21, 0xFF	; 255
    58a4:	6f 89       	ldd	r22, Y+23	; 0x17
    58a6:	78 8d       	ldd	r23, Y+24	; 0x18
    58a8:	ce 01       	movw	r24, r28
    58aa:	01 96       	adiw	r24, 0x01	; 1
    58ac:	31 d0       	rcall	.+98     	; 0x5910 <vfprintf>
    58ae:	ef 81       	ldd	r30, Y+7	; 0x07
    58b0:	f8 85       	ldd	r31, Y+8	; 0x08
    58b2:	e0 0f       	add	r30, r16
    58b4:	f1 1f       	adc	r31, r17
    58b6:	10 82       	st	Z, r1
    58b8:	2e 96       	adiw	r28, 0x0e	; 14
    58ba:	0f b6       	in	r0, 0x3f	; 63
    58bc:	f8 94       	cli
    58be:	de bf       	out	0x3e, r29	; 62
    58c0:	0f be       	out	0x3f, r0	; 63
    58c2:	cd bf       	out	0x3d, r28	; 61
    58c4:	df 91       	pop	r29
    58c6:	cf 91       	pop	r28
    58c8:	1f 91       	pop	r17
    58ca:	0f 91       	pop	r16
    58cc:	08 95       	ret

000058ce <sscanf>:
    58ce:	cf 93       	push	r28
    58d0:	df 93       	push	r29
    58d2:	cd b7       	in	r28, 0x3d	; 61
    58d4:	de b7       	in	r29, 0x3e	; 62
    58d6:	2e 97       	sbiw	r28, 0x0e	; 14
    58d8:	0f b6       	in	r0, 0x3f	; 63
    58da:	f8 94       	cli
    58dc:	de bf       	out	0x3e, r29	; 62
    58de:	0f be       	out	0x3f, r0	; 63
    58e0:	cd bf       	out	0x3d, r28	; 61
    58e2:	85 e0       	ldi	r24, 0x05	; 5
    58e4:	8c 83       	std	Y+4, r24	; 0x04
    58e6:	8b 89       	ldd	r24, Y+19	; 0x13
    58e8:	9c 89       	ldd	r25, Y+20	; 0x14
    58ea:	9a 83       	std	Y+2, r25	; 0x02
    58ec:	89 83       	std	Y+1, r24	; 0x01
    58ee:	ae 01       	movw	r20, r28
    58f0:	49 5e       	subi	r20, 0xE9	; 233
    58f2:	5f 4f       	sbci	r21, 0xFF	; 255
    58f4:	6d 89       	ldd	r22, Y+21	; 0x15
    58f6:	7e 89       	ldd	r23, Y+22	; 0x16
    58f8:	ce 01       	movw	r24, r28
    58fa:	01 96       	adiw	r24, 0x01	; 1
    58fc:	b8 d3       	rcall	.+1904   	; 0x606e <vfscanf>
    58fe:	2e 96       	adiw	r28, 0x0e	; 14
    5900:	0f b6       	in	r0, 0x3f	; 63
    5902:	f8 94       	cli
    5904:	de bf       	out	0x3e, r29	; 62
    5906:	0f be       	out	0x3f, r0	; 63
    5908:	cd bf       	out	0x3d, r28	; 61
    590a:	df 91       	pop	r29
    590c:	cf 91       	pop	r28
    590e:	08 95       	ret

00005910 <vfprintf>:
    5910:	2f 92       	push	r2
    5912:	3f 92       	push	r3
    5914:	4f 92       	push	r4
    5916:	5f 92       	push	r5
    5918:	6f 92       	push	r6
    591a:	7f 92       	push	r7
    591c:	8f 92       	push	r8
    591e:	9f 92       	push	r9
    5920:	af 92       	push	r10
    5922:	bf 92       	push	r11
    5924:	cf 92       	push	r12
    5926:	df 92       	push	r13
    5928:	ef 92       	push	r14
    592a:	ff 92       	push	r15
    592c:	0f 93       	push	r16
    592e:	1f 93       	push	r17
    5930:	cf 93       	push	r28
    5932:	df 93       	push	r29
    5934:	cd b7       	in	r28, 0x3d	; 61
    5936:	de b7       	in	r29, 0x3e	; 62
    5938:	2b 97       	sbiw	r28, 0x0b	; 11
    593a:	0f b6       	in	r0, 0x3f	; 63
    593c:	f8 94       	cli
    593e:	de bf       	out	0x3e, r29	; 62
    5940:	0f be       	out	0x3f, r0	; 63
    5942:	cd bf       	out	0x3d, r28	; 61
    5944:	6c 01       	movw	r12, r24
    5946:	7b 01       	movw	r14, r22
    5948:	8a 01       	movw	r16, r20
    594a:	fc 01       	movw	r30, r24
    594c:	17 82       	std	Z+7, r1	; 0x07
    594e:	16 82       	std	Z+6, r1	; 0x06
    5950:	83 81       	ldd	r24, Z+3	; 0x03
    5952:	81 ff       	sbrs	r24, 1
    5954:	bf c1       	rjmp	.+894    	; 0x5cd4 <vfprintf+0x3c4>
    5956:	ce 01       	movw	r24, r28
    5958:	01 96       	adiw	r24, 0x01	; 1
    595a:	3c 01       	movw	r6, r24
    595c:	f6 01       	movw	r30, r12
    595e:	93 81       	ldd	r25, Z+3	; 0x03
    5960:	f7 01       	movw	r30, r14
    5962:	93 fd       	sbrc	r25, 3
    5964:	85 91       	lpm	r24, Z+
    5966:	93 ff       	sbrs	r25, 3
    5968:	81 91       	ld	r24, Z+
    596a:	7f 01       	movw	r14, r30
    596c:	88 23       	and	r24, r24
    596e:	09 f4       	brne	.+2      	; 0x5972 <vfprintf+0x62>
    5970:	ad c1       	rjmp	.+858    	; 0x5ccc <vfprintf+0x3bc>
    5972:	85 32       	cpi	r24, 0x25	; 37
    5974:	39 f4       	brne	.+14     	; 0x5984 <vfprintf+0x74>
    5976:	93 fd       	sbrc	r25, 3
    5978:	85 91       	lpm	r24, Z+
    597a:	93 ff       	sbrs	r25, 3
    597c:	81 91       	ld	r24, Z+
    597e:	7f 01       	movw	r14, r30
    5980:	85 32       	cpi	r24, 0x25	; 37
    5982:	21 f4       	brne	.+8      	; 0x598c <vfprintf+0x7c>
    5984:	b6 01       	movw	r22, r12
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	e8 d4       	rcall	.+2512   	; 0x635a <fputc>
    598a:	e8 cf       	rjmp	.-48     	; 0x595c <vfprintf+0x4c>
    598c:	91 2c       	mov	r9, r1
    598e:	21 2c       	mov	r2, r1
    5990:	31 2c       	mov	r3, r1
    5992:	ff e1       	ldi	r31, 0x1F	; 31
    5994:	f3 15       	cp	r31, r3
    5996:	d8 f0       	brcs	.+54     	; 0x59ce <vfprintf+0xbe>
    5998:	8b 32       	cpi	r24, 0x2B	; 43
    599a:	79 f0       	breq	.+30     	; 0x59ba <vfprintf+0xaa>
    599c:	38 f4       	brcc	.+14     	; 0x59ac <vfprintf+0x9c>
    599e:	80 32       	cpi	r24, 0x20	; 32
    59a0:	79 f0       	breq	.+30     	; 0x59c0 <vfprintf+0xb0>
    59a2:	83 32       	cpi	r24, 0x23	; 35
    59a4:	a1 f4       	brne	.+40     	; 0x59ce <vfprintf+0xbe>
    59a6:	23 2d       	mov	r18, r3
    59a8:	20 61       	ori	r18, 0x10	; 16
    59aa:	1d c0       	rjmp	.+58     	; 0x59e6 <vfprintf+0xd6>
    59ac:	8d 32       	cpi	r24, 0x2D	; 45
    59ae:	61 f0       	breq	.+24     	; 0x59c8 <vfprintf+0xb8>
    59b0:	80 33       	cpi	r24, 0x30	; 48
    59b2:	69 f4       	brne	.+26     	; 0x59ce <vfprintf+0xbe>
    59b4:	23 2d       	mov	r18, r3
    59b6:	21 60       	ori	r18, 0x01	; 1
    59b8:	16 c0       	rjmp	.+44     	; 0x59e6 <vfprintf+0xd6>
    59ba:	83 2d       	mov	r24, r3
    59bc:	82 60       	ori	r24, 0x02	; 2
    59be:	38 2e       	mov	r3, r24
    59c0:	e3 2d       	mov	r30, r3
    59c2:	e4 60       	ori	r30, 0x04	; 4
    59c4:	3e 2e       	mov	r3, r30
    59c6:	2a c0       	rjmp	.+84     	; 0x5a1c <vfprintf+0x10c>
    59c8:	f3 2d       	mov	r31, r3
    59ca:	f8 60       	ori	r31, 0x08	; 8
    59cc:	1d c0       	rjmp	.+58     	; 0x5a08 <vfprintf+0xf8>
    59ce:	37 fc       	sbrc	r3, 7
    59d0:	2d c0       	rjmp	.+90     	; 0x5a2c <vfprintf+0x11c>
    59d2:	20 ed       	ldi	r18, 0xD0	; 208
    59d4:	28 0f       	add	r18, r24
    59d6:	2a 30       	cpi	r18, 0x0A	; 10
    59d8:	40 f0       	brcs	.+16     	; 0x59ea <vfprintf+0xda>
    59da:	8e 32       	cpi	r24, 0x2E	; 46
    59dc:	b9 f4       	brne	.+46     	; 0x5a0c <vfprintf+0xfc>
    59de:	36 fc       	sbrc	r3, 6
    59e0:	75 c1       	rjmp	.+746    	; 0x5ccc <vfprintf+0x3bc>
    59e2:	23 2d       	mov	r18, r3
    59e4:	20 64       	ori	r18, 0x40	; 64
    59e6:	32 2e       	mov	r3, r18
    59e8:	19 c0       	rjmp	.+50     	; 0x5a1c <vfprintf+0x10c>
    59ea:	36 fe       	sbrs	r3, 6
    59ec:	06 c0       	rjmp	.+12     	; 0x59fa <vfprintf+0xea>
    59ee:	8a e0       	ldi	r24, 0x0A	; 10
    59f0:	98 9e       	mul	r9, r24
    59f2:	20 0d       	add	r18, r0
    59f4:	11 24       	eor	r1, r1
    59f6:	92 2e       	mov	r9, r18
    59f8:	11 c0       	rjmp	.+34     	; 0x5a1c <vfprintf+0x10c>
    59fa:	ea e0       	ldi	r30, 0x0A	; 10
    59fc:	2e 9e       	mul	r2, r30
    59fe:	20 0d       	add	r18, r0
    5a00:	11 24       	eor	r1, r1
    5a02:	22 2e       	mov	r2, r18
    5a04:	f3 2d       	mov	r31, r3
    5a06:	f0 62       	ori	r31, 0x20	; 32
    5a08:	3f 2e       	mov	r3, r31
    5a0a:	08 c0       	rjmp	.+16     	; 0x5a1c <vfprintf+0x10c>
    5a0c:	8c 36       	cpi	r24, 0x6C	; 108
    5a0e:	21 f4       	brne	.+8      	; 0x5a18 <vfprintf+0x108>
    5a10:	83 2d       	mov	r24, r3
    5a12:	80 68       	ori	r24, 0x80	; 128
    5a14:	38 2e       	mov	r3, r24
    5a16:	02 c0       	rjmp	.+4      	; 0x5a1c <vfprintf+0x10c>
    5a18:	88 36       	cpi	r24, 0x68	; 104
    5a1a:	41 f4       	brne	.+16     	; 0x5a2c <vfprintf+0x11c>
    5a1c:	f7 01       	movw	r30, r14
    5a1e:	93 fd       	sbrc	r25, 3
    5a20:	85 91       	lpm	r24, Z+
    5a22:	93 ff       	sbrs	r25, 3
    5a24:	81 91       	ld	r24, Z+
    5a26:	7f 01       	movw	r14, r30
    5a28:	81 11       	cpse	r24, r1
    5a2a:	b3 cf       	rjmp	.-154    	; 0x5992 <vfprintf+0x82>
    5a2c:	98 2f       	mov	r25, r24
    5a2e:	9f 7d       	andi	r25, 0xDF	; 223
    5a30:	95 54       	subi	r25, 0x45	; 69
    5a32:	93 30       	cpi	r25, 0x03	; 3
    5a34:	28 f4       	brcc	.+10     	; 0x5a40 <vfprintf+0x130>
    5a36:	0c 5f       	subi	r16, 0xFC	; 252
    5a38:	1f 4f       	sbci	r17, 0xFF	; 255
    5a3a:	9f e3       	ldi	r25, 0x3F	; 63
    5a3c:	99 83       	std	Y+1, r25	; 0x01
    5a3e:	0d c0       	rjmp	.+26     	; 0x5a5a <vfprintf+0x14a>
    5a40:	83 36       	cpi	r24, 0x63	; 99
    5a42:	31 f0       	breq	.+12     	; 0x5a50 <vfprintf+0x140>
    5a44:	83 37       	cpi	r24, 0x73	; 115
    5a46:	71 f0       	breq	.+28     	; 0x5a64 <vfprintf+0x154>
    5a48:	83 35       	cpi	r24, 0x53	; 83
    5a4a:	09 f0       	breq	.+2      	; 0x5a4e <vfprintf+0x13e>
    5a4c:	55 c0       	rjmp	.+170    	; 0x5af8 <vfprintf+0x1e8>
    5a4e:	20 c0       	rjmp	.+64     	; 0x5a90 <vfprintf+0x180>
    5a50:	f8 01       	movw	r30, r16
    5a52:	80 81       	ld	r24, Z
    5a54:	89 83       	std	Y+1, r24	; 0x01
    5a56:	0e 5f       	subi	r16, 0xFE	; 254
    5a58:	1f 4f       	sbci	r17, 0xFF	; 255
    5a5a:	88 24       	eor	r8, r8
    5a5c:	83 94       	inc	r8
    5a5e:	91 2c       	mov	r9, r1
    5a60:	53 01       	movw	r10, r6
    5a62:	12 c0       	rjmp	.+36     	; 0x5a88 <vfprintf+0x178>
    5a64:	28 01       	movw	r4, r16
    5a66:	f2 e0       	ldi	r31, 0x02	; 2
    5a68:	4f 0e       	add	r4, r31
    5a6a:	51 1c       	adc	r5, r1
    5a6c:	f8 01       	movw	r30, r16
    5a6e:	a0 80       	ld	r10, Z
    5a70:	b1 80       	ldd	r11, Z+1	; 0x01
    5a72:	36 fe       	sbrs	r3, 6
    5a74:	03 c0       	rjmp	.+6      	; 0x5a7c <vfprintf+0x16c>
    5a76:	69 2d       	mov	r22, r9
    5a78:	70 e0       	ldi	r23, 0x00	; 0
    5a7a:	02 c0       	rjmp	.+4      	; 0x5a80 <vfprintf+0x170>
    5a7c:	6f ef       	ldi	r22, 0xFF	; 255
    5a7e:	7f ef       	ldi	r23, 0xFF	; 255
    5a80:	c5 01       	movw	r24, r10
    5a82:	22 d4       	rcall	.+2116   	; 0x62c8 <strnlen>
    5a84:	4c 01       	movw	r8, r24
    5a86:	82 01       	movw	r16, r4
    5a88:	f3 2d       	mov	r31, r3
    5a8a:	ff 77       	andi	r31, 0x7F	; 127
    5a8c:	3f 2e       	mov	r3, r31
    5a8e:	15 c0       	rjmp	.+42     	; 0x5aba <vfprintf+0x1aa>
    5a90:	28 01       	movw	r4, r16
    5a92:	22 e0       	ldi	r18, 0x02	; 2
    5a94:	42 0e       	add	r4, r18
    5a96:	51 1c       	adc	r5, r1
    5a98:	f8 01       	movw	r30, r16
    5a9a:	a0 80       	ld	r10, Z
    5a9c:	b1 80       	ldd	r11, Z+1	; 0x01
    5a9e:	36 fe       	sbrs	r3, 6
    5aa0:	03 c0       	rjmp	.+6      	; 0x5aa8 <vfprintf+0x198>
    5aa2:	69 2d       	mov	r22, r9
    5aa4:	70 e0       	ldi	r23, 0x00	; 0
    5aa6:	02 c0       	rjmp	.+4      	; 0x5aac <vfprintf+0x19c>
    5aa8:	6f ef       	ldi	r22, 0xFF	; 255
    5aaa:	7f ef       	ldi	r23, 0xFF	; 255
    5aac:	c5 01       	movw	r24, r10
    5aae:	01 d4       	rcall	.+2050   	; 0x62b2 <strnlen_P>
    5ab0:	4c 01       	movw	r8, r24
    5ab2:	f3 2d       	mov	r31, r3
    5ab4:	f0 68       	ori	r31, 0x80	; 128
    5ab6:	3f 2e       	mov	r3, r31
    5ab8:	82 01       	movw	r16, r4
    5aba:	33 fc       	sbrc	r3, 3
    5abc:	19 c0       	rjmp	.+50     	; 0x5af0 <vfprintf+0x1e0>
    5abe:	82 2d       	mov	r24, r2
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
    5ac2:	88 16       	cp	r8, r24
    5ac4:	99 06       	cpc	r9, r25
    5ac6:	a0 f4       	brcc	.+40     	; 0x5af0 <vfprintf+0x1e0>
    5ac8:	b6 01       	movw	r22, r12
    5aca:	80 e2       	ldi	r24, 0x20	; 32
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	45 d4       	rcall	.+2186   	; 0x635a <fputc>
    5ad0:	2a 94       	dec	r2
    5ad2:	f5 cf       	rjmp	.-22     	; 0x5abe <vfprintf+0x1ae>
    5ad4:	f5 01       	movw	r30, r10
    5ad6:	37 fc       	sbrc	r3, 7
    5ad8:	85 91       	lpm	r24, Z+
    5ada:	37 fe       	sbrs	r3, 7
    5adc:	81 91       	ld	r24, Z+
    5ade:	5f 01       	movw	r10, r30
    5ae0:	b6 01       	movw	r22, r12
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	3a d4       	rcall	.+2164   	; 0x635a <fputc>
    5ae6:	21 10       	cpse	r2, r1
    5ae8:	2a 94       	dec	r2
    5aea:	21 e0       	ldi	r18, 0x01	; 1
    5aec:	82 1a       	sub	r8, r18
    5aee:	91 08       	sbc	r9, r1
    5af0:	81 14       	cp	r8, r1
    5af2:	91 04       	cpc	r9, r1
    5af4:	79 f7       	brne	.-34     	; 0x5ad4 <vfprintf+0x1c4>
    5af6:	e1 c0       	rjmp	.+450    	; 0x5cba <vfprintf+0x3aa>
    5af8:	84 36       	cpi	r24, 0x64	; 100
    5afa:	11 f0       	breq	.+4      	; 0x5b00 <vfprintf+0x1f0>
    5afc:	89 36       	cpi	r24, 0x69	; 105
    5afe:	39 f5       	brne	.+78     	; 0x5b4e <vfprintf+0x23e>
    5b00:	f8 01       	movw	r30, r16
    5b02:	37 fe       	sbrs	r3, 7
    5b04:	07 c0       	rjmp	.+14     	; 0x5b14 <vfprintf+0x204>
    5b06:	60 81       	ld	r22, Z
    5b08:	71 81       	ldd	r23, Z+1	; 0x01
    5b0a:	82 81       	ldd	r24, Z+2	; 0x02
    5b0c:	93 81       	ldd	r25, Z+3	; 0x03
    5b0e:	0c 5f       	subi	r16, 0xFC	; 252
    5b10:	1f 4f       	sbci	r17, 0xFF	; 255
    5b12:	08 c0       	rjmp	.+16     	; 0x5b24 <vfprintf+0x214>
    5b14:	60 81       	ld	r22, Z
    5b16:	71 81       	ldd	r23, Z+1	; 0x01
    5b18:	07 2e       	mov	r0, r23
    5b1a:	00 0c       	add	r0, r0
    5b1c:	88 0b       	sbc	r24, r24
    5b1e:	99 0b       	sbc	r25, r25
    5b20:	0e 5f       	subi	r16, 0xFE	; 254
    5b22:	1f 4f       	sbci	r17, 0xFF	; 255
    5b24:	f3 2d       	mov	r31, r3
    5b26:	ff 76       	andi	r31, 0x6F	; 111
    5b28:	3f 2e       	mov	r3, r31
    5b2a:	97 ff       	sbrs	r25, 7
    5b2c:	09 c0       	rjmp	.+18     	; 0x5b40 <vfprintf+0x230>
    5b2e:	90 95       	com	r25
    5b30:	80 95       	com	r24
    5b32:	70 95       	com	r23
    5b34:	61 95       	neg	r22
    5b36:	7f 4f       	sbci	r23, 0xFF	; 255
    5b38:	8f 4f       	sbci	r24, 0xFF	; 255
    5b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3c:	f0 68       	ori	r31, 0x80	; 128
    5b3e:	3f 2e       	mov	r3, r31
    5b40:	2a e0       	ldi	r18, 0x0A	; 10
    5b42:	30 e0       	ldi	r19, 0x00	; 0
    5b44:	a3 01       	movw	r20, r6
    5b46:	5e d4       	rcall	.+2236   	; 0x6404 <__ultoa_invert>
    5b48:	88 2e       	mov	r8, r24
    5b4a:	86 18       	sub	r8, r6
    5b4c:	44 c0       	rjmp	.+136    	; 0x5bd6 <vfprintf+0x2c6>
    5b4e:	85 37       	cpi	r24, 0x75	; 117
    5b50:	31 f4       	brne	.+12     	; 0x5b5e <vfprintf+0x24e>
    5b52:	23 2d       	mov	r18, r3
    5b54:	2f 7e       	andi	r18, 0xEF	; 239
    5b56:	b2 2e       	mov	r11, r18
    5b58:	2a e0       	ldi	r18, 0x0A	; 10
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	25 c0       	rjmp	.+74     	; 0x5ba8 <vfprintf+0x298>
    5b5e:	93 2d       	mov	r25, r3
    5b60:	99 7f       	andi	r25, 0xF9	; 249
    5b62:	b9 2e       	mov	r11, r25
    5b64:	8f 36       	cpi	r24, 0x6F	; 111
    5b66:	c1 f0       	breq	.+48     	; 0x5b98 <vfprintf+0x288>
    5b68:	18 f4       	brcc	.+6      	; 0x5b70 <vfprintf+0x260>
    5b6a:	88 35       	cpi	r24, 0x58	; 88
    5b6c:	79 f0       	breq	.+30     	; 0x5b8c <vfprintf+0x27c>
    5b6e:	ae c0       	rjmp	.+348    	; 0x5ccc <vfprintf+0x3bc>
    5b70:	80 37       	cpi	r24, 0x70	; 112
    5b72:	19 f0       	breq	.+6      	; 0x5b7a <vfprintf+0x26a>
    5b74:	88 37       	cpi	r24, 0x78	; 120
    5b76:	21 f0       	breq	.+8      	; 0x5b80 <vfprintf+0x270>
    5b78:	a9 c0       	rjmp	.+338    	; 0x5ccc <vfprintf+0x3bc>
    5b7a:	e9 2f       	mov	r30, r25
    5b7c:	e0 61       	ori	r30, 0x10	; 16
    5b7e:	be 2e       	mov	r11, r30
    5b80:	b4 fe       	sbrs	r11, 4
    5b82:	0d c0       	rjmp	.+26     	; 0x5b9e <vfprintf+0x28e>
    5b84:	fb 2d       	mov	r31, r11
    5b86:	f4 60       	ori	r31, 0x04	; 4
    5b88:	bf 2e       	mov	r11, r31
    5b8a:	09 c0       	rjmp	.+18     	; 0x5b9e <vfprintf+0x28e>
    5b8c:	34 fe       	sbrs	r3, 4
    5b8e:	0a c0       	rjmp	.+20     	; 0x5ba4 <vfprintf+0x294>
    5b90:	29 2f       	mov	r18, r25
    5b92:	26 60       	ori	r18, 0x06	; 6
    5b94:	b2 2e       	mov	r11, r18
    5b96:	06 c0       	rjmp	.+12     	; 0x5ba4 <vfprintf+0x294>
    5b98:	28 e0       	ldi	r18, 0x08	; 8
    5b9a:	30 e0       	ldi	r19, 0x00	; 0
    5b9c:	05 c0       	rjmp	.+10     	; 0x5ba8 <vfprintf+0x298>
    5b9e:	20 e1       	ldi	r18, 0x10	; 16
    5ba0:	30 e0       	ldi	r19, 0x00	; 0
    5ba2:	02 c0       	rjmp	.+4      	; 0x5ba8 <vfprintf+0x298>
    5ba4:	20 e1       	ldi	r18, 0x10	; 16
    5ba6:	32 e0       	ldi	r19, 0x02	; 2
    5ba8:	f8 01       	movw	r30, r16
    5baa:	b7 fe       	sbrs	r11, 7
    5bac:	07 c0       	rjmp	.+14     	; 0x5bbc <vfprintf+0x2ac>
    5bae:	60 81       	ld	r22, Z
    5bb0:	71 81       	ldd	r23, Z+1	; 0x01
    5bb2:	82 81       	ldd	r24, Z+2	; 0x02
    5bb4:	93 81       	ldd	r25, Z+3	; 0x03
    5bb6:	0c 5f       	subi	r16, 0xFC	; 252
    5bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    5bba:	06 c0       	rjmp	.+12     	; 0x5bc8 <vfprintf+0x2b8>
    5bbc:	60 81       	ld	r22, Z
    5bbe:	71 81       	ldd	r23, Z+1	; 0x01
    5bc0:	80 e0       	ldi	r24, 0x00	; 0
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	0e 5f       	subi	r16, 0xFE	; 254
    5bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    5bc8:	a3 01       	movw	r20, r6
    5bca:	1c d4       	rcall	.+2104   	; 0x6404 <__ultoa_invert>
    5bcc:	88 2e       	mov	r8, r24
    5bce:	86 18       	sub	r8, r6
    5bd0:	fb 2d       	mov	r31, r11
    5bd2:	ff 77       	andi	r31, 0x7F	; 127
    5bd4:	3f 2e       	mov	r3, r31
    5bd6:	36 fe       	sbrs	r3, 6
    5bd8:	0d c0       	rjmp	.+26     	; 0x5bf4 <vfprintf+0x2e4>
    5bda:	23 2d       	mov	r18, r3
    5bdc:	2e 7f       	andi	r18, 0xFE	; 254
    5bde:	a2 2e       	mov	r10, r18
    5be0:	89 14       	cp	r8, r9
    5be2:	58 f4       	brcc	.+22     	; 0x5bfa <vfprintf+0x2ea>
    5be4:	34 fe       	sbrs	r3, 4
    5be6:	0b c0       	rjmp	.+22     	; 0x5bfe <vfprintf+0x2ee>
    5be8:	32 fc       	sbrc	r3, 2
    5bea:	09 c0       	rjmp	.+18     	; 0x5bfe <vfprintf+0x2ee>
    5bec:	83 2d       	mov	r24, r3
    5bee:	8e 7e       	andi	r24, 0xEE	; 238
    5bf0:	a8 2e       	mov	r10, r24
    5bf2:	05 c0       	rjmp	.+10     	; 0x5bfe <vfprintf+0x2ee>
    5bf4:	b8 2c       	mov	r11, r8
    5bf6:	a3 2c       	mov	r10, r3
    5bf8:	03 c0       	rjmp	.+6      	; 0x5c00 <vfprintf+0x2f0>
    5bfa:	b8 2c       	mov	r11, r8
    5bfc:	01 c0       	rjmp	.+2      	; 0x5c00 <vfprintf+0x2f0>
    5bfe:	b9 2c       	mov	r11, r9
    5c00:	a4 fe       	sbrs	r10, 4
    5c02:	0f c0       	rjmp	.+30     	; 0x5c22 <vfprintf+0x312>
    5c04:	fe 01       	movw	r30, r28
    5c06:	e8 0d       	add	r30, r8
    5c08:	f1 1d       	adc	r31, r1
    5c0a:	80 81       	ld	r24, Z
    5c0c:	80 33       	cpi	r24, 0x30	; 48
    5c0e:	21 f4       	brne	.+8      	; 0x5c18 <vfprintf+0x308>
    5c10:	9a 2d       	mov	r25, r10
    5c12:	99 7e       	andi	r25, 0xE9	; 233
    5c14:	a9 2e       	mov	r10, r25
    5c16:	09 c0       	rjmp	.+18     	; 0x5c2a <vfprintf+0x31a>
    5c18:	a2 fe       	sbrs	r10, 2
    5c1a:	06 c0       	rjmp	.+12     	; 0x5c28 <vfprintf+0x318>
    5c1c:	b3 94       	inc	r11
    5c1e:	b3 94       	inc	r11
    5c20:	04 c0       	rjmp	.+8      	; 0x5c2a <vfprintf+0x31a>
    5c22:	8a 2d       	mov	r24, r10
    5c24:	86 78       	andi	r24, 0x86	; 134
    5c26:	09 f0       	breq	.+2      	; 0x5c2a <vfprintf+0x31a>
    5c28:	b3 94       	inc	r11
    5c2a:	a3 fc       	sbrc	r10, 3
    5c2c:	10 c0       	rjmp	.+32     	; 0x5c4e <vfprintf+0x33e>
    5c2e:	a0 fe       	sbrs	r10, 0
    5c30:	06 c0       	rjmp	.+12     	; 0x5c3e <vfprintf+0x32e>
    5c32:	b2 14       	cp	r11, r2
    5c34:	80 f4       	brcc	.+32     	; 0x5c56 <vfprintf+0x346>
    5c36:	28 0c       	add	r2, r8
    5c38:	92 2c       	mov	r9, r2
    5c3a:	9b 18       	sub	r9, r11
    5c3c:	0d c0       	rjmp	.+26     	; 0x5c58 <vfprintf+0x348>
    5c3e:	b2 14       	cp	r11, r2
    5c40:	58 f4       	brcc	.+22     	; 0x5c58 <vfprintf+0x348>
    5c42:	b6 01       	movw	r22, r12
    5c44:	80 e2       	ldi	r24, 0x20	; 32
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	88 d3       	rcall	.+1808   	; 0x635a <fputc>
    5c4a:	b3 94       	inc	r11
    5c4c:	f8 cf       	rjmp	.-16     	; 0x5c3e <vfprintf+0x32e>
    5c4e:	b2 14       	cp	r11, r2
    5c50:	18 f4       	brcc	.+6      	; 0x5c58 <vfprintf+0x348>
    5c52:	2b 18       	sub	r2, r11
    5c54:	02 c0       	rjmp	.+4      	; 0x5c5a <vfprintf+0x34a>
    5c56:	98 2c       	mov	r9, r8
    5c58:	21 2c       	mov	r2, r1
    5c5a:	a4 fe       	sbrs	r10, 4
    5c5c:	0f c0       	rjmp	.+30     	; 0x5c7c <vfprintf+0x36c>
    5c5e:	b6 01       	movw	r22, r12
    5c60:	80 e3       	ldi	r24, 0x30	; 48
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	7a d3       	rcall	.+1780   	; 0x635a <fputc>
    5c66:	a2 fe       	sbrs	r10, 2
    5c68:	16 c0       	rjmp	.+44     	; 0x5c96 <vfprintf+0x386>
    5c6a:	a1 fc       	sbrc	r10, 1
    5c6c:	03 c0       	rjmp	.+6      	; 0x5c74 <vfprintf+0x364>
    5c6e:	88 e7       	ldi	r24, 0x78	; 120
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	02 c0       	rjmp	.+4      	; 0x5c78 <vfprintf+0x368>
    5c74:	88 e5       	ldi	r24, 0x58	; 88
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	b6 01       	movw	r22, r12
    5c7a:	0c c0       	rjmp	.+24     	; 0x5c94 <vfprintf+0x384>
    5c7c:	8a 2d       	mov	r24, r10
    5c7e:	86 78       	andi	r24, 0x86	; 134
    5c80:	51 f0       	breq	.+20     	; 0x5c96 <vfprintf+0x386>
    5c82:	a1 fe       	sbrs	r10, 1
    5c84:	02 c0       	rjmp	.+4      	; 0x5c8a <vfprintf+0x37a>
    5c86:	8b e2       	ldi	r24, 0x2B	; 43
    5c88:	01 c0       	rjmp	.+2      	; 0x5c8c <vfprintf+0x37c>
    5c8a:	80 e2       	ldi	r24, 0x20	; 32
    5c8c:	a7 fc       	sbrc	r10, 7
    5c8e:	8d e2       	ldi	r24, 0x2D	; 45
    5c90:	b6 01       	movw	r22, r12
    5c92:	90 e0       	ldi	r25, 0x00	; 0
    5c94:	62 d3       	rcall	.+1732   	; 0x635a <fputc>
    5c96:	89 14       	cp	r8, r9
    5c98:	30 f4       	brcc	.+12     	; 0x5ca6 <vfprintf+0x396>
    5c9a:	b6 01       	movw	r22, r12
    5c9c:	80 e3       	ldi	r24, 0x30	; 48
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	5c d3       	rcall	.+1720   	; 0x635a <fputc>
    5ca2:	9a 94       	dec	r9
    5ca4:	f8 cf       	rjmp	.-16     	; 0x5c96 <vfprintf+0x386>
    5ca6:	8a 94       	dec	r8
    5ca8:	f3 01       	movw	r30, r6
    5caa:	e8 0d       	add	r30, r8
    5cac:	f1 1d       	adc	r31, r1
    5cae:	80 81       	ld	r24, Z
    5cb0:	b6 01       	movw	r22, r12
    5cb2:	90 e0       	ldi	r25, 0x00	; 0
    5cb4:	52 d3       	rcall	.+1700   	; 0x635a <fputc>
    5cb6:	81 10       	cpse	r8, r1
    5cb8:	f6 cf       	rjmp	.-20     	; 0x5ca6 <vfprintf+0x396>
    5cba:	22 20       	and	r2, r2
    5cbc:	09 f4       	brne	.+2      	; 0x5cc0 <vfprintf+0x3b0>
    5cbe:	4e ce       	rjmp	.-868    	; 0x595c <vfprintf+0x4c>
    5cc0:	b6 01       	movw	r22, r12
    5cc2:	80 e2       	ldi	r24, 0x20	; 32
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	49 d3       	rcall	.+1682   	; 0x635a <fputc>
    5cc8:	2a 94       	dec	r2
    5cca:	f7 cf       	rjmp	.-18     	; 0x5cba <vfprintf+0x3aa>
    5ccc:	f6 01       	movw	r30, r12
    5cce:	86 81       	ldd	r24, Z+6	; 0x06
    5cd0:	97 81       	ldd	r25, Z+7	; 0x07
    5cd2:	02 c0       	rjmp	.+4      	; 0x5cd8 <vfprintf+0x3c8>
    5cd4:	8f ef       	ldi	r24, 0xFF	; 255
    5cd6:	9f ef       	ldi	r25, 0xFF	; 255
    5cd8:	2b 96       	adiw	r28, 0x0b	; 11
    5cda:	0f b6       	in	r0, 0x3f	; 63
    5cdc:	f8 94       	cli
    5cde:	de bf       	out	0x3e, r29	; 62
    5ce0:	0f be       	out	0x3f, r0	; 63
    5ce2:	cd bf       	out	0x3d, r28	; 61
    5ce4:	df 91       	pop	r29
    5ce6:	cf 91       	pop	r28
    5ce8:	1f 91       	pop	r17
    5cea:	0f 91       	pop	r16
    5cec:	ff 90       	pop	r15
    5cee:	ef 90       	pop	r14
    5cf0:	df 90       	pop	r13
    5cf2:	cf 90       	pop	r12
    5cf4:	bf 90       	pop	r11
    5cf6:	af 90       	pop	r10
    5cf8:	9f 90       	pop	r9
    5cfa:	8f 90       	pop	r8
    5cfc:	7f 90       	pop	r7
    5cfe:	6f 90       	pop	r6
    5d00:	5f 90       	pop	r5
    5d02:	4f 90       	pop	r4
    5d04:	3f 90       	pop	r3
    5d06:	2f 90       	pop	r2
    5d08:	08 95       	ret

00005d0a <putval>:
    5d0a:	20 fd       	sbrc	r18, 0
    5d0c:	09 c0       	rjmp	.+18     	; 0x5d20 <putval+0x16>
    5d0e:	fc 01       	movw	r30, r24
    5d10:	23 fd       	sbrc	r18, 3
    5d12:	05 c0       	rjmp	.+10     	; 0x5d1e <putval+0x14>
    5d14:	22 ff       	sbrs	r18, 2
    5d16:	02 c0       	rjmp	.+4      	; 0x5d1c <putval+0x12>
    5d18:	73 83       	std	Z+3, r23	; 0x03
    5d1a:	62 83       	std	Z+2, r22	; 0x02
    5d1c:	51 83       	std	Z+1, r21	; 0x01
    5d1e:	40 83       	st	Z, r20
    5d20:	08 95       	ret

00005d22 <mulacc>:
    5d22:	44 fd       	sbrc	r20, 4
    5d24:	17 c0       	rjmp	.+46     	; 0x5d54 <mulacc+0x32>
    5d26:	46 fd       	sbrc	r20, 6
    5d28:	17 c0       	rjmp	.+46     	; 0x5d58 <mulacc+0x36>
    5d2a:	ab 01       	movw	r20, r22
    5d2c:	bc 01       	movw	r22, r24
    5d2e:	da 01       	movw	r26, r20
    5d30:	fb 01       	movw	r30, r22
    5d32:	aa 0f       	add	r26, r26
    5d34:	bb 1f       	adc	r27, r27
    5d36:	ee 1f       	adc	r30, r30
    5d38:	ff 1f       	adc	r31, r31
    5d3a:	10 94       	com	r1
    5d3c:	d1 f7       	brne	.-12     	; 0x5d32 <mulacc+0x10>
    5d3e:	4a 0f       	add	r20, r26
    5d40:	5b 1f       	adc	r21, r27
    5d42:	6e 1f       	adc	r22, r30
    5d44:	7f 1f       	adc	r23, r31
    5d46:	cb 01       	movw	r24, r22
    5d48:	ba 01       	movw	r22, r20
    5d4a:	66 0f       	add	r22, r22
    5d4c:	77 1f       	adc	r23, r23
    5d4e:	88 1f       	adc	r24, r24
    5d50:	99 1f       	adc	r25, r25
    5d52:	09 c0       	rjmp	.+18     	; 0x5d66 <mulacc+0x44>
    5d54:	33 e0       	ldi	r19, 0x03	; 3
    5d56:	01 c0       	rjmp	.+2      	; 0x5d5a <mulacc+0x38>
    5d58:	34 e0       	ldi	r19, 0x04	; 4
    5d5a:	66 0f       	add	r22, r22
    5d5c:	77 1f       	adc	r23, r23
    5d5e:	88 1f       	adc	r24, r24
    5d60:	99 1f       	adc	r25, r25
    5d62:	31 50       	subi	r19, 0x01	; 1
    5d64:	d1 f7       	brne	.-12     	; 0x5d5a <mulacc+0x38>
    5d66:	62 0f       	add	r22, r18
    5d68:	71 1d       	adc	r23, r1
    5d6a:	81 1d       	adc	r24, r1
    5d6c:	91 1d       	adc	r25, r1
    5d6e:	08 95       	ret

00005d70 <skip_spaces>:
    5d70:	0f 93       	push	r16
    5d72:	1f 93       	push	r17
    5d74:	cf 93       	push	r28
    5d76:	df 93       	push	r29
    5d78:	8c 01       	movw	r16, r24
    5d7a:	c8 01       	movw	r24, r16
    5d7c:	b0 d2       	rcall	.+1376   	; 0x62de <fgetc>
    5d7e:	ec 01       	movw	r28, r24
    5d80:	97 fd       	sbrc	r25, 7
    5d82:	06 c0       	rjmp	.+12     	; 0x5d90 <skip_spaces+0x20>
    5d84:	69 dc       	rcall	.-1838   	; 0x5658 <isspace>
    5d86:	89 2b       	or	r24, r25
    5d88:	c1 f7       	brne	.-16     	; 0x5d7a <skip_spaces+0xa>
    5d8a:	b8 01       	movw	r22, r16
    5d8c:	ce 01       	movw	r24, r28
    5d8e:	21 d3       	rcall	.+1602   	; 0x63d2 <ungetc>
    5d90:	ce 01       	movw	r24, r28
    5d92:	df 91       	pop	r29
    5d94:	cf 91       	pop	r28
    5d96:	1f 91       	pop	r17
    5d98:	0f 91       	pop	r16
    5d9a:	08 95       	ret

00005d9c <conv_int>:
    5d9c:	8f 92       	push	r8
    5d9e:	9f 92       	push	r9
    5da0:	af 92       	push	r10
    5da2:	bf 92       	push	r11
    5da4:	ef 92       	push	r14
    5da6:	ff 92       	push	r15
    5da8:	0f 93       	push	r16
    5daa:	1f 93       	push	r17
    5dac:	cf 93       	push	r28
    5dae:	df 93       	push	r29
    5db0:	8c 01       	movw	r16, r24
    5db2:	d6 2f       	mov	r29, r22
    5db4:	7a 01       	movw	r14, r20
    5db6:	b2 2e       	mov	r11, r18
    5db8:	92 d2       	rcall	.+1316   	; 0x62de <fgetc>
    5dba:	9c 01       	movw	r18, r24
    5dbc:	33 27       	eor	r19, r19
    5dbe:	2b 32       	cpi	r18, 0x2B	; 43
    5dc0:	31 05       	cpc	r19, r1
    5dc2:	31 f0       	breq	.+12     	; 0x5dd0 <conv_int+0x34>
    5dc4:	2d 32       	cpi	r18, 0x2D	; 45
    5dc6:	31 05       	cpc	r19, r1
    5dc8:	59 f4       	brne	.+22     	; 0x5de0 <conv_int+0x44>
    5dca:	8b 2d       	mov	r24, r11
    5dcc:	80 68       	ori	r24, 0x80	; 128
    5dce:	b8 2e       	mov	r11, r24
    5dd0:	d1 50       	subi	r29, 0x01	; 1
    5dd2:	11 f4       	brne	.+4      	; 0x5dd8 <conv_int+0x3c>
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
    5dd6:	61 c0       	rjmp	.+194    	; 0x5e9a <conv_int+0xfe>
    5dd8:	c8 01       	movw	r24, r16
    5dda:	81 d2       	rcall	.+1282   	; 0x62de <fgetc>
    5ddc:	97 fd       	sbrc	r25, 7
    5dde:	fa cf       	rjmp	.-12     	; 0x5dd4 <conv_int+0x38>
    5de0:	cb 2d       	mov	r28, r11
    5de2:	cd 7f       	andi	r28, 0xFD	; 253
    5de4:	2b 2d       	mov	r18, r11
    5de6:	20 73       	andi	r18, 0x30	; 48
    5de8:	f9 f4       	brne	.+62     	; 0x5e28 <conv_int+0x8c>
    5dea:	80 33       	cpi	r24, 0x30	; 48
    5dec:	e9 f4       	brne	.+58     	; 0x5e28 <conv_int+0x8c>
    5dee:	aa 24       	eor	r10, r10
    5df0:	aa 94       	dec	r10
    5df2:	ad 0e       	add	r10, r29
    5df4:	09 f4       	brne	.+2      	; 0x5df8 <conv_int+0x5c>
    5df6:	3e c0       	rjmp	.+124    	; 0x5e74 <conv_int+0xd8>
    5df8:	c8 01       	movw	r24, r16
    5dfa:	71 d2       	rcall	.+1250   	; 0x62de <fgetc>
    5dfc:	97 fd       	sbrc	r25, 7
    5dfe:	3a c0       	rjmp	.+116    	; 0x5e74 <conv_int+0xd8>
    5e00:	9c 01       	movw	r18, r24
    5e02:	2f 7d       	andi	r18, 0xDF	; 223
    5e04:	33 27       	eor	r19, r19
    5e06:	28 35       	cpi	r18, 0x58	; 88
    5e08:	31 05       	cpc	r19, r1
    5e0a:	41 f4       	brne	.+16     	; 0x5e1c <conv_int+0x80>
    5e0c:	c2 64       	ori	r28, 0x42	; 66
    5e0e:	d2 50       	subi	r29, 0x02	; 2
    5e10:	89 f1       	breq	.+98     	; 0x5e74 <conv_int+0xd8>
    5e12:	c8 01       	movw	r24, r16
    5e14:	64 d2       	rcall	.+1224   	; 0x62de <fgetc>
    5e16:	97 ff       	sbrs	r25, 7
    5e18:	07 c0       	rjmp	.+14     	; 0x5e28 <conv_int+0x8c>
    5e1a:	2c c0       	rjmp	.+88     	; 0x5e74 <conv_int+0xd8>
    5e1c:	b6 fe       	sbrs	r11, 6
    5e1e:	02 c0       	rjmp	.+4      	; 0x5e24 <conv_int+0x88>
    5e20:	c2 60       	ori	r28, 0x02	; 2
    5e22:	01 c0       	rjmp	.+2      	; 0x5e26 <conv_int+0x8a>
    5e24:	c2 61       	ori	r28, 0x12	; 18
    5e26:	da 2d       	mov	r29, r10
    5e28:	81 2c       	mov	r8, r1
    5e2a:	91 2c       	mov	r9, r1
    5e2c:	54 01       	movw	r10, r8
    5e2e:	20 ed       	ldi	r18, 0xD0	; 208
    5e30:	28 0f       	add	r18, r24
    5e32:	28 30       	cpi	r18, 0x08	; 8
    5e34:	78 f0       	brcs	.+30     	; 0x5e54 <conv_int+0xb8>
    5e36:	c4 ff       	sbrs	r28, 4
    5e38:	03 c0       	rjmp	.+6      	; 0x5e40 <conv_int+0xa4>
    5e3a:	b8 01       	movw	r22, r16
    5e3c:	ca d2       	rcall	.+1428   	; 0x63d2 <ungetc>
    5e3e:	17 c0       	rjmp	.+46     	; 0x5e6e <conv_int+0xd2>
    5e40:	2a 30       	cpi	r18, 0x0A	; 10
    5e42:	40 f0       	brcs	.+16     	; 0x5e54 <conv_int+0xb8>
    5e44:	c6 ff       	sbrs	r28, 6
    5e46:	f9 cf       	rjmp	.-14     	; 0x5e3a <conv_int+0x9e>
    5e48:	2f 7d       	andi	r18, 0xDF	; 223
    5e4a:	3f ee       	ldi	r19, 0xEF	; 239
    5e4c:	32 0f       	add	r19, r18
    5e4e:	36 30       	cpi	r19, 0x06	; 6
    5e50:	a0 f7       	brcc	.-24     	; 0x5e3a <conv_int+0x9e>
    5e52:	27 50       	subi	r18, 0x07	; 7
    5e54:	4c 2f       	mov	r20, r28
    5e56:	c5 01       	movw	r24, r10
    5e58:	b4 01       	movw	r22, r8
    5e5a:	63 df       	rcall	.-314    	; 0x5d22 <mulacc>
    5e5c:	4b 01       	movw	r8, r22
    5e5e:	5c 01       	movw	r10, r24
    5e60:	c2 60       	ori	r28, 0x02	; 2
    5e62:	d1 50       	subi	r29, 0x01	; 1
    5e64:	51 f0       	breq	.+20     	; 0x5e7a <conv_int+0xde>
    5e66:	c8 01       	movw	r24, r16
    5e68:	3a d2       	rcall	.+1140   	; 0x62de <fgetc>
    5e6a:	97 ff       	sbrs	r25, 7
    5e6c:	e0 cf       	rjmp	.-64     	; 0x5e2e <conv_int+0x92>
    5e6e:	c1 fd       	sbrc	r28, 1
    5e70:	04 c0       	rjmp	.+8      	; 0x5e7a <conv_int+0xde>
    5e72:	b0 cf       	rjmp	.-160    	; 0x5dd4 <conv_int+0x38>
    5e74:	81 2c       	mov	r8, r1
    5e76:	91 2c       	mov	r9, r1
    5e78:	54 01       	movw	r10, r8
    5e7a:	c7 ff       	sbrs	r28, 7
    5e7c:	08 c0       	rjmp	.+16     	; 0x5e8e <conv_int+0xf2>
    5e7e:	b0 94       	com	r11
    5e80:	a0 94       	com	r10
    5e82:	90 94       	com	r9
    5e84:	80 94       	com	r8
    5e86:	81 1c       	adc	r8, r1
    5e88:	91 1c       	adc	r9, r1
    5e8a:	a1 1c       	adc	r10, r1
    5e8c:	b1 1c       	adc	r11, r1
    5e8e:	2c 2f       	mov	r18, r28
    5e90:	b5 01       	movw	r22, r10
    5e92:	a4 01       	movw	r20, r8
    5e94:	c7 01       	movw	r24, r14
    5e96:	39 df       	rcall	.-398    	; 0x5d0a <putval>
    5e98:	81 e0       	ldi	r24, 0x01	; 1
    5e9a:	df 91       	pop	r29
    5e9c:	cf 91       	pop	r28
    5e9e:	1f 91       	pop	r17
    5ea0:	0f 91       	pop	r16
    5ea2:	ff 90       	pop	r15
    5ea4:	ef 90       	pop	r14
    5ea6:	bf 90       	pop	r11
    5ea8:	af 90       	pop	r10
    5eaa:	9f 90       	pop	r9
    5eac:	8f 90       	pop	r8
    5eae:	08 95       	ret

00005eb0 <conv_brk>:
    5eb0:	5f 92       	push	r5
    5eb2:	6f 92       	push	r6
    5eb4:	7f 92       	push	r7
    5eb6:	8f 92       	push	r8
    5eb8:	9f 92       	push	r9
    5eba:	af 92       	push	r10
    5ebc:	bf 92       	push	r11
    5ebe:	cf 92       	push	r12
    5ec0:	df 92       	push	r13
    5ec2:	ef 92       	push	r14
    5ec4:	ff 92       	push	r15
    5ec6:	0f 93       	push	r16
    5ec8:	1f 93       	push	r17
    5eca:	cf 93       	push	r28
    5ecc:	df 93       	push	r29
    5ece:	cd b7       	in	r28, 0x3d	; 61
    5ed0:	de b7       	in	r29, 0x3e	; 62
    5ed2:	a0 97       	sbiw	r28, 0x20	; 32
    5ed4:	0f b6       	in	r0, 0x3f	; 63
    5ed6:	f8 94       	cli
    5ed8:	de bf       	out	0x3e, r29	; 62
    5eda:	0f be       	out	0x3f, r0	; 63
    5edc:	cd bf       	out	0x3d, r28	; 61
    5ede:	5c 01       	movw	r10, r24
    5ee0:	96 2e       	mov	r9, r22
    5ee2:	7a 01       	movw	r14, r20
    5ee4:	f9 01       	movw	r30, r18
    5ee6:	8e 01       	movw	r16, r28
    5ee8:	0f 5f       	subi	r16, 0xFF	; 255
    5eea:	1f 4f       	sbci	r17, 0xFF	; 255
    5eec:	68 01       	movw	r12, r16
    5eee:	80 e2       	ldi	r24, 0x20	; 32
    5ef0:	d8 01       	movw	r26, r16
    5ef2:	1d 92       	st	X+, r1
    5ef4:	8a 95       	dec	r24
    5ef6:	e9 f7       	brne	.-6      	; 0x5ef2 <conv_brk+0x42>
    5ef8:	d5 01       	movw	r26, r10
    5efa:	13 96       	adiw	r26, 0x03	; 3
    5efc:	8c 90       	ld	r8, X
    5efe:	80 e0       	ldi	r24, 0x00	; 0
    5f00:	90 e0       	ldi	r25, 0x00	; 0
    5f02:	61 2c       	mov	r6, r1
    5f04:	71 2c       	mov	r7, r1
    5f06:	30 e0       	ldi	r19, 0x00	; 0
    5f08:	61 e0       	ldi	r22, 0x01	; 1
    5f0a:	70 e0       	ldi	r23, 0x00	; 0
    5f0c:	83 fc       	sbrc	r8, 3
    5f0e:	25 91       	lpm	r18, Z+
    5f10:	83 fe       	sbrs	r8, 3
    5f12:	21 91       	ld	r18, Z+
    5f14:	8f 01       	movw	r16, r30
    5f16:	52 2e       	mov	r5, r18
    5f18:	21 11       	cpse	r18, r1
    5f1a:	03 c0       	rjmp	.+6      	; 0x5f22 <conv_brk+0x72>
    5f1c:	80 e0       	ldi	r24, 0x00	; 0
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	90 c0       	rjmp	.+288    	; 0x6042 <conv_brk+0x192>
    5f22:	2e 35       	cpi	r18, 0x5E	; 94
    5f24:	11 f4       	brne	.+4      	; 0x5f2a <conv_brk+0x7a>
    5f26:	00 97       	sbiw	r24, 0x00	; 0
    5f28:	51 f1       	breq	.+84     	; 0x5f7e <conv_brk+0xce>
    5f2a:	43 2f       	mov	r20, r19
    5f2c:	50 e0       	ldi	r21, 0x00	; 0
    5f2e:	48 17       	cp	r20, r24
    5f30:	59 07       	cpc	r21, r25
    5f32:	3c f4       	brge	.+14     	; 0x5f42 <conv_brk+0x92>
    5f34:	2d 35       	cpi	r18, 0x5D	; 93
    5f36:	59 f1       	breq	.+86     	; 0x5f8e <conv_brk+0xde>
    5f38:	2d 32       	cpi	r18, 0x2D	; 45
    5f3a:	19 f4       	brne	.+6      	; 0x5f42 <conv_brk+0x92>
    5f3c:	77 20       	and	r7, r7
    5f3e:	09 f1       	breq	.+66     	; 0x5f82 <conv_brk+0xd2>
    5f40:	03 c0       	rjmp	.+6      	; 0x5f48 <conv_brk+0x98>
    5f42:	77 20       	and	r7, r7
    5f44:	09 f4       	brne	.+2      	; 0x5f48 <conv_brk+0x98>
    5f46:	68 c0       	rjmp	.+208    	; 0x6018 <conv_brk+0x168>
    5f48:	45 2d       	mov	r20, r5
    5f4a:	46 95       	lsr	r20
    5f4c:	46 95       	lsr	r20
    5f4e:	46 95       	lsr	r20
    5f50:	d6 01       	movw	r26, r12
    5f52:	a4 0f       	add	r26, r20
    5f54:	b1 1d       	adc	r27, r1
    5f56:	45 2d       	mov	r20, r5
    5f58:	47 70       	andi	r20, 0x07	; 7
    5f5a:	8b 01       	movw	r16, r22
    5f5c:	02 c0       	rjmp	.+4      	; 0x5f62 <conv_brk+0xb2>
    5f5e:	00 0f       	add	r16, r16
    5f60:	11 1f       	adc	r17, r17
    5f62:	4a 95       	dec	r20
    5f64:	e2 f7       	brpl	.-8      	; 0x5f5e <conv_brk+0xae>
    5f66:	a8 01       	movw	r20, r16
    5f68:	5c 91       	ld	r21, X
    5f6a:	45 2b       	or	r20, r21
    5f6c:	4c 93       	st	X, r20
    5f6e:	65 14       	cp	r6, r5
    5f70:	59 f0       	breq	.+22     	; 0x5f88 <conv_brk+0xd8>
    5f72:	56 14       	cp	r5, r6
    5f74:	10 f4       	brcc	.+4      	; 0x5f7a <conv_brk+0xca>
    5f76:	53 94       	inc	r5
    5f78:	e7 cf       	rjmp	.-50     	; 0x5f48 <conv_brk+0x98>
    5f7a:	5a 94       	dec	r5
    5f7c:	e5 cf       	rjmp	.-54     	; 0x5f48 <conv_brk+0x98>
    5f7e:	31 e0       	ldi	r19, 0x01	; 1
    5f80:	04 c0       	rjmp	.+8      	; 0x5f8a <conv_brk+0xda>
    5f82:	77 24       	eor	r7, r7
    5f84:	73 94       	inc	r7
    5f86:	01 c0       	rjmp	.+2      	; 0x5f8a <conv_brk+0xda>
    5f88:	71 2c       	mov	r7, r1
    5f8a:	01 96       	adiw	r24, 0x01	; 1
    5f8c:	bf cf       	rjmp	.-130    	; 0x5f0c <conv_brk+0x5c>
    5f8e:	77 20       	and	r7, r7
    5f90:	19 f0       	breq	.+6      	; 0x5f98 <conv_brk+0xe8>
    5f92:	8e 81       	ldd	r24, Y+6	; 0x06
    5f94:	80 62       	ori	r24, 0x20	; 32
    5f96:	8e 83       	std	Y+6, r24	; 0x06
    5f98:	31 11       	cpse	r19, r1
    5f9a:	03 c0       	rjmp	.+6      	; 0x5fa2 <conv_brk+0xf2>
    5f9c:	88 24       	eor	r8, r8
    5f9e:	83 94       	inc	r8
    5fa0:	17 c0       	rjmp	.+46     	; 0x5fd0 <conv_brk+0x120>
    5fa2:	f6 01       	movw	r30, r12
    5fa4:	9e 01       	movw	r18, r28
    5fa6:	2f 5d       	subi	r18, 0xDF	; 223
    5fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    5faa:	80 81       	ld	r24, Z
    5fac:	80 95       	com	r24
    5fae:	81 93       	st	Z+, r24
    5fb0:	2e 17       	cp	r18, r30
    5fb2:	3f 07       	cpc	r19, r31
    5fb4:	d1 f7       	brne	.-12     	; 0x5faa <conv_brk+0xfa>
    5fb6:	f2 cf       	rjmp	.-28     	; 0x5f9c <conv_brk+0xec>
    5fb8:	e1 14       	cp	r14, r1
    5fba:	f1 04       	cpc	r15, r1
    5fbc:	29 f0       	breq	.+10     	; 0x5fc8 <conv_brk+0x118>
    5fbe:	d7 01       	movw	r26, r14
    5fc0:	8c 93       	st	X, r24
    5fc2:	f7 01       	movw	r30, r14
    5fc4:	31 96       	adiw	r30, 0x01	; 1
    5fc6:	7f 01       	movw	r14, r30
    5fc8:	9a 94       	dec	r9
    5fca:	81 2c       	mov	r8, r1
    5fcc:	99 20       	and	r9, r9
    5fce:	e9 f0       	breq	.+58     	; 0x600a <conv_brk+0x15a>
    5fd0:	c5 01       	movw	r24, r10
    5fd2:	85 d1       	rcall	.+778    	; 0x62de <fgetc>
    5fd4:	97 fd       	sbrc	r25, 7
    5fd6:	17 c0       	rjmp	.+46     	; 0x6006 <conv_brk+0x156>
    5fd8:	fc 01       	movw	r30, r24
    5fda:	ff 27       	eor	r31, r31
    5fdc:	23 e0       	ldi	r18, 0x03	; 3
    5fde:	f5 95       	asr	r31
    5fe0:	e7 95       	ror	r30
    5fe2:	2a 95       	dec	r18
    5fe4:	e1 f7       	brne	.-8      	; 0x5fde <conv_brk+0x12e>
    5fe6:	ec 0d       	add	r30, r12
    5fe8:	fd 1d       	adc	r31, r13
    5fea:	20 81       	ld	r18, Z
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	ac 01       	movw	r20, r24
    5ff0:	47 70       	andi	r20, 0x07	; 7
    5ff2:	55 27       	eor	r21, r21
    5ff4:	02 c0       	rjmp	.+4      	; 0x5ffa <conv_brk+0x14a>
    5ff6:	35 95       	asr	r19
    5ff8:	27 95       	ror	r18
    5ffa:	4a 95       	dec	r20
    5ffc:	e2 f7       	brpl	.-8      	; 0x5ff6 <conv_brk+0x146>
    5ffe:	20 fd       	sbrc	r18, 0
    6000:	db cf       	rjmp	.-74     	; 0x5fb8 <conv_brk+0x108>
    6002:	b5 01       	movw	r22, r10
    6004:	e6 d1       	rcall	.+972    	; 0x63d2 <ungetc>
    6006:	81 10       	cpse	r8, r1
    6008:	89 cf       	rjmp	.-238    	; 0x5f1c <conv_brk+0x6c>
    600a:	e1 14       	cp	r14, r1
    600c:	f1 04       	cpc	r15, r1
    600e:	11 f0       	breq	.+4      	; 0x6014 <conv_brk+0x164>
    6010:	d7 01       	movw	r26, r14
    6012:	1c 92       	st	X, r1
    6014:	c8 01       	movw	r24, r16
    6016:	15 c0       	rjmp	.+42     	; 0x6042 <conv_brk+0x192>
    6018:	42 2f       	mov	r20, r18
    601a:	46 95       	lsr	r20
    601c:	46 95       	lsr	r20
    601e:	46 95       	lsr	r20
    6020:	d6 01       	movw	r26, r12
    6022:	a4 0f       	add	r26, r20
    6024:	b1 1d       	adc	r27, r1
    6026:	42 2f       	mov	r20, r18
    6028:	47 70       	andi	r20, 0x07	; 7
    602a:	8b 01       	movw	r16, r22
    602c:	02 c0       	rjmp	.+4      	; 0x6032 <conv_brk+0x182>
    602e:	00 0f       	add	r16, r16
    6030:	11 1f       	adc	r17, r17
    6032:	4a 95       	dec	r20
    6034:	e2 f7       	brpl	.-8      	; 0x602e <conv_brk+0x17e>
    6036:	a8 01       	movw	r20, r16
    6038:	5c 91       	ld	r21, X
    603a:	45 2b       	or	r20, r21
    603c:	4c 93       	st	X, r20
    603e:	62 2e       	mov	r6, r18
    6040:	a4 cf       	rjmp	.-184    	; 0x5f8a <conv_brk+0xda>
    6042:	a0 96       	adiw	r28, 0x20	; 32
    6044:	0f b6       	in	r0, 0x3f	; 63
    6046:	f8 94       	cli
    6048:	de bf       	out	0x3e, r29	; 62
    604a:	0f be       	out	0x3f, r0	; 63
    604c:	cd bf       	out	0x3d, r28	; 61
    604e:	df 91       	pop	r29
    6050:	cf 91       	pop	r28
    6052:	1f 91       	pop	r17
    6054:	0f 91       	pop	r16
    6056:	ff 90       	pop	r15
    6058:	ef 90       	pop	r14
    605a:	df 90       	pop	r13
    605c:	cf 90       	pop	r12
    605e:	bf 90       	pop	r11
    6060:	af 90       	pop	r10
    6062:	9f 90       	pop	r9
    6064:	8f 90       	pop	r8
    6066:	7f 90       	pop	r7
    6068:	6f 90       	pop	r6
    606a:	5f 90       	pop	r5
    606c:	08 95       	ret

0000606e <vfscanf>:
    606e:	5f 92       	push	r5
    6070:	6f 92       	push	r6
    6072:	7f 92       	push	r7
    6074:	8f 92       	push	r8
    6076:	9f 92       	push	r9
    6078:	af 92       	push	r10
    607a:	bf 92       	push	r11
    607c:	cf 92       	push	r12
    607e:	df 92       	push	r13
    6080:	ef 92       	push	r14
    6082:	ff 92       	push	r15
    6084:	0f 93       	push	r16
    6086:	1f 93       	push	r17
    6088:	cf 93       	push	r28
    608a:	df 93       	push	r29
    608c:	6c 01       	movw	r12, r24
    608e:	eb 01       	movw	r28, r22
    6090:	5a 01       	movw	r10, r20
    6092:	fc 01       	movw	r30, r24
    6094:	17 82       	std	Z+7, r1	; 0x07
    6096:	16 82       	std	Z+6, r1	; 0x06
    6098:	51 2c       	mov	r5, r1
    609a:	f6 01       	movw	r30, r12
    609c:	e3 80       	ldd	r14, Z+3	; 0x03
    609e:	fe 01       	movw	r30, r28
    60a0:	e3 fc       	sbrc	r14, 3
    60a2:	85 91       	lpm	r24, Z+
    60a4:	e3 fe       	sbrs	r14, 3
    60a6:	81 91       	ld	r24, Z+
    60a8:	18 2f       	mov	r17, r24
    60aa:	ef 01       	movw	r28, r30
    60ac:	88 23       	and	r24, r24
    60ae:	09 f4       	brne	.+2      	; 0x60b2 <vfscanf+0x44>
    60b0:	e0 c0       	rjmp	.+448    	; 0x6272 <vfscanf+0x204>
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	d1 da       	rcall	.-2654   	; 0x5658 <isspace>
    60b6:	89 2b       	or	r24, r25
    60b8:	19 f0       	breq	.+6      	; 0x60c0 <vfscanf+0x52>
    60ba:	c6 01       	movw	r24, r12
    60bc:	59 de       	rcall	.-846    	; 0x5d70 <skip_spaces>
    60be:	ed cf       	rjmp	.-38     	; 0x609a <vfscanf+0x2c>
    60c0:	15 32       	cpi	r17, 0x25	; 37
    60c2:	41 f4       	brne	.+16     	; 0x60d4 <vfscanf+0x66>
    60c4:	fe 01       	movw	r30, r28
    60c6:	e3 fc       	sbrc	r14, 3
    60c8:	15 91       	lpm	r17, Z+
    60ca:	e3 fe       	sbrs	r14, 3
    60cc:	11 91       	ld	r17, Z+
    60ce:	ef 01       	movw	r28, r30
    60d0:	15 32       	cpi	r17, 0x25	; 37
    60d2:	71 f4       	brne	.+28     	; 0x60f0 <vfscanf+0x82>
    60d4:	c6 01       	movw	r24, r12
    60d6:	03 d1       	rcall	.+518    	; 0x62de <fgetc>
    60d8:	97 fd       	sbrc	r25, 7
    60da:	c9 c0       	rjmp	.+402    	; 0x626e <vfscanf+0x200>
    60dc:	41 2f       	mov	r20, r17
    60de:	50 e0       	ldi	r21, 0x00	; 0
    60e0:	9c 01       	movw	r18, r24
    60e2:	33 27       	eor	r19, r19
    60e4:	24 17       	cp	r18, r20
    60e6:	35 07       	cpc	r19, r21
    60e8:	c1 f2       	breq	.-80     	; 0x609a <vfscanf+0x2c>
    60ea:	b6 01       	movw	r22, r12
    60ec:	72 d1       	rcall	.+740    	; 0x63d2 <ungetc>
    60ee:	c1 c0       	rjmp	.+386    	; 0x6272 <vfscanf+0x204>
    60f0:	1a 32       	cpi	r17, 0x2A	; 42
    60f2:	39 f4       	brne	.+14     	; 0x6102 <vfscanf+0x94>
    60f4:	e3 fc       	sbrc	r14, 3
    60f6:	15 91       	lpm	r17, Z+
    60f8:	e3 fe       	sbrs	r14, 3
    60fa:	11 91       	ld	r17, Z+
    60fc:	ef 01       	movw	r28, r30
    60fe:	01 e0       	ldi	r16, 0x01	; 1
    6100:	01 c0       	rjmp	.+2      	; 0x6104 <vfscanf+0x96>
    6102:	00 e0       	ldi	r16, 0x00	; 0
    6104:	f1 2c       	mov	r15, r1
    6106:	20 ed       	ldi	r18, 0xD0	; 208
    6108:	21 0f       	add	r18, r17
    610a:	2a 30       	cpi	r18, 0x0A	; 10
    610c:	78 f4       	brcc	.+30     	; 0x612c <vfscanf+0xbe>
    610e:	02 60       	ori	r16, 0x02	; 2
    6110:	6f 2d       	mov	r22, r15
    6112:	70 e0       	ldi	r23, 0x00	; 0
    6114:	80 e0       	ldi	r24, 0x00	; 0
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	40 e2       	ldi	r20, 0x20	; 32
    611a:	03 de       	rcall	.-1018   	; 0x5d22 <mulacc>
    611c:	f6 2e       	mov	r15, r22
    611e:	fe 01       	movw	r30, r28
    6120:	e3 fc       	sbrc	r14, 3
    6122:	15 91       	lpm	r17, Z+
    6124:	e3 fe       	sbrs	r14, 3
    6126:	11 91       	ld	r17, Z+
    6128:	ef 01       	movw	r28, r30
    612a:	ed cf       	rjmp	.-38     	; 0x6106 <vfscanf+0x98>
    612c:	01 ff       	sbrs	r16, 1
    612e:	03 c0       	rjmp	.+6      	; 0x6136 <vfscanf+0xc8>
    6130:	f1 10       	cpse	r15, r1
    6132:	03 c0       	rjmp	.+6      	; 0x613a <vfscanf+0xcc>
    6134:	9e c0       	rjmp	.+316    	; 0x6272 <vfscanf+0x204>
    6136:	ff 24       	eor	r15, r15
    6138:	fa 94       	dec	r15
    613a:	18 36       	cpi	r17, 0x68	; 104
    613c:	19 f0       	breq	.+6      	; 0x6144 <vfscanf+0xd6>
    613e:	1c 36       	cpi	r17, 0x6C	; 108
    6140:	51 f0       	breq	.+20     	; 0x6156 <vfscanf+0xe8>
    6142:	10 c0       	rjmp	.+32     	; 0x6164 <vfscanf+0xf6>
    6144:	fe 01       	movw	r30, r28
    6146:	e3 fc       	sbrc	r14, 3
    6148:	15 91       	lpm	r17, Z+
    614a:	e3 fe       	sbrs	r14, 3
    614c:	11 91       	ld	r17, Z+
    614e:	ef 01       	movw	r28, r30
    6150:	18 36       	cpi	r17, 0x68	; 104
    6152:	41 f4       	brne	.+16     	; 0x6164 <vfscanf+0xf6>
    6154:	08 60       	ori	r16, 0x08	; 8
    6156:	04 60       	ori	r16, 0x04	; 4
    6158:	fe 01       	movw	r30, r28
    615a:	e3 fc       	sbrc	r14, 3
    615c:	15 91       	lpm	r17, Z+
    615e:	e3 fe       	sbrs	r14, 3
    6160:	11 91       	ld	r17, Z+
    6162:	ef 01       	movw	r28, r30
    6164:	11 23       	and	r17, r17
    6166:	09 f4       	brne	.+2      	; 0x616a <vfscanf+0xfc>
    6168:	84 c0       	rjmp	.+264    	; 0x6272 <vfscanf+0x204>
    616a:	61 2f       	mov	r22, r17
    616c:	70 e0       	ldi	r23, 0x00	; 0
    616e:	8c e8       	ldi	r24, 0x8C	; 140
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	94 d0       	rcall	.+296    	; 0x629c <strchr_P>
    6174:	89 2b       	or	r24, r25
    6176:	09 f4       	brne	.+2      	; 0x617a <vfscanf+0x10c>
    6178:	7c c0       	rjmp	.+248    	; 0x6272 <vfscanf+0x204>
    617a:	00 fd       	sbrc	r16, 0
    617c:	07 c0       	rjmp	.+14     	; 0x618c <vfscanf+0x11e>
    617e:	f5 01       	movw	r30, r10
    6180:	80 80       	ld	r8, Z
    6182:	91 80       	ldd	r9, Z+1	; 0x01
    6184:	c5 01       	movw	r24, r10
    6186:	02 96       	adiw	r24, 0x02	; 2
    6188:	5c 01       	movw	r10, r24
    618a:	02 c0       	rjmp	.+4      	; 0x6190 <vfscanf+0x122>
    618c:	81 2c       	mov	r8, r1
    618e:	91 2c       	mov	r9, r1
    6190:	1e 36       	cpi	r17, 0x6E	; 110
    6192:	49 f4       	brne	.+18     	; 0x61a6 <vfscanf+0x138>
    6194:	f6 01       	movw	r30, r12
    6196:	46 81       	ldd	r20, Z+6	; 0x06
    6198:	57 81       	ldd	r21, Z+7	; 0x07
    619a:	60 e0       	ldi	r22, 0x00	; 0
    619c:	70 e0       	ldi	r23, 0x00	; 0
    619e:	20 2f       	mov	r18, r16
    61a0:	c4 01       	movw	r24, r8
    61a2:	b3 dd       	rcall	.-1178   	; 0x5d0a <putval>
    61a4:	7a cf       	rjmp	.-268    	; 0x609a <vfscanf+0x2c>
    61a6:	13 36       	cpi	r17, 0x63	; 99
    61a8:	a1 f4       	brne	.+40     	; 0x61d2 <vfscanf+0x164>
    61aa:	01 fd       	sbrc	r16, 1
    61ac:	02 c0       	rjmp	.+4      	; 0x61b2 <vfscanf+0x144>
    61ae:	ff 24       	eor	r15, r15
    61b0:	f3 94       	inc	r15
    61b2:	c6 01       	movw	r24, r12
    61b4:	94 d0       	rcall	.+296    	; 0x62de <fgetc>
    61b6:	97 fd       	sbrc	r25, 7
    61b8:	5a c0       	rjmp	.+180    	; 0x626e <vfscanf+0x200>
    61ba:	81 14       	cp	r8, r1
    61bc:	91 04       	cpc	r9, r1
    61be:	29 f0       	breq	.+10     	; 0x61ca <vfscanf+0x15c>
    61c0:	f4 01       	movw	r30, r8
    61c2:	80 83       	st	Z, r24
    61c4:	c4 01       	movw	r24, r8
    61c6:	01 96       	adiw	r24, 0x01	; 1
    61c8:	4c 01       	movw	r8, r24
    61ca:	fa 94       	dec	r15
    61cc:	f1 10       	cpse	r15, r1
    61ce:	f1 cf       	rjmp	.-30     	; 0x61b2 <vfscanf+0x144>
    61d0:	4a c0       	rjmp	.+148    	; 0x6266 <vfscanf+0x1f8>
    61d2:	1b 35       	cpi	r17, 0x5B	; 91
    61d4:	51 f4       	brne	.+20     	; 0x61ea <vfscanf+0x17c>
    61d6:	9e 01       	movw	r18, r28
    61d8:	a4 01       	movw	r20, r8
    61da:	6f 2d       	mov	r22, r15
    61dc:	c6 01       	movw	r24, r12
    61de:	68 de       	rcall	.-816    	; 0x5eb0 <conv_brk>
    61e0:	ec 01       	movw	r28, r24
    61e2:	89 2b       	or	r24, r25
    61e4:	09 f0       	breq	.+2      	; 0x61e8 <vfscanf+0x17a>
    61e6:	3f c0       	rjmp	.+126    	; 0x6266 <vfscanf+0x1f8>
    61e8:	39 c0       	rjmp	.+114    	; 0x625c <vfscanf+0x1ee>
    61ea:	c6 01       	movw	r24, r12
    61ec:	c1 dd       	rcall	.-1150   	; 0x5d70 <skip_spaces>
    61ee:	97 fd       	sbrc	r25, 7
    61f0:	3e c0       	rjmp	.+124    	; 0x626e <vfscanf+0x200>
    61f2:	1f 36       	cpi	r17, 0x6F	; 111
    61f4:	49 f1       	breq	.+82     	; 0x6248 <vfscanf+0x1da>
    61f6:	28 f4       	brcc	.+10     	; 0x6202 <vfscanf+0x194>
    61f8:	14 36       	cpi	r17, 0x64	; 100
    61fa:	21 f1       	breq	.+72     	; 0x6244 <vfscanf+0x1d6>
    61fc:	19 36       	cpi	r17, 0x69	; 105
    61fe:	39 f1       	breq	.+78     	; 0x624e <vfscanf+0x1e0>
    6200:	25 c0       	rjmp	.+74     	; 0x624c <vfscanf+0x1de>
    6202:	13 37       	cpi	r17, 0x73	; 115
    6204:	71 f0       	breq	.+28     	; 0x6222 <vfscanf+0x1b4>
    6206:	15 37       	cpi	r17, 0x75	; 117
    6208:	e9 f0       	breq	.+58     	; 0x6244 <vfscanf+0x1d6>
    620a:	20 c0       	rjmp	.+64     	; 0x624c <vfscanf+0x1de>
    620c:	81 14       	cp	r8, r1
    620e:	91 04       	cpc	r9, r1
    6210:	29 f0       	breq	.+10     	; 0x621c <vfscanf+0x1ae>
    6212:	f4 01       	movw	r30, r8
    6214:	60 82       	st	Z, r6
    6216:	c4 01       	movw	r24, r8
    6218:	01 96       	adiw	r24, 0x01	; 1
    621a:	4c 01       	movw	r8, r24
    621c:	fa 94       	dec	r15
    621e:	ff 20       	and	r15, r15
    6220:	59 f0       	breq	.+22     	; 0x6238 <vfscanf+0x1ca>
    6222:	c6 01       	movw	r24, r12
    6224:	5c d0       	rcall	.+184    	; 0x62de <fgetc>
    6226:	3c 01       	movw	r6, r24
    6228:	97 fd       	sbrc	r25, 7
    622a:	06 c0       	rjmp	.+12     	; 0x6238 <vfscanf+0x1ca>
    622c:	15 da       	rcall	.-3030   	; 0x5658 <isspace>
    622e:	89 2b       	or	r24, r25
    6230:	69 f3       	breq	.-38     	; 0x620c <vfscanf+0x19e>
    6232:	b6 01       	movw	r22, r12
    6234:	c3 01       	movw	r24, r6
    6236:	cd d0       	rcall	.+410    	; 0x63d2 <ungetc>
    6238:	81 14       	cp	r8, r1
    623a:	91 04       	cpc	r9, r1
    623c:	a1 f0       	breq	.+40     	; 0x6266 <vfscanf+0x1f8>
    623e:	f4 01       	movw	r30, r8
    6240:	10 82       	st	Z, r1
    6242:	11 c0       	rjmp	.+34     	; 0x6266 <vfscanf+0x1f8>
    6244:	00 62       	ori	r16, 0x20	; 32
    6246:	03 c0       	rjmp	.+6      	; 0x624e <vfscanf+0x1e0>
    6248:	00 61       	ori	r16, 0x10	; 16
    624a:	01 c0       	rjmp	.+2      	; 0x624e <vfscanf+0x1e0>
    624c:	00 64       	ori	r16, 0x40	; 64
    624e:	20 2f       	mov	r18, r16
    6250:	a4 01       	movw	r20, r8
    6252:	6f 2d       	mov	r22, r15
    6254:	c6 01       	movw	r24, r12
    6256:	a2 dd       	rcall	.-1212   	; 0x5d9c <conv_int>
    6258:	81 11       	cpse	r24, r1
    625a:	05 c0       	rjmp	.+10     	; 0x6266 <vfscanf+0x1f8>
    625c:	f6 01       	movw	r30, r12
    625e:	83 81       	ldd	r24, Z+3	; 0x03
    6260:	80 73       	andi	r24, 0x30	; 48
    6262:	29 f4       	brne	.+10     	; 0x626e <vfscanf+0x200>
    6264:	06 c0       	rjmp	.+12     	; 0x6272 <vfscanf+0x204>
    6266:	00 fd       	sbrc	r16, 0
    6268:	18 cf       	rjmp	.-464    	; 0x609a <vfscanf+0x2c>
    626a:	53 94       	inc	r5
    626c:	16 cf       	rjmp	.-468    	; 0x609a <vfscanf+0x2c>
    626e:	55 20       	and	r5, r5
    6270:	19 f0       	breq	.+6      	; 0x6278 <vfscanf+0x20a>
    6272:	85 2d       	mov	r24, r5
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	02 c0       	rjmp	.+4      	; 0x627c <vfscanf+0x20e>
    6278:	8f ef       	ldi	r24, 0xFF	; 255
    627a:	9f ef       	ldi	r25, 0xFF	; 255
    627c:	df 91       	pop	r29
    627e:	cf 91       	pop	r28
    6280:	1f 91       	pop	r17
    6282:	0f 91       	pop	r16
    6284:	ff 90       	pop	r15
    6286:	ef 90       	pop	r14
    6288:	df 90       	pop	r13
    628a:	cf 90       	pop	r12
    628c:	bf 90       	pop	r11
    628e:	af 90       	pop	r10
    6290:	9f 90       	pop	r9
    6292:	8f 90       	pop	r8
    6294:	7f 90       	pop	r7
    6296:	6f 90       	pop	r6
    6298:	5f 90       	pop	r5
    629a:	08 95       	ret

0000629c <strchr_P>:
    629c:	fc 01       	movw	r30, r24
    629e:	05 90       	lpm	r0, Z+
    62a0:	06 16       	cp	r0, r22
    62a2:	21 f0       	breq	.+8      	; 0x62ac <strchr_P+0x10>
    62a4:	00 20       	and	r0, r0
    62a6:	d9 f7       	brne	.-10     	; 0x629e <strchr_P+0x2>
    62a8:	c0 01       	movw	r24, r0
    62aa:	08 95       	ret
    62ac:	31 97       	sbiw	r30, 0x01	; 1
    62ae:	cf 01       	movw	r24, r30
    62b0:	08 95       	ret

000062b2 <strnlen_P>:
    62b2:	fc 01       	movw	r30, r24
    62b4:	05 90       	lpm	r0, Z+
    62b6:	61 50       	subi	r22, 0x01	; 1
    62b8:	70 40       	sbci	r23, 0x00	; 0
    62ba:	01 10       	cpse	r0, r1
    62bc:	d8 f7       	brcc	.-10     	; 0x62b4 <strnlen_P+0x2>
    62be:	80 95       	com	r24
    62c0:	90 95       	com	r25
    62c2:	8e 0f       	add	r24, r30
    62c4:	9f 1f       	adc	r25, r31
    62c6:	08 95       	ret

000062c8 <strnlen>:
    62c8:	fc 01       	movw	r30, r24
    62ca:	61 50       	subi	r22, 0x01	; 1
    62cc:	70 40       	sbci	r23, 0x00	; 0
    62ce:	01 90       	ld	r0, Z+
    62d0:	01 10       	cpse	r0, r1
    62d2:	d8 f7       	brcc	.-10     	; 0x62ca <strnlen+0x2>
    62d4:	80 95       	com	r24
    62d6:	90 95       	com	r25
    62d8:	8e 0f       	add	r24, r30
    62da:	9f 1f       	adc	r25, r31
    62dc:	08 95       	ret

000062de <fgetc>:
    62de:	cf 93       	push	r28
    62e0:	df 93       	push	r29
    62e2:	ec 01       	movw	r28, r24
    62e4:	2b 81       	ldd	r18, Y+3	; 0x03
    62e6:	20 ff       	sbrs	r18, 0
    62e8:	33 c0       	rjmp	.+102    	; 0x6350 <fgetc+0x72>
    62ea:	26 ff       	sbrs	r18, 6
    62ec:	0a c0       	rjmp	.+20     	; 0x6302 <fgetc+0x24>
    62ee:	2f 7b       	andi	r18, 0xBF	; 191
    62f0:	2b 83       	std	Y+3, r18	; 0x03
    62f2:	8e 81       	ldd	r24, Y+6	; 0x06
    62f4:	9f 81       	ldd	r25, Y+7	; 0x07
    62f6:	01 96       	adiw	r24, 0x01	; 1
    62f8:	9f 83       	std	Y+7, r25	; 0x07
    62fa:	8e 83       	std	Y+6, r24	; 0x06
    62fc:	8a 81       	ldd	r24, Y+2	; 0x02
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	29 c0       	rjmp	.+82     	; 0x6354 <fgetc+0x76>
    6302:	22 ff       	sbrs	r18, 2
    6304:	0f c0       	rjmp	.+30     	; 0x6324 <fgetc+0x46>
    6306:	e8 81       	ld	r30, Y
    6308:	f9 81       	ldd	r31, Y+1	; 0x01
    630a:	80 81       	ld	r24, Z
    630c:	08 2e       	mov	r0, r24
    630e:	00 0c       	add	r0, r0
    6310:	99 0b       	sbc	r25, r25
    6312:	00 97       	sbiw	r24, 0x00	; 0
    6314:	19 f4       	brne	.+6      	; 0x631c <fgetc+0x3e>
    6316:	20 62       	ori	r18, 0x20	; 32
    6318:	2b 83       	std	Y+3, r18	; 0x03
    631a:	1a c0       	rjmp	.+52     	; 0x6350 <fgetc+0x72>
    631c:	31 96       	adiw	r30, 0x01	; 1
    631e:	f9 83       	std	Y+1, r31	; 0x01
    6320:	e8 83       	st	Y, r30
    6322:	0e c0       	rjmp	.+28     	; 0x6340 <fgetc+0x62>
    6324:	ea 85       	ldd	r30, Y+10	; 0x0a
    6326:	fb 85       	ldd	r31, Y+11	; 0x0b
    6328:	09 95       	icall
    632a:	97 ff       	sbrs	r25, 7
    632c:	09 c0       	rjmp	.+18     	; 0x6340 <fgetc+0x62>
    632e:	2b 81       	ldd	r18, Y+3	; 0x03
    6330:	01 96       	adiw	r24, 0x01	; 1
    6332:	11 f0       	breq	.+4      	; 0x6338 <fgetc+0x5a>
    6334:	80 e2       	ldi	r24, 0x20	; 32
    6336:	01 c0       	rjmp	.+2      	; 0x633a <fgetc+0x5c>
    6338:	80 e1       	ldi	r24, 0x10	; 16
    633a:	82 2b       	or	r24, r18
    633c:	8b 83       	std	Y+3, r24	; 0x03
    633e:	08 c0       	rjmp	.+16     	; 0x6350 <fgetc+0x72>
    6340:	2e 81       	ldd	r18, Y+6	; 0x06
    6342:	3f 81       	ldd	r19, Y+7	; 0x07
    6344:	2f 5f       	subi	r18, 0xFF	; 255
    6346:	3f 4f       	sbci	r19, 0xFF	; 255
    6348:	3f 83       	std	Y+7, r19	; 0x07
    634a:	2e 83       	std	Y+6, r18	; 0x06
    634c:	99 27       	eor	r25, r25
    634e:	02 c0       	rjmp	.+4      	; 0x6354 <fgetc+0x76>
    6350:	8f ef       	ldi	r24, 0xFF	; 255
    6352:	9f ef       	ldi	r25, 0xFF	; 255
    6354:	df 91       	pop	r29
    6356:	cf 91       	pop	r28
    6358:	08 95       	ret

0000635a <fputc>:
    635a:	0f 93       	push	r16
    635c:	1f 93       	push	r17
    635e:	cf 93       	push	r28
    6360:	df 93       	push	r29
    6362:	fb 01       	movw	r30, r22
    6364:	23 81       	ldd	r18, Z+3	; 0x03
    6366:	21 fd       	sbrc	r18, 1
    6368:	03 c0       	rjmp	.+6      	; 0x6370 <fputc+0x16>
    636a:	8f ef       	ldi	r24, 0xFF	; 255
    636c:	9f ef       	ldi	r25, 0xFF	; 255
    636e:	2c c0       	rjmp	.+88     	; 0x63c8 <fputc+0x6e>
    6370:	22 ff       	sbrs	r18, 2
    6372:	16 c0       	rjmp	.+44     	; 0x63a0 <fputc+0x46>
    6374:	46 81       	ldd	r20, Z+6	; 0x06
    6376:	57 81       	ldd	r21, Z+7	; 0x07
    6378:	24 81       	ldd	r18, Z+4	; 0x04
    637a:	35 81       	ldd	r19, Z+5	; 0x05
    637c:	42 17       	cp	r20, r18
    637e:	53 07       	cpc	r21, r19
    6380:	44 f4       	brge	.+16     	; 0x6392 <fputc+0x38>
    6382:	a0 81       	ld	r26, Z
    6384:	b1 81       	ldd	r27, Z+1	; 0x01
    6386:	9d 01       	movw	r18, r26
    6388:	2f 5f       	subi	r18, 0xFF	; 255
    638a:	3f 4f       	sbci	r19, 0xFF	; 255
    638c:	31 83       	std	Z+1, r19	; 0x01
    638e:	20 83       	st	Z, r18
    6390:	8c 93       	st	X, r24
    6392:	26 81       	ldd	r18, Z+6	; 0x06
    6394:	37 81       	ldd	r19, Z+7	; 0x07
    6396:	2f 5f       	subi	r18, 0xFF	; 255
    6398:	3f 4f       	sbci	r19, 0xFF	; 255
    639a:	37 83       	std	Z+7, r19	; 0x07
    639c:	26 83       	std	Z+6, r18	; 0x06
    639e:	14 c0       	rjmp	.+40     	; 0x63c8 <fputc+0x6e>
    63a0:	8b 01       	movw	r16, r22
    63a2:	ec 01       	movw	r28, r24
    63a4:	fb 01       	movw	r30, r22
    63a6:	00 84       	ldd	r0, Z+8	; 0x08
    63a8:	f1 85       	ldd	r31, Z+9	; 0x09
    63aa:	e0 2d       	mov	r30, r0
    63ac:	09 95       	icall
    63ae:	89 2b       	or	r24, r25
    63b0:	e1 f6       	brne	.-72     	; 0x636a <fputc+0x10>
    63b2:	d8 01       	movw	r26, r16
    63b4:	16 96       	adiw	r26, 0x06	; 6
    63b6:	8d 91       	ld	r24, X+
    63b8:	9c 91       	ld	r25, X
    63ba:	17 97       	sbiw	r26, 0x07	; 7
    63bc:	01 96       	adiw	r24, 0x01	; 1
    63be:	17 96       	adiw	r26, 0x07	; 7
    63c0:	9c 93       	st	X, r25
    63c2:	8e 93       	st	-X, r24
    63c4:	16 97       	sbiw	r26, 0x06	; 6
    63c6:	ce 01       	movw	r24, r28
    63c8:	df 91       	pop	r29
    63ca:	cf 91       	pop	r28
    63cc:	1f 91       	pop	r17
    63ce:	0f 91       	pop	r16
    63d0:	08 95       	ret

000063d2 <ungetc>:
    63d2:	fb 01       	movw	r30, r22
    63d4:	23 81       	ldd	r18, Z+3	; 0x03
    63d6:	20 ff       	sbrs	r18, 0
    63d8:	12 c0       	rjmp	.+36     	; 0x63fe <ungetc+0x2c>
    63da:	26 fd       	sbrc	r18, 6
    63dc:	10 c0       	rjmp	.+32     	; 0x63fe <ungetc+0x2c>
    63de:	8f 3f       	cpi	r24, 0xFF	; 255
    63e0:	3f ef       	ldi	r19, 0xFF	; 255
    63e2:	93 07       	cpc	r25, r19
    63e4:	61 f0       	breq	.+24     	; 0x63fe <ungetc+0x2c>
    63e6:	82 83       	std	Z+2, r24	; 0x02
    63e8:	2f 7d       	andi	r18, 0xDF	; 223
    63ea:	20 64       	ori	r18, 0x40	; 64
    63ec:	23 83       	std	Z+3, r18	; 0x03
    63ee:	26 81       	ldd	r18, Z+6	; 0x06
    63f0:	37 81       	ldd	r19, Z+7	; 0x07
    63f2:	21 50       	subi	r18, 0x01	; 1
    63f4:	31 09       	sbc	r19, r1
    63f6:	37 83       	std	Z+7, r19	; 0x07
    63f8:	26 83       	std	Z+6, r18	; 0x06
    63fa:	99 27       	eor	r25, r25
    63fc:	08 95       	ret
    63fe:	8f ef       	ldi	r24, 0xFF	; 255
    6400:	9f ef       	ldi	r25, 0xFF	; 255
    6402:	08 95       	ret

00006404 <__ultoa_invert>:
    6404:	fa 01       	movw	r30, r20
    6406:	aa 27       	eor	r26, r26
    6408:	28 30       	cpi	r18, 0x08	; 8
    640a:	51 f1       	breq	.+84     	; 0x6460 <__ultoa_invert+0x5c>
    640c:	20 31       	cpi	r18, 0x10	; 16
    640e:	81 f1       	breq	.+96     	; 0x6470 <__ultoa_invert+0x6c>
    6410:	e8 94       	clt
    6412:	6f 93       	push	r22
    6414:	6e 7f       	andi	r22, 0xFE	; 254
    6416:	6e 5f       	subi	r22, 0xFE	; 254
    6418:	7f 4f       	sbci	r23, 0xFF	; 255
    641a:	8f 4f       	sbci	r24, 0xFF	; 255
    641c:	9f 4f       	sbci	r25, 0xFF	; 255
    641e:	af 4f       	sbci	r26, 0xFF	; 255
    6420:	b1 e0       	ldi	r27, 0x01	; 1
    6422:	3e d0       	rcall	.+124    	; 0x64a0 <__ultoa_invert+0x9c>
    6424:	b4 e0       	ldi	r27, 0x04	; 4
    6426:	3c d0       	rcall	.+120    	; 0x64a0 <__ultoa_invert+0x9c>
    6428:	67 0f       	add	r22, r23
    642a:	78 1f       	adc	r23, r24
    642c:	89 1f       	adc	r24, r25
    642e:	9a 1f       	adc	r25, r26
    6430:	a1 1d       	adc	r26, r1
    6432:	68 0f       	add	r22, r24
    6434:	79 1f       	adc	r23, r25
    6436:	8a 1f       	adc	r24, r26
    6438:	91 1d       	adc	r25, r1
    643a:	a1 1d       	adc	r26, r1
    643c:	6a 0f       	add	r22, r26
    643e:	71 1d       	adc	r23, r1
    6440:	81 1d       	adc	r24, r1
    6442:	91 1d       	adc	r25, r1
    6444:	a1 1d       	adc	r26, r1
    6446:	20 d0       	rcall	.+64     	; 0x6488 <__ultoa_invert+0x84>
    6448:	09 f4       	brne	.+2      	; 0x644c <__ultoa_invert+0x48>
    644a:	68 94       	set
    644c:	3f 91       	pop	r19
    644e:	2a e0       	ldi	r18, 0x0A	; 10
    6450:	26 9f       	mul	r18, r22
    6452:	11 24       	eor	r1, r1
    6454:	30 19       	sub	r19, r0
    6456:	30 5d       	subi	r19, 0xD0	; 208
    6458:	31 93       	st	Z+, r19
    645a:	de f6       	brtc	.-74     	; 0x6412 <__ultoa_invert+0xe>
    645c:	cf 01       	movw	r24, r30
    645e:	08 95       	ret
    6460:	46 2f       	mov	r20, r22
    6462:	47 70       	andi	r20, 0x07	; 7
    6464:	40 5d       	subi	r20, 0xD0	; 208
    6466:	41 93       	st	Z+, r20
    6468:	b3 e0       	ldi	r27, 0x03	; 3
    646a:	0f d0       	rcall	.+30     	; 0x648a <__ultoa_invert+0x86>
    646c:	c9 f7       	brne	.-14     	; 0x6460 <__ultoa_invert+0x5c>
    646e:	f6 cf       	rjmp	.-20     	; 0x645c <__ultoa_invert+0x58>
    6470:	46 2f       	mov	r20, r22
    6472:	4f 70       	andi	r20, 0x0F	; 15
    6474:	40 5d       	subi	r20, 0xD0	; 208
    6476:	4a 33       	cpi	r20, 0x3A	; 58
    6478:	18 f0       	brcs	.+6      	; 0x6480 <__ultoa_invert+0x7c>
    647a:	49 5d       	subi	r20, 0xD9	; 217
    647c:	31 fd       	sbrc	r19, 1
    647e:	40 52       	subi	r20, 0x20	; 32
    6480:	41 93       	st	Z+, r20
    6482:	02 d0       	rcall	.+4      	; 0x6488 <__ultoa_invert+0x84>
    6484:	a9 f7       	brne	.-22     	; 0x6470 <__ultoa_invert+0x6c>
    6486:	ea cf       	rjmp	.-44     	; 0x645c <__ultoa_invert+0x58>
    6488:	b4 e0       	ldi	r27, 0x04	; 4
    648a:	a6 95       	lsr	r26
    648c:	97 95       	ror	r25
    648e:	87 95       	ror	r24
    6490:	77 95       	ror	r23
    6492:	67 95       	ror	r22
    6494:	ba 95       	dec	r27
    6496:	c9 f7       	brne	.-14     	; 0x648a <__ultoa_invert+0x86>
    6498:	00 97       	sbiw	r24, 0x00	; 0
    649a:	61 05       	cpc	r22, r1
    649c:	71 05       	cpc	r23, r1
    649e:	08 95       	ret
    64a0:	9b 01       	movw	r18, r22
    64a2:	ac 01       	movw	r20, r24
    64a4:	0a 2e       	mov	r0, r26
    64a6:	06 94       	lsr	r0
    64a8:	57 95       	ror	r21
    64aa:	47 95       	ror	r20
    64ac:	37 95       	ror	r19
    64ae:	27 95       	ror	r18
    64b0:	ba 95       	dec	r27
    64b2:	c9 f7       	brne	.-14     	; 0x64a6 <__ultoa_invert+0xa2>
    64b4:	62 0f       	add	r22, r18
    64b6:	73 1f       	adc	r23, r19
    64b8:	84 1f       	adc	r24, r20
    64ba:	95 1f       	adc	r25, r21
    64bc:	a0 1d       	adc	r26, r0
    64be:	08 95       	ret

000064c0 <eeprom_read_block>:
    64c0:	dc 01       	movw	r26, r24
    64c2:	cb 01       	movw	r24, r22

000064c4 <eeprom_read_blraw>:
    64c4:	fc 01       	movw	r30, r24
    64c6:	f9 99       	sbic	0x1f, 1	; 31
    64c8:	fe cf       	rjmp	.-4      	; 0x64c6 <eeprom_read_blraw+0x2>
    64ca:	06 c0       	rjmp	.+12     	; 0x64d8 <eeprom_read_blraw+0x14>
    64cc:	f2 bd       	out	0x22, r31	; 34
    64ce:	e1 bd       	out	0x21, r30	; 33
    64d0:	f8 9a       	sbi	0x1f, 0	; 31
    64d2:	31 96       	adiw	r30, 0x01	; 1
    64d4:	00 b4       	in	r0, 0x20	; 32
    64d6:	0d 92       	st	X+, r0
    64d8:	41 50       	subi	r20, 0x01	; 1
    64da:	50 40       	sbci	r21, 0x00	; 0
    64dc:	b8 f7       	brcc	.-18     	; 0x64cc <eeprom_read_blraw+0x8>
    64de:	08 95       	ret

000064e0 <eeprom_read_byte>:
    64e0:	f9 99       	sbic	0x1f, 1	; 31
    64e2:	fe cf       	rjmp	.-4      	; 0x64e0 <eeprom_read_byte>
    64e4:	92 bd       	out	0x22, r25	; 34
    64e6:	81 bd       	out	0x21, r24	; 33
    64e8:	f8 9a       	sbi	0x1f, 0	; 31
    64ea:	99 27       	eor	r25, r25
    64ec:	80 b5       	in	r24, 0x20	; 32
    64ee:	08 95       	ret

000064f0 <eeprom_read_dword>:
    64f0:	a6 e1       	ldi	r26, 0x16	; 22
    64f2:	b0 e0       	ldi	r27, 0x00	; 0
    64f4:	44 e0       	ldi	r20, 0x04	; 4
    64f6:	50 e0       	ldi	r21, 0x00	; 0
    64f8:	e5 cf       	rjmp	.-54     	; 0x64c4 <eeprom_read_blraw>

000064fa <eeprom_read_word>:
    64fa:	a8 e1       	ldi	r26, 0x18	; 24
    64fc:	b0 e0       	ldi	r27, 0x00	; 0
    64fe:	42 e0       	ldi	r20, 0x02	; 2
    6500:	50 e0       	ldi	r21, 0x00	; 0
    6502:	e0 cf       	rjmp	.-64     	; 0x64c4 <eeprom_read_blraw>

00006504 <eeprom_update_block>:
    6504:	dc 01       	movw	r26, r24
    6506:	a4 0f       	add	r26, r20
    6508:	b5 1f       	adc	r27, r21
    650a:	41 50       	subi	r20, 0x01	; 1
    650c:	50 40       	sbci	r21, 0x00	; 0
    650e:	40 f0       	brcs	.+16     	; 0x6520 <eeprom_update_block+0x1c>
    6510:	cb 01       	movw	r24, r22
    6512:	84 0f       	add	r24, r20
    6514:	95 1f       	adc	r25, r21
    6516:	2e 91       	ld	r18, -X
    6518:	05 d0       	rcall	.+10     	; 0x6524 <eeprom_update_r18>
    651a:	41 50       	subi	r20, 0x01	; 1
    651c:	50 40       	sbci	r21, 0x00	; 0
    651e:	d8 f7       	brcc	.-10     	; 0x6516 <eeprom_update_block+0x12>
    6520:	08 95       	ret

00006522 <eeprom_update_byte>:
    6522:	26 2f       	mov	r18, r22

00006524 <eeprom_update_r18>:
    6524:	f9 99       	sbic	0x1f, 1	; 31
    6526:	fe cf       	rjmp	.-4      	; 0x6524 <eeprom_update_r18>
    6528:	92 bd       	out	0x22, r25	; 34
    652a:	81 bd       	out	0x21, r24	; 33
    652c:	f8 9a       	sbi	0x1f, 0	; 31
    652e:	01 97       	sbiw	r24, 0x01	; 1
    6530:	00 b4       	in	r0, 0x20	; 32
    6532:	02 16       	cp	r0, r18
    6534:	39 f0       	breq	.+14     	; 0x6544 <eeprom_update_r18+0x20>
    6536:	1f ba       	out	0x1f, r1	; 31
    6538:	20 bd       	out	0x20, r18	; 32
    653a:	0f b6       	in	r0, 0x3f	; 63
    653c:	f8 94       	cli
    653e:	fa 9a       	sbi	0x1f, 2	; 31
    6540:	f9 9a       	sbi	0x1f, 1	; 31
    6542:	0f be       	out	0x3f, r0	; 63
    6544:	08 95       	ret

00006546 <eeprom_update_dword>:
    6546:	03 96       	adiw	r24, 0x03	; 3
    6548:	27 2f       	mov	r18, r23
    654a:	ec df       	rcall	.-40     	; 0x6524 <eeprom_update_r18>
    654c:	ea df       	rcall	.-44     	; 0x6522 <eeprom_update_byte>
    654e:	25 2f       	mov	r18, r21
    6550:	e9 df       	rcall	.-46     	; 0x6524 <eeprom_update_r18>
    6552:	24 2f       	mov	r18, r20
    6554:	e7 cf       	rjmp	.-50     	; 0x6524 <eeprom_update_r18>

00006556 <eeprom_update_word>:
    6556:	01 96       	adiw	r24, 0x01	; 1
    6558:	27 2f       	mov	r18, r23
    655a:	e4 df       	rcall	.-56     	; 0x6524 <eeprom_update_r18>
    655c:	e2 cf       	rjmp	.-60     	; 0x6522 <eeprom_update_byte>

0000655e <_exit>:
    655e:	f8 94       	cli

00006560 <__stop_program>:
    6560:	ff cf       	rjmp	.-2      	; 0x6560 <__stop_program>
