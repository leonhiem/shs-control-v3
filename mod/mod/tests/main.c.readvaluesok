/*
 * I2C: tested with SCL clock freq 15kHz
 */

#include <stdlib.h>
#include <avr/io.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>

#define F_OSC F_CPU


// Set fuses: 
FUSES =
{
   .high = 0xff,
   .low  = 0x7a,
};

// I2C slave address is 0x3c.  <<1 is 0x78
// 00111100 // 0x3c
// 01111000 // 0x78
#define I2C_slaveAddress 0x78 // this address is <<1 (mask with 0xfe)


// PORTB pins:
#define ADC_I PORTB4
#define ADC_V PORTB3
#define RELAY PORTB0

#define PORT_SDA PORTB1
#define PORT_SCL PORTB2
#define PIN_SDA  PINB1
#define PIN_SCL  PINB2 

#define SDA_high() { PORTB |=  (1<<PORT_SDA); DDRB &= ~(1<<PORTB1); } // allow pullups
#define SDA_low()  { PORTB &= ~(1<<PORT_SDA); DDRB |=  (1<<PORTB1); } // drive to 0


// Small delay to create overlap time around SCL clock pulses
static inline void overlap_time(uint16_t count)
{
    asm volatile (  "cp  %A0,__zero_reg__ \n\t"  \
                 "cpc %B0,__zero_reg__ \n\t"  \
                 "breq L_Exit_%=       \n\t"  \
                 "L_LOOP_%=:           \n\t"  \
                 "sbiw %0,1            \n\t"  \
                 "brne L_LOOP_%=       \n\t"  \
                 "L_Exit_%=:           \n\t"  \
                 : "=w" (count)
                                     : "0"  (count)
               );
}


#define I2C_WAIT_FOR_START 0
#define I2C_RECEIVE_ADDR   1
#define I2C_RECEIVE_DATA   2
#define I2C_SEND_DATA      3

#define I2C_CMD_FREEZE_VOLT_CURR   0x20
#define I2C_CMD_READ_ADC_CURR_LSB  0x30
#define I2C_CMD_READ_ADC_CURR_MSB  0x31
#define I2C_CMD_READ_ADC_VOLT_LSB  0x40
#define I2C_CMD_READ_ADC_VOLT_MSB  0x41
#define I2C_CMD_SET_RELAY_OFF      0x50
#define I2C_CMD_SET_RELAY_ON       0x51


volatile uint8_t I2C_state;
volatile uint8_t I2C_response_data;

volatile uint8_t adc_curr_lsb;
volatile uint8_t adc_curr_msb;
volatile uint8_t adc_volt_lsb;
volatile uint8_t adc_volt_msb;

uint8_t process_i2c_command(uint8_t cmd)
{
  uint8_t ret=1;
  I2C_response_data = 0;

  switch(cmd) {
    /*
     * write commands
     */
    case I2C_CMD_SET_RELAY_OFF:
      PORTB &= ~(1<<RELAY);
      break;
    case I2C_CMD_SET_RELAY_ON:
      PORTB |= (1<<RELAY);
      break;
    case I2C_CMD_FREEZE_VOLT_CURR:
      //adc_curr_lsb=counter++;//0x12;//(uint8_t)(adc_curr&0xff);
      //adc_curr_msb=counter++;//0x34;//(uint8_t)((adc_curr>>8)&0xff);
      //adc_volt_lsb=counter++;//0x56;//(uint8_t)(adc_volt&0xff);
      //adc_volt_msb=counter++;//0x78;//(uint8_t)((adc_volt>>8)&0xff);
      adc_curr_lsb=0x12;//(uint8_t)(adc_curr&0xff);
      adc_curr_msb=0x34;//(uint8_t)((adc_curr>>8)&0xff);
      adc_volt_lsb=0x56;//(uint8_t)(adc_volt&0xff);
      adc_volt_msb=0x78;//(uint8_t)((adc_volt>>8)&0xff);
      break;
    /*
     * read commands
     */
    case I2C_CMD_READ_ADC_CURR_LSB:
      I2C_response_data = adc_curr_lsb;
      break;
    case I2C_CMD_READ_ADC_CURR_MSB:
      I2C_response_data = adc_curr_msb;
      break;
    case I2C_CMD_READ_ADC_VOLT_LSB:
      I2C_response_data = adc_volt_lsb;
      break;
    case I2C_CMD_READ_ADC_VOLT_MSB:
      I2C_response_data = adc_volt_msb;
      break;
    default:
      ret=0; // unsupported command
      break;
  }
  return ret;
}

void write_I2C_byte(uint8_t data)
{
  uint8_t i,d=data;
  for (i=0; i<8; i++) {
      if(d&0x80) { SDA_high(); } else { SDA_low(); } // MSB first
      loop_until_bit_is_set(PINB, PIN_SCL);
      loop_until_bit_is_clear(PINB, PIN_SCL);
      d=(d<<1);
  }
  // accept ACK or NACK
  SDA_high();
  loop_until_bit_is_set(PINB, PIN_SCL);
  loop_until_bit_is_clear(PINB, PIN_SCL);

  I2C_state = I2C_WAIT_FOR_START;
}

uint8_t read_I2C_byte(uint8_t match_slaveaddr)
{
  uint8_t i;
  uint8_t data = 0;

  for (i=0; i<8; i++) {
      overlap_time(15);
      loop_until_bit_is_set(PINB, PIN_SCL);
      overlap_time(15);

      data = (data << 1);
      if(bit_is_set(PINB,PIN_SDA)) { data |= 1; } 

      while (bit_is_set(PINB,PIN_SCL)) {
          // If SDA changes while SCL is high, it's a
          // stop (low to high) or start (high to low) condition.
          if( ((data&1)==1) && bit_is_clear(PINB,PIN_SDA)) { 
              I2C_state = I2C_RECEIVE_ADDR;
              return 0; //I2C_START_DETECTED;
          }
          if( ((data&1)==0) && bit_is_set(PINB,PIN_SDA)) { 
              I2C_state = I2C_WAIT_FOR_START;
              return 0; //I2C_STOP_DETECTED;
          }
      }
  }
  // Send ACK -- SCL is low now
  if (match_slaveaddr) {
      if((data & 0xfe) == I2C_slaveAddress) {
          // send ACK
          SDA_low();
          loop_until_bit_is_set(PINB, PIN_SCL);
          loop_until_bit_is_clear(PINB, PIN_SCL);
          overlap_time(15);
          SDA_high();

          if (data & 1) {
              I2C_state = I2C_SEND_DATA;
          } else {
              I2C_state = I2C_RECEIVE_DATA;
          }
      } else {
          I2C_state = I2C_WAIT_FOR_START;
          return 0; //(I2C_ADDR_MISMATCH);
      }
  } else { // match command
      if(process_i2c_command(data)) {
          // send ACK
          SDA_low();
          loop_until_bit_is_set(PINB, PIN_SCL);
          loop_until_bit_is_clear(PINB, PIN_SCL);
          overlap_time(15);
          SDA_high();
      }
      I2C_state = I2C_WAIT_FOR_START;
  }
  return data;
}


// pin change interrupt on SDA line
ISR(PCINT0_vect)
{
  if (bit_is_clear(PINB,PIN_SDA) && bit_is_set(PINB,PIN_SCL)) {
      GIMSK &= ~(1<<PCIE); // disable pin change interrupt for SDA
      loop_until_bit_is_clear(PINB, PIN_SCL);
      I2C_state = I2C_RECEIVE_ADDR;

      while(I2C_state != I2C_WAIT_FOR_START) {
          switch(I2C_state) {
            case I2C_RECEIVE_ADDR:
              read_I2C_byte(1); // read address, 1=addr match
              //I2C_state = I2C_WAIT_FOR_START;
              break;
            case I2C_RECEIVE_DATA:
              read_I2C_byte(0);
              break;
            case I2C_SEND_DATA:
              write_I2C_byte(I2C_response_data);
              //write_I2C_byte(0x31);
              break;
            default: 
              I2C_state = I2C_WAIT_FOR_START;
              break;
          }
      }
      GIMSK |= (1<<PCIE);   // enable pin change interrupt for SDA
  } 
}

int main(void) 
{
    PORTB |= ((1<<PORT_SCL)|(1<<PORT_SDA)); // pullups on
    DDRB  |= (1<<RELAY); // output for relay, I2C pullup

    PCMSK |= (1<<PCINT1); // enable PCINT1 interrupt on pin change (SDA line)
    GIMSK |= (1<<PCIE);   // enable pin change interrupt

    I2C_state = I2C_WAIT_FOR_START;

    sei(); // enable interrupts

    while(1) {
        asm volatile ("nop");
    }
}

